var data = {lines:[
{"lineNum":"    1","line":"#include \"grootle.h\""},
{"lineNum":"    2","line":"#include \"transcript.h\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"namespace spark {"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"// Useful scalar constants"},
{"lineNum":"    7","line":"const Scalar ZERO = Scalar(uint64_t(0));","class":"lineCov","hits":"2","order":"26","possible_hits":"2",},
{"lineNum":"    8","line":"const Scalar ONE = Scalar(uint64_t(1));","class":"lineCov","hits":"2","order":"69","possible_hits":"2",},
{"lineNum":"    9","line":"const Scalar TWO = Scalar(uint64_t(2));","class":"lineCov","hits":"2","order":"70","possible_hits":"2",},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"Grootle::Grootle("},
{"lineNum":"   12","line":"        const GroupElement& H_,"},
{"lineNum":"   13","line":"        const std::vector<GroupElement>& Gi_,"},
{"lineNum":"   14","line":"        const std::vector<GroupElement>& Hi_,"},
{"lineNum":"   15","line":"        const std::size_t n_,"},
{"lineNum":"   16","line":"        const std::size_t m_)"},
{"lineNum":"   17","line":"        : H (H_)","class":"lineCov","hits":"1","order":"1040","possible_hits":"1",},
{"lineNum":"   18","line":"        , Gi (Gi_)","class":"lineCov","hits":"1","order":"1041","possible_hits":"1",},
{"lineNum":"   19","line":"        , Hi (Hi_)","class":"lineCov","hits":"1","order":"1042","possible_hits":"1",},
{"lineNum":"   20","line":"        , n (n_)","class":"lineCov","hits":"1","order":"1043","possible_hits":"1",},
{"lineNum":"   21","line":"        , m (m_)","class":"lineCov","hits":"1","order":"1044","possible_hits":"1",},
{"lineNum":"   22","line":"{","class":"lineCov","hits":"2","order":"1039","possible_hits":"2",},
{"lineNum":"   23","line":"    if (!(n > 1 && m > 1)) {","class":"lineCov","hits":"1","order":"1045","possible_hits":"1",},
{"lineNum":"   24","line":"        throw std::invalid_argument(\"Bad Grootle size parameters!\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   25","line":"    }"},
{"lineNum":"   26","line":"    if (Gi.size() != n*m || Hi.size() != n*m) {","class":"lineCov","hits":"1","order":"1046","possible_hits":"1",},
{"lineNum":"   27","line":"        throw std::invalid_argument(\"Bad Grootle generator size!\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   28","line":"    }"},
{"lineNum":"   29","line":"}","class":"linePartCov","hits":"1","order":"1047","possible_hits":"4",},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"// Compute a delta function vector"},
{"lineNum":"   32","line":"static inline std::vector<Scalar> convert_to_sigma(std::size_t num, const std::size_t n, const std::size_t m) {","class":"lineCov","hits":"2","order":"1448","possible_hits":"2",},
{"lineNum":"   33","line":"    std::vector<Scalar> result;","class":"lineCov","hits":"1","order":"1449","possible_hits":"1",},
{"lineNum":"   34","line":"    result.reserve(n*m);","class":"lineCov","hits":"1","order":"1450","possible_hits":"1",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    for (std::size_t j = 0; j < m; j++) {","class":"lineCov","hits":"2","order":"1451","possible_hits":"2",},
{"lineNum":"   37","line":"        for (std::size_t i = 0; i < n; i++) {","class":"lineCov","hits":"2","order":"1452","possible_hits":"2",},
{"lineNum":"   38","line":"            if (i == (num % n)) {","class":"lineCov","hits":"1","order":"1453","possible_hits":"1",},
{"lineNum":"   39","line":"                result.emplace_back(ONE);","class":"lineCov","hits":"1","order":"1456","possible_hits":"1",},
{"lineNum":"   40","line":"            } else {","class":"lineCov","hits":"1","order":"1457","possible_hits":"1",},
{"lineNum":"   41","line":"                result.emplace_back(ZERO);","class":"lineCov","hits":"1","order":"1454","possible_hits":"1",},
{"lineNum":"   42","line":"            }"},
{"lineNum":"   43","line":"        }","class":"lineCov","hits":"1","order":"1455","possible_hits":"1",},
{"lineNum":"   44","line":"        num /= n;","class":"lineCov","hits":"1","order":"1458","possible_hits":"1",},
{"lineNum":"   45","line":"    }"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    return result;","class":"lineCov","hits":"1","order":"1459","possible_hits":"1",},
{"lineNum":"   48","line":"}","class":"linePartCov","hits":"1","order":"1460","possible_hits":"2",},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"// Decompose an integer with arbitrary base and padded size"},
{"lineNum":"   51","line":"static inline std::vector<std::size_t> decompose(std::size_t num, const std::size_t n, const std::size_t m) {","class":"lineCov","hits":"2","order":"1489","possible_hits":"2",},
{"lineNum":"   52","line":"    std::vector<std::size_t> result;","class":"lineCov","hits":"1","order":"1490","possible_hits":"1",},
{"lineNum":"   53","line":"    result.reserve(m);","class":"lineCov","hits":"1","order":"1491","possible_hits":"1",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    while (num != 0) {","class":"lineCov","hits":"2","order":"1492","possible_hits":"2",},
{"lineNum":"   56","line":"        result.emplace_back(num % n);","class":"lineCov","hits":"1","order":"1516","possible_hits":"1",},
{"lineNum":"   57","line":"        num /= n;","class":"lineCov","hits":"1","order":"1517","possible_hits":"1",},
{"lineNum":"   58","line":"    }"},
{"lineNum":"   59","line":"    result.resize(m);","class":"lineCov","hits":"1","order":"1493","possible_hits":"1",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    return result;","class":"lineCov","hits":"1","order":"1494","possible_hits":"1",},
{"lineNum":"   62","line":"}","class":"linePartCov","hits":"1","order":"1495","possible_hits":"2",},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"// Compute a double Pedersen vector commitment"},
{"lineNum":"   65","line":"static inline GroupElement vector_commit(const std::vector<GroupElement>& Gi, const std::vector<GroupElement>& Hi, const std::vector<Scalar>& a, const std::vector<Scalar>& b, const GroupElement& H, const Scalar& r) {","class":"lineCov","hits":"2","order":"1274","possible_hits":"2",},
{"lineNum":"   66","line":"    return secp_primitives::MultiExponent(Gi, a).get_multiple() + secp_primitives::MultiExponent(Hi, b).get_multiple() + H*r;","class":"linePartCov","hits":"1","order":"1275","possible_hits":"2",},
{"lineNum":"   67","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"// Compute a convolution with a degree-one polynomial"},
{"lineNum":"   70","line":"static inline void convolve(const Scalar& x_1, const Scalar& x_0, std::vector<Scalar>& coefficients) {","class":"lineCov","hits":"2","order":"1500","possible_hits":"2",},
{"lineNum":"   71","line":"    if (coefficients.empty()) {","class":"lineCov","hits":"1","order":"1501","possible_hits":"1",},
{"lineNum":"   72","line":"        throw std::runtime_error(\"Empty convolution coefficient vector!\");","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   73","line":"    }"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"    std::size_t degree = coefficients.size() - 1;","class":"lineCov","hits":"1","order":"1502","possible_hits":"1",},
{"lineNum":"   76","line":"    coefficients.emplace_back(x_1*coefficients[degree]);","class":"linePartCov","hits":"1","order":"1503","possible_hits":"2",},
{"lineNum":"   77","line":"    for (std::size_t i = degree; i >=1; i--) {","class":"lineCov","hits":"2","order":"1504","possible_hits":"2",},
{"lineNum":"   78","line":"        coefficients[i] = x_0*coefficients[i] + x_1*coefficients[i-1];","class":"linePartCov","hits":"1","order":"1505","possible_hits":"2",},
{"lineNum":"   79","line":"    }"},
{"lineNum":"   80","line":"    coefficients[0] *= x_0;","class":"lineCov","hits":"1","order":"1509","possible_hits":"1",},
{"lineNum":"   81","line":"}","class":"linePartCov","hits":"1","order":"1514","possible_hits":"4",},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"static bool compute_fs("},
{"lineNum":"   84","line":"        const GrootleProof& proof,"},
{"lineNum":"   85","line":"        const Scalar& x,"},
{"lineNum":"   86","line":"        std::vector<Scalar>& f_,"},
{"lineNum":"   87","line":"        const std::size_t n,"},
{"lineNum":"   88","line":"        const std::size_t m) {","class":"lineCov","hits":"2","order":"1724","possible_hits":"2",},
{"lineNum":"   89","line":"    for (std::size_t j = 0; j < proof.f.size(); ++j) {","class":"lineCov","hits":"2","order":"1725","possible_hits":"2",},
{"lineNum":"   90","line":"        if(proof.f[j] == x)","class":"lineCov","hits":"1","order":"1726","possible_hits":"1",},
{"lineNum":"   91","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"    }","class":"lineCov","hits":"1","order":"1727","possible_hits":"1",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    f_.reserve(n * m);","class":"lineCov","hits":"1","order":"1728","possible_hits":"1",},
{"lineNum":"   95","line":"    for (std::size_t j = 0; j < m; ++j)","class":"lineCov","hits":"2","order":"1729","possible_hits":"2",},
{"lineNum":"   96","line":"    {"},
{"lineNum":"   97","line":"        f_.push_back(Scalar(uint64_t(0)));","class":"linePartCov","hits":"1","order":"1730","possible_hits":"4",},
{"lineNum":"   98","line":"        Scalar temp;","class":"lineCov","hits":"1","order":"1731","possible_hits":"1",},
{"lineNum":"   99","line":"        std::size_t k = n - 1;","class":"lineCov","hits":"1","order":"1732","possible_hits":"1",},
{"lineNum":"  100","line":"        for (std::size_t i = 0; i < k; ++i)","class":"lineCov","hits":"2","order":"1733","possible_hits":"2",},
{"lineNum":"  101","line":"        {"},
{"lineNum":"  102","line":"            temp += proof.f[j * k + i];","class":"lineCov","hits":"1","order":"1734","possible_hits":"1",},
{"lineNum":"  103","line":"            f_.emplace_back(proof.f[j * k + i]);","class":"lineCov","hits":"1","order":"1735","possible_hits":"1",},
{"lineNum":"  104","line":"        }","class":"lineCov","hits":"1","order":"1736","possible_hits":"1",},
{"lineNum":"  105","line":"        f_[j * n] = x - temp;","class":"linePartCov","hits":"1","order":"1737","possible_hits":"2",},
{"lineNum":"  106","line":"    }","class":"linePartCov","hits":"1","order":"1738","possible_hits":"2",},
{"lineNum":"  107","line":"    return true;","class":"lineCov","hits":"1","order":"1739","possible_hits":"1",},
{"lineNum":"  108","line":"}","class":"linePartCov","hits":"1","order":"1740","possible_hits":"4",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"static void compute_batch_fis("},
{"lineNum":"  111","line":"        Scalar& f_sum,"},
{"lineNum":"  112","line":"        const Scalar& f_i,"},
{"lineNum":"  113","line":"        int j,"},
{"lineNum":"  114","line":"        const std::vector<Scalar>& f,"},
{"lineNum":"  115","line":"        const Scalar& y,"},
{"lineNum":"  116","line":"        std::vector<Scalar>::iterator& ptr,"},
{"lineNum":"  117","line":"        std::vector<Scalar>::iterator start_ptr,"},
{"lineNum":"  118","line":"        std::vector<Scalar>::iterator end_ptr,"},
{"lineNum":"  119","line":"        const std::size_t n) {","class":"lineCov","hits":"2","order":"1755","possible_hits":"2",},
{"lineNum":"  120","line":"    j--;","class":"lineCov","hits":"1","order":"1756","possible_hits":"1",},
{"lineNum":"  121","line":"    if (j == -1)","class":"lineCov","hits":"1","order":"1757","possible_hits":"1",},
{"lineNum":"  122","line":"    {"},
{"lineNum":"  123","line":"        if(ptr >= start_ptr && ptr < end_ptr){","class":"lineCov","hits":"1","order":"1763","possible_hits":"1",},
{"lineNum":"  124","line":"            *ptr++ += f_i * y;","class":"linePartCov","hits":"1","order":"1764","possible_hits":"4",},
{"lineNum":"  125","line":"            f_sum += f_i;","class":"lineCov","hits":"1","order":"1765","possible_hits":"1",},
{"lineNum":"  126","line":"        }","class":"lineCov","hits":"1","order":"1766","possible_hits":"1",},
{"lineNum":"  127","line":"        return;","class":"lineCov","hits":"1","order":"1767","possible_hits":"1",},
{"lineNum":"  128","line":"    }"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    Scalar t;","class":"lineCov","hits":"1","order":"1758","possible_hits":"1",},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    for (std::size_t i = 0; i < n; i++)","class":"lineCov","hits":"2","order":"1759","possible_hits":"2",},
{"lineNum":"  133","line":"    {"},
{"lineNum":"  134","line":"        t = f[j * n + i];","class":"lineCov","hits":"1","order":"1760","possible_hits":"1",},
{"lineNum":"  135","line":"        t *= f_i;","class":"lineCov","hits":"1","order":"1761","possible_hits":"1",},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"        compute_batch_fis(f_sum, t, j, f, y, ptr, start_ptr, end_ptr, n);","class":"lineCov","hits":"1","order":"1762","possible_hits":"1",},
{"lineNum":"  138","line":"    }","class":"lineCov","hits":"1","order":"1768","possible_hits":"1",},
{"lineNum":"  139","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"void Grootle::prove("},
{"lineNum":"  142","line":"        const std::size_t l,"},
{"lineNum":"  143","line":"        const Scalar& s,"},
{"lineNum":"  144","line":"        const std::vector<GroupElement>& S,"},
{"lineNum":"  145","line":"        const GroupElement& S1,"},
{"lineNum":"  146","line":"        const Scalar& v,"},
{"lineNum":"  147","line":"        const std::vector<GroupElement>& V,"},
{"lineNum":"  148","line":"        const GroupElement& V1,"},
{"lineNum":"  149","line":"        const std::vector<unsigned char>& root,"},
{"lineNum":"  150","line":"        GrootleProof& proof) {","class":"lineCov","hits":"2","order":"1062","possible_hits":"2",},
{"lineNum":"  151","line":"    // Check statement validity"},
{"lineNum":"  152","line":"    std::size_t N = (std::size_t) pow(n, m); // padded input size","class":"lineCov","hits":"1","order":"1063","possible_hits":"1",},
{"lineNum":"  153","line":"    std::size_t size = S.size(); // actual input size","class":"lineCov","hits":"1","order":"1064","possible_hits":"1",},
{"lineNum":"  154","line":"    if (l >= size) {","class":"lineCov","hits":"1","order":"1065","possible_hits":"1",},
{"lineNum":"  155","line":"        throw std::invalid_argument(\"Bad Grootle secret index!\");","class":"linePartCov","hits":"1","order":"1816","possible_hits":"4",},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":"    if (V.size() != S.size()) {","class":"lineCov","hits":"1","order":"1066","possible_hits":"1",},
{"lineNum":"  158","line":"        throw std::invalid_argument(\"Bad Grootle input vector sizes!\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  159","line":"    }"},
{"lineNum":"  160","line":"    if (size > N || size == 0) {","class":"lineCov","hits":"1","order":"1067","possible_hits":"1",},
{"lineNum":"  161","line":"        throw std::invalid_argument(\"Bad Grootle size parameter!\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  162","line":"    }"},
{"lineNum":"  163","line":"    if (S[l] + S1.inverse() != H*s) {","class":"linePartCov","hits":"1","order":"1068","possible_hits":"2",},
{"lineNum":"  164","line":"        throw std::invalid_argument(\"Bad Grootle proof statement!\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  165","line":"    }"},
{"lineNum":"  166","line":"    if (V[l] + V1.inverse() != H*v) {","class":"linePartCov","hits":"1","order":"1096","possible_hits":"2",},
{"lineNum":"  167","line":"        throw std::invalid_argument(\"Bad Grootle proof statement!\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  168","line":"    }"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    // Set up transcript"},
{"lineNum":"  171","line":"    Transcript transcript(LABEL_TRANSCRIPT_GROOTLE);","class":"linePartCov","hits":"1","order":"1097","possible_hits":"2",},
{"lineNum":"  172","line":"    transcript.add(\"H\", H);","class":"linePartCov","hits":"1","order":"1125","possible_hits":"2",},
{"lineNum":"  173","line":"    transcript.add(\"Gi\", Gi);","class":"linePartCov","hits":"1","order":"1147","possible_hits":"2",},
{"lineNum":"  174","line":"    transcript.add(\"Hi\", Hi);","class":"linePartCov","hits":"1","order":"1159","possible_hits":"2",},
{"lineNum":"  175","line":"    transcript.add(\"n\", Scalar(n));","class":"linePartCov","hits":"1","order":"1160","possible_hits":"2",},
{"lineNum":"  176","line":"    transcript.add(\"m\", Scalar(m));","class":"linePartCov","hits":"1","order":"1169","possible_hits":"2",},
{"lineNum":"  177","line":"    transcript.add(\"root\", root);","class":"linePartCov","hits":"1","order":"1170","possible_hits":"2",},
{"lineNum":"  178","line":"    transcript.add(\"S1\", S1);","class":"linePartCov","hits":"1","order":"1176","possible_hits":"2",},
{"lineNum":"  179","line":"    transcript.add(\"V1\", V1);","class":"linePartCov","hits":"1","order":"1177","possible_hits":"2",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    // Compute A"},
{"lineNum":"  182","line":"    std::vector<Scalar> a;","class":"lineCov","hits":"1","order":"1178","possible_hits":"1",},
{"lineNum":"  183","line":"    a.resize(n*m);","class":"lineCov","hits":"1","order":"1179","possible_hits":"1",},
{"lineNum":"  184","line":"    for (std::size_t j = 0; j < m; j++) {","class":"lineCov","hits":"2","order":"1180","possible_hits":"2",},
{"lineNum":"  185","line":"        for (std::size_t i = 1; i < n; i++) {","class":"lineCov","hits":"2","order":"1181","possible_hits":"2",},
{"lineNum":"  186","line":"            a[j*n + i].randomize();","class":"lineCov","hits":"1","order":"1182","possible_hits":"1",},
{"lineNum":"  187","line":"            a[j*n] -= a[j*n + i];","class":"lineCov","hits":"1","order":"1224","possible_hits":"1",},
{"lineNum":"  188","line":"        }","class":"lineCov","hits":"1","order":"1240","possible_hits":"1",},
{"lineNum":"  189","line":"    }","class":"lineCov","hits":"1","order":"1241","possible_hits":"1",},
{"lineNum":"  190","line":"    std::vector<Scalar> d;","class":"lineCov","hits":"1","order":"1242","possible_hits":"1",},
{"lineNum":"  191","line":"    d.resize(n*m);","class":"lineCov","hits":"1","order":"1243","possible_hits":"1",},
{"lineNum":"  192","line":"    for (std::size_t i = 0; i < n*m; i++) {","class":"lineCov","hits":"2","order":"1244","possible_hits":"2",},
{"lineNum":"  193","line":"        d[i] = a[i].square().negate();","class":"linePartCov","hits":"1","order":"1245","possible_hits":"2",},
{"lineNum":"  194","line":"    }"},
{"lineNum":"  195","line":"    Scalar rA;","class":"lineCov","hits":"1","order":"1271","possible_hits":"1",},
{"lineNum":"  196","line":"    rA.randomize();","class":"lineCov","hits":"1","order":"1272","possible_hits":"1",},
{"lineNum":"  197","line":"    proof.A = vector_commit(Gi, Hi, a, d, H, rA);","class":"linePartCov","hits":"1","order":"1273","possible_hits":"2",},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    // Compute B"},
{"lineNum":"  200","line":"    std::vector<Scalar> sigma = convert_to_sigma(l, n, m);","class":"lineCov","hits":"1","order":"1447","possible_hits":"1",},
{"lineNum":"  201","line":"    std::vector<Scalar> c;","class":"lineCov","hits":"1","order":"1461","possible_hits":"1",},
{"lineNum":"  202","line":"    c.resize(n*m);","class":"lineCov","hits":"1","order":"1462","possible_hits":"1",},
{"lineNum":"  203","line":"    for (std::size_t i = 0; i < n*m; i++) {","class":"lineCov","hits":"2","order":"1463","possible_hits":"2",},
{"lineNum":"  204","line":"        c[i] = a[i]*(ONE - TWO*sigma[i]);","class":"linePartCov","hits":"1","order":"1464","possible_hits":"2",},
{"lineNum":"  205","line":"    }"},
{"lineNum":"  206","line":"    Scalar rB;","class":"lineCov","hits":"1","order":"1481","possible_hits":"1",},
{"lineNum":"  207","line":"    rB.randomize();","class":"lineCov","hits":"1","order":"1482","possible_hits":"1",},
{"lineNum":"  208","line":"    proof.B = vector_commit(Gi, Hi, sigma, c, H, rB);","class":"linePartCov","hits":"1","order":"1483","possible_hits":"2",},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    // Compute convolution terms"},
{"lineNum":"  211","line":"    std::vector<std::vector<Scalar>> P_i_j;","class":"lineCov","hits":"1","order":"1484","possible_hits":"1",},
{"lineNum":"  212","line":"    P_i_j.resize(size);","class":"lineCov","hits":"1","order":"1485","possible_hits":"1",},
{"lineNum":"  213","line":"    for (std::size_t i = 0; i < size - 1; ++i)","class":"lineCov","hits":"2","order":"1486","possible_hits":"2",},
{"lineNum":"  214","line":"    {"},
{"lineNum":"  215","line":"        std::vector<Scalar>& coefficients = P_i_j[i];","class":"lineCov","hits":"1","order":"1487","possible_hits":"1",},
{"lineNum":"  216","line":"        std::vector<std::size_t> I = decompose(i, n, m);","class":"lineCov","hits":"1","order":"1488","possible_hits":"1",},
{"lineNum":"  217","line":"        coefficients.push_back(a[I[0]]);","class":"lineCov","hits":"1","order":"1496","possible_hits":"1",},
{"lineNum":"  218","line":"        coefficients.push_back(sigma[I[0]]);","class":"lineCov","hits":"1","order":"1497","possible_hits":"1",},
{"lineNum":"  219","line":"        for (std::size_t j = 1; j < m; ++j) {","class":"lineCov","hits":"2","order":"1498","possible_hits":"2",},
{"lineNum":"  220","line":"            convolve(sigma[j*n + I[j]], a[j*n + I[j]], coefficients);","class":"lineCov","hits":"1","order":"1499","possible_hits":"1",},
{"lineNum":"  221","line":"        }","class":"lineCov","hits":"1","order":"1515","possible_hits":"1",},
{"lineNum":"  222","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"    /*"},
{"lineNum":"  225","line":"     * To optimize calculation of sum of all polynomials indices \'s\' = size-1 through \'n^m-1\' we use the"},
{"lineNum":"  226","line":"     * fact that sum of all of elements in each row of \'a\' array is zero. Computation is done by going"},
{"lineNum":"  227","line":"     * through n-ary representation of \'s\' and increasing \"digit\" at each position to \'n-1\' one by one."},
{"lineNum":"  228","line":"     * During every step digits at higher positions are fixed and digits at lower positions go through all"},
{"lineNum":"  229","line":"     * possible combinations with a total corresponding polynomial sum of \'x^j\'."},
{"lineNum":"  230","line":"     *"},
{"lineNum":"  231","line":"     * The math behind optimization (TeX notation):"},
{"lineNum":"  232","line":"     *"},
{"lineNum":"  233","line":"     * \\sum_{i=s+1}^{N-1}p_i(x) ="},
{"lineNum":"  234","line":"     *   \\sum_{j=0}^{m-1}"},
{"lineNum":"  235","line":"     *     \\left["},
{"lineNum":"  236","line":"     *       \\left( \\sum_{i=s_j+1}^{n-1}(\\delta_{l_j,i}x+a_{j,i}) \\right)"},
{"lineNum":"  237","line":"     *       \\left( \\prod_{k=j}^{m-1}(\\delta_{l_k,s_k}x+a_{k,s_k}) \\right)"},
{"lineNum":"  238","line":"     *       x^j"},
{"lineNum":"  239","line":"     *     \\right]"},
{"lineNum":"  240","line":"     */"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"    std::vector<std::size_t> I = decompose(size - 1, n, m);","class":"lineCov","hits":"1","order":"1518","possible_hits":"1",},
{"lineNum":"  243","line":"    std::vector<std::size_t> lj = decompose(l, n, m);","class":"lineCov","hits":"1","order":"1519","possible_hits":"1",},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"    std::vector<Scalar> p_i_sum;","class":"lineCov","hits":"1","order":"1520","possible_hits":"1",},
{"lineNum":"  246","line":"    p_i_sum.emplace_back(ONE);","class":"lineCov","hits":"1","order":"1521","possible_hits":"1",},
{"lineNum":"  247","line":"    std::vector<std::vector<Scalar>> partial_p_s;","class":"lineCov","hits":"1","order":"1522","possible_hits":"1",},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    // Pre-calculate product parts and calculate p_s(x) at the same time, put the latter into p_i_sum"},
{"lineNum":"  250","line":"    for (std::ptrdiff_t j = m - 1; j >= 0; j--) {","class":"lineCov","hits":"2","order":"1523","possible_hits":"2",},
{"lineNum":"  251","line":"        partial_p_s.push_back(p_i_sum);","class":"lineCov","hits":"1","order":"1524","possible_hits":"1",},
{"lineNum":"  252","line":"        convolve(sigma[j*n + I[j]], a[j*n + I[j]], p_i_sum);","class":"lineCov","hits":"1","order":"1525","possible_hits":"1",},
{"lineNum":"  253","line":"    }","class":"lineCov","hits":"1","order":"1526","possible_hits":"1",},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"    for (std::size_t j = 0; j < m; j++) {","class":"lineCov","hits":"2","order":"1527","possible_hits":"2",},
{"lineNum":"  256","line":"        // \\sum_{i=s_j+1}^{n-1}(\\delta_{l_j,i}x+a_{j,i})"},
{"lineNum":"  257","line":"        Scalar a_sum(uint64_t(0));","class":"lineCov","hits":"1","order":"1528","possible_hits":"1",},
{"lineNum":"  258","line":"        for (std::size_t i = I[j] + 1; i < n; i++)","class":"linePartCov","hits":"1","order":"1529","possible_hits":"2",},
{"lineNum":"  259","line":"            a_sum += a[j * n + i];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"        Scalar x_sum(uint64_t(lj[j] >= I[j]+1 ? 1 : 0));","class":"lineCov","hits":"1","order":"1530","possible_hits":"1",},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"        // Multiply by \\prod_{k=j}^{m-1}(\\delta_{l_k,s_k}x+a_{k,s_k})"},
{"lineNum":"  263","line":"        std::vector<Scalar> &polynomial = partial_p_s[m - j - 1];","class":"lineCov","hits":"1","order":"1531","possible_hits":"1",},
{"lineNum":"  264","line":"        convolve(x_sum, a_sum, polynomial);","class":"lineCov","hits":"1","order":"1532","possible_hits":"1",},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"        // Multiply by x^j and add to the result"},
{"lineNum":"  267","line":"        for (std::size_t k = 0; k < m - j; k++)","class":"lineCov","hits":"2","order":"1533","possible_hits":"2",},
{"lineNum":"  268","line":"            p_i_sum[j + k] += polynomial[k];","class":"lineCov","hits":"1","order":"1534","possible_hits":"1",},
{"lineNum":"  269","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"    P_i_j[size - 1] = p_i_sum;","class":"lineCov","hits":"1","order":"1539","possible_hits":"1",},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"    // Perform the commitment offsets"},
{"lineNum":"  274","line":"    std::vector<GroupElement> S_offset(S);","class":"lineCov","hits":"1","order":"1540","possible_hits":"1",},
{"lineNum":"  275","line":"    std::vector<GroupElement> V_offset(V);","class":"lineCov","hits":"1","order":"1541","possible_hits":"1",},
{"lineNum":"  276","line":"    GroupElement S1_inverse = S1.inverse();","class":"lineCov","hits":"1","order":"1542","possible_hits":"1",},
{"lineNum":"  277","line":"    GroupElement V1_inverse = V1.inverse();","class":"lineCov","hits":"1","order":"1543","possible_hits":"1",},
{"lineNum":"  278","line":"    for (std::size_t k = 0; k < S_offset.size(); k++) {","class":"lineCov","hits":"2","order":"1544","possible_hits":"2",},
{"lineNum":"  279","line":"        S_offset[k] += S1_inverse;","class":"lineCov","hits":"1","order":"1545","possible_hits":"1",},
{"lineNum":"  280","line":"        V_offset[k] += V1_inverse;","class":"lineCov","hits":"1","order":"1546","possible_hits":"1",},
{"lineNum":"  281","line":"    }","class":"lineCov","hits":"1","order":"1547","possible_hits":"1",},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    // Generate masks"},
{"lineNum":"  284","line":"    std::vector<Scalar> rho_S, rho_V;","class":"lineCov","hits":"1","order":"1548","possible_hits":"1",},
{"lineNum":"  285","line":"    rho_S.resize(m);","class":"lineCov","hits":"1","order":"1549","possible_hits":"1",},
{"lineNum":"  286","line":"    rho_V.resize(m);","class":"lineCov","hits":"1","order":"1550","possible_hits":"1",},
{"lineNum":"  287","line":"    for (std::size_t j = 0; j < m; j++) {","class":"lineCov","hits":"2","order":"1551","possible_hits":"2",},
{"lineNum":"  288","line":"        rho_S[j].randomize();","class":"lineCov","hits":"1","order":"1552","possible_hits":"1",},
{"lineNum":"  289","line":"        rho_V[j].randomize();","class":"lineCov","hits":"1","order":"1553","possible_hits":"1",},
{"lineNum":"  290","line":"    }","class":"lineCov","hits":"1","order":"1554","possible_hits":"1",},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"    proof.X.reserve(m);","class":"lineCov","hits":"1","order":"1555","possible_hits":"1",},
{"lineNum":"  293","line":"    proof.X1.reserve(m);","class":"lineCov","hits":"1","order":"1556","possible_hits":"1",},
{"lineNum":"  294","line":"    for (std::size_t j = 0; j < m; ++j)","class":"lineCov","hits":"2","order":"1557","possible_hits":"2",},
{"lineNum":"  295","line":"    {"},
{"lineNum":"  296","line":"        std::vector<Scalar> P_i;","class":"lineCov","hits":"1","order":"1558","possible_hits":"1",},
{"lineNum":"  297","line":"        P_i.reserve(size);","class":"lineCov","hits":"1","order":"1559","possible_hits":"1",},
{"lineNum":"  298","line":"        for (std::size_t i = 0; i < size; ++i){","class":"lineCov","hits":"2","order":"1560","possible_hits":"2",},
{"lineNum":"  299","line":"            P_i.emplace_back(P_i_j[i][j]);","class":"lineCov","hits":"1","order":"1561","possible_hits":"1",},
{"lineNum":"  300","line":"        }","class":"lineCov","hits":"1","order":"1562","possible_hits":"1",},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"        // S"},
{"lineNum":"  303","line":"        secp_primitives::MultiExponent mult_S(S_offset, P_i);","class":"lineCov","hits":"1","order":"1563","possible_hits":"1",},
{"lineNum":"  304","line":"        proof.X.emplace_back(mult_S.get_multiple() + H*rho_S[j]);","class":"linePartCov","hits":"1","order":"1564","possible_hits":"2",},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"        // V"},
{"lineNum":"  307","line":"        secp_primitives::MultiExponent mult_V(V_offset, P_i);","class":"lineCov","hits":"1","order":"1565","possible_hits":"1",},
{"lineNum":"  308","line":"        proof.X1.emplace_back(mult_V.get_multiple() + H*rho_V[j]);","class":"linePartCov","hits":"1","order":"1566","possible_hits":"2",},
{"lineNum":"  309","line":"    }","class":"linePartCov","hits":"1","order":"1567","possible_hits":"2",},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"    // Challenge"},
{"lineNum":"  312","line":"    transcript.add(\"A\", proof.A);","class":"linePartCov","hits":"1","order":"1568","possible_hits":"2",},
{"lineNum":"  313","line":"    transcript.add(\"B\", proof.B);","class":"linePartCov","hits":"1","order":"1569","possible_hits":"2",},
{"lineNum":"  314","line":"    transcript.add(\"X\", proof.X);","class":"linePartCov","hits":"1","order":"1570","possible_hits":"2",},
{"lineNum":"  315","line":"    transcript.add(\"X1\", proof.X1);","class":"linePartCov","hits":"1","order":"1571","possible_hits":"2",},
{"lineNum":"  316","line":"    Scalar x = transcript.challenge(\"x\");","class":"linePartCov","hits":"1","order":"1572","possible_hits":"2",},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"    // Compute f"},
{"lineNum":"  319","line":"    proof.f.reserve(m*(n - 1));","class":"lineCov","hits":"1","order":"1604","possible_hits":"1",},
{"lineNum":"  320","line":"    for (std::size_t j = 0; j < m; j++)","class":"lineCov","hits":"2","order":"1605","possible_hits":"2",},
{"lineNum":"  321","line":"    {"},
{"lineNum":"  322","line":"        for (std::size_t i = 1; i < n; i++) {","class":"lineCov","hits":"2","order":"1606","possible_hits":"2",},
{"lineNum":"  323","line":"            proof.f.emplace_back(sigma[(j * n) + i] * x + a[(j * n) + i]);","class":"linePartCov","hits":"1","order":"1607","possible_hits":"2",},
{"lineNum":"  324","line":"        }"},
{"lineNum":"  325","line":"    }","class":"lineCov","hits":"1","order":"1608","possible_hits":"1",},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    // Compute zA, zC"},
{"lineNum":"  328","line":"    proof.z = rB * x + rA;","class":"linePartCov","hits":"1","order":"1609","possible_hits":"2",},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"    // Compute zS, zV"},
{"lineNum":"  331","line":"    proof.zS = s * x.exponent(uint64_t(m));","class":"linePartCov","hits":"1","order":"1610","possible_hits":"2",},
{"lineNum":"  332","line":"    proof.zV = v * x.exponent(uint64_t(m));","class":"linePartCov","hits":"1","order":"1638","possible_hits":"2",},
{"lineNum":"  333","line":"    Scalar sumS, sumV;","class":"lineCov","hits":"1","order":"1639","possible_hits":"1",},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"    Scalar x_powers(uint64_t(1));","class":"lineCov","hits":"1","order":"1640","possible_hits":"1",},
{"lineNum":"  336","line":"    for (std::size_t j = 0; j < m; ++j) {","class":"lineCov","hits":"2","order":"1641","possible_hits":"2",},
{"lineNum":"  337","line":"        sumS += (rho_S[j] * x_powers);","class":"linePartCov","hits":"1","order":"1642","possible_hits":"2",},
{"lineNum":"  338","line":"        sumV += (rho_V[j] * x_powers);","class":"linePartCov","hits":"1","order":"1643","possible_hits":"2",},
{"lineNum":"  339","line":"        x_powers *= x;","class":"lineCov","hits":"1","order":"1644","possible_hits":"1",},
{"lineNum":"  340","line":"    }","class":"lineCov","hits":"1","order":"1645","possible_hits":"1",},
{"lineNum":"  341","line":"    proof.zS -= sumS;","class":"lineCov","hits":"1","order":"1646","possible_hits":"1",},
{"lineNum":"  342","line":"    proof.zV -= sumV;","class":"lineCov","hits":"1","order":"1647","possible_hits":"1",},
{"lineNum":"  343","line":"}","class":"linePartCov","hits":"1","order":"1648","possible_hits":"42",},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"// Verify a single proof"},
{"lineNum":"  346","line":"bool Grootle::verify("},
{"lineNum":"  347","line":"        const std::vector<GroupElement>& S,"},
{"lineNum":"  348","line":"        const GroupElement& S1,"},
{"lineNum":"  349","line":"        const std::vector<GroupElement>& V,"},
{"lineNum":"  350","line":"        const GroupElement& V1,"},
{"lineNum":"  351","line":"        const std::vector<unsigned char>& root,"},
{"lineNum":"  352","line":"        const std::size_t size,"},
{"lineNum":"  353","line":"        const GrootleProof& proof) {","class":"lineCov","hits":"2","order":"1653","possible_hits":"2",},
{"lineNum":"  354","line":"    std::vector<GroupElement> S1_batch = {S1};","class":"linePartCov","hits":"1","order":"1654","possible_hits":"5",},
{"lineNum":"  355","line":"    std::vector<GroupElement> V1_batch = {V1};","class":"linePartCov","hits":"1","order":"1655","possible_hits":"3",},
{"lineNum":"  356","line":"    std::vector<std::size_t> size_batch = {size};","class":"linePartCov","hits":"1","order":"1656","possible_hits":"2",},
{"lineNum":"  357","line":"    std::vector<std::vector<unsigned char>> root_batch = {root};","class":"linePartCov","hits":"1","order":"1657","possible_hits":"3",},
{"lineNum":"  358","line":"    std::vector<GrootleProof> proof_batch = {proof};","class":"linePartCov","hits":"1","order":"1658","possible_hits":"3",},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"    return verify(S, S1_batch, V, V1_batch, root_batch, size_batch, proof_batch);","class":"lineCov","hits":"1","order":"1659","possible_hits":"1",},
{"lineNum":"  361","line":"}","class":"linePartCov","hits":"1","order":"1815","possible_hits":"10",},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"// Verify a batch of proofs"},
{"lineNum":"  364","line":"bool Grootle::verify("},
{"lineNum":"  365","line":"        const std::vector<GroupElement>& S,"},
{"lineNum":"  366","line":"        const std::vector<GroupElement>& S1,"},
{"lineNum":"  367","line":"        const std::vector<GroupElement>& V,"},
{"lineNum":"  368","line":"        const std::vector<GroupElement>& V1,"},
{"lineNum":"  369","line":"        const std::vector<std::vector<unsigned char>>& roots,"},
{"lineNum":"  370","line":"        const std::vector<std::size_t>& sizes,"},
{"lineNum":"  371","line":"        const std::vector<GrootleProof>& proofs) {","class":"lineCov","hits":"2","order":"1660","possible_hits":"2",},
{"lineNum":"  372","line":"    // Sanity checks"},
{"lineNum":"  373","line":"    if (n < 2 || m < 2) {","class":"lineCov","hits":"1","order":"1661","possible_hits":"1",},
{"lineNum":"  374","line":"        LogPrintf(\"Verifier parameters are invalid\");","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  375","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  376","line":"    }"},
{"lineNum":"  377","line":"    std::size_t M = proofs.size();","class":"lineCov","hits":"1","order":"1662","possible_hits":"1",},
{"lineNum":"  378","line":"    std::size_t N = (std::size_t)pow(n, m);","class":"lineCov","hits":"1","order":"1663","possible_hits":"1",},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"    if (S.size() == 0) {","class":"lineCov","hits":"1","order":"1664","possible_hits":"1",},
{"lineNum":"  381","line":"        LogPrintf(\"Cannot have empty commitment set\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  382","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  383","line":"    }"},
{"lineNum":"  384","line":"    if (S.size() > N) {","class":"lineCov","hits":"1","order":"1665","possible_hits":"1",},
{"lineNum":"  385","line":"        LogPrintf(\"Commitment set is too large\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  386","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  387","line":"    }"},
{"lineNum":"  388","line":"    if (S.size() != V.size()) {","class":"lineCov","hits":"1","order":"1666","possible_hits":"1",},
{"lineNum":"  389","line":"        LogPrintf(\"Commitment set sizes do not match\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  390","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  391","line":"    }"},
{"lineNum":"  392","line":"    if (S1.size() != M || V1.size() != M) {","class":"lineCov","hits":"1","order":"1667","possible_hits":"1",},
{"lineNum":"  393","line":"        LogPrintf(\"Invalid number of offsets provided\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  394","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  395","line":"    }"},
{"lineNum":"  396","line":"    if (sizes.size() != M) {","class":"lineCov","hits":"1","order":"1668","possible_hits":"1",},
{"lineNum":"  397","line":"        LogPrintf(\"Invalid set size vector size\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  398","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  399","line":"    }"},
{"lineNum":"  400","line":"    if (roots.size() != M) {","class":"lineCov","hits":"1","order":"1669","possible_hits":"1",},
{"lineNum":"  401","line":"        LogPrintf(\"Invalid root vector size\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  402","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"    }"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"    // Check proof semantics"},
{"lineNum":"  406","line":"    for (std::size_t t = 0; t < M; t++) {","class":"lineCov","hits":"2","order":"1670","possible_hits":"2",},
{"lineNum":"  407","line":"        GrootleProof proof = proofs[t];","class":"lineCov","hits":"1","order":"1671","possible_hits":"1",},
{"lineNum":"  408","line":"        if (proof.X.size() != m || proof.X1.size() != m) {","class":"lineCov","hits":"1","order":"1672","possible_hits":"1",},
{"lineNum":"  409","line":"            LogPrintf(\"Bad proof vector size!\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  410","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":"        }"},
{"lineNum":"  412","line":"        if (proof.f.size() != m*(n-1)) {","class":"lineCov","hits":"1","order":"1673","possible_hits":"1",},
{"lineNum":"  413","line":"            LogPrintf(\"Bad proof vector size!\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  414","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  415","line":"        }"},
{"lineNum":"  416","line":"    }","class":"linePartCov","hits":"1","order":"1674","possible_hits":"2",},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"    // Commitment binding weight; intentionally restricted range for efficiency, but must be nonzero"},
{"lineNum":"  419","line":"    // NOTE: this may initialize with a PRNG, which should be sufficient for this use"},
{"lineNum":"  420","line":"    std::random_device generator;","class":"lineCov","hits":"1","order":"1675","possible_hits":"1",},
{"lineNum":"  421","line":"    std::uniform_int_distribution<uint16_t> distribution;","class":"lineCov","hits":"1","order":"1676","possible_hits":"1",},
{"lineNum":"  422","line":"    Scalar bind_weight(ZERO);","class":"lineCov","hits":"1","order":"1677","possible_hits":"1",},
{"lineNum":"  423","line":"    while (bind_weight == ZERO) {","class":"lineCov","hits":"2","order":"1678","possible_hits":"2",},
{"lineNum":"  424","line":"        bind_weight = Scalar(distribution(generator));","class":"linePartCov","hits":"1","order":"1679","possible_hits":"2",},
{"lineNum":"  425","line":"    }"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"    // Bind the commitment lists"},
{"lineNum":"  428","line":"    std::vector<GroupElement> commits;","class":"lineCov","hits":"1","order":"1680","possible_hits":"1",},
{"lineNum":"  429","line":"    commits.reserve(S.size());","class":"lineCov","hits":"1","order":"1681","possible_hits":"1",},
{"lineNum":"  430","line":"    for (std::size_t i = 0; i < S.size(); i++) {","class":"lineCov","hits":"2","order":"1682","possible_hits":"2",},
{"lineNum":"  431","line":"        commits.emplace_back(S[i] + V[i]*bind_weight);","class":"linePartCov","hits":"1","order":"1683","possible_hits":"2",},
{"lineNum":"  432","line":"    }"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"    // Final batch multiscalar multiplication"},
{"lineNum":"  435","line":"    Scalar H_scalar;","class":"lineCov","hits":"1","order":"1684","possible_hits":"1",},
{"lineNum":"  436","line":"    std::vector<Scalar> Gi_scalars;","class":"lineCov","hits":"1","order":"1685","possible_hits":"1",},
{"lineNum":"  437","line":"    std::vector<Scalar> Hi_scalars;","class":"lineCov","hits":"1","order":"1686","possible_hits":"1",},
{"lineNum":"  438","line":"    std::vector<Scalar> commit_scalars;","class":"lineCov","hits":"1","order":"1687","possible_hits":"1",},
{"lineNum":"  439","line":"    Gi_scalars.resize(n*m);","class":"lineCov","hits":"1","order":"1688","possible_hits":"1",},
{"lineNum":"  440","line":"    Hi_scalars.resize(n*m);","class":"lineCov","hits":"1","order":"1689","possible_hits":"1",},
{"lineNum":"  441","line":"    commit_scalars.resize(commits.size());","class":"lineCov","hits":"1","order":"1690","possible_hits":"1",},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"    // Set up the final batch elements"},
{"lineNum":"  444","line":"    std::vector<GroupElement> points;","class":"lineCov","hits":"1","order":"1691","possible_hits":"1",},
{"lineNum":"  445","line":"    std::vector<Scalar> scalars;","class":"lineCov","hits":"1","order":"1692","possible_hits":"1",},
{"lineNum":"  446","line":"    std::size_t final_size = 1 + 2*m*n + commits.size(); // F, (Gi), (Hi), (commits)","class":"lineCov","hits":"1","order":"1693","possible_hits":"1",},
{"lineNum":"  447","line":"    for (std::size_t t = 0; t < M; t++) {","class":"lineCov","hits":"2","order":"1694","possible_hits":"2",},
{"lineNum":"  448","line":"        final_size += 2 + proofs[t].X.size() + proofs[t].X1.size(); // A, B, (Gs), (Gv)","class":"lineCov","hits":"1","order":"1695","possible_hits":"1",},
{"lineNum":"  449","line":"    }"},
{"lineNum":"  450","line":"    points.reserve(final_size);","class":"lineCov","hits":"1","order":"1696","possible_hits":"1",},
{"lineNum":"  451","line":"    scalars.reserve(final_size);","class":"lineCov","hits":"1","order":"1697","possible_hits":"1",},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"    // Index decomposition, which is common among all proofs"},
{"lineNum":"  454","line":"    std::vector<std::vector<std::size_t> > I_;","class":"lineCov","hits":"1","order":"1698","possible_hits":"1",},
{"lineNum":"  455","line":"    I_.reserve(commits.size());","class":"lineCov","hits":"1","order":"1699","possible_hits":"1",},
{"lineNum":"  456","line":"    I_.resize(commits.size());","class":"lineCov","hits":"1","order":"1700","possible_hits":"1",},
{"lineNum":"  457","line":"    for (std::size_t i = 0; i < commits.size(); i++) {","class":"lineCov","hits":"2","order":"1701","possible_hits":"2",},
{"lineNum":"  458","line":"        I_[i] = decompose(i, n, m);","class":"lineCov","hits":"1","order":"1702","possible_hits":"1",},
{"lineNum":"  459","line":"    }"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"    // Process all proofs"},
{"lineNum":"  462","line":"    for (std::size_t t = 0; t < M; t++) {","class":"lineCov","hits":"2","order":"1703","possible_hits":"2",},
{"lineNum":"  463","line":"        GrootleProof proof = proofs[t];","class":"lineCov","hits":"1","order":"1704","possible_hits":"1",},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"        // Reconstruct the challenge"},
{"lineNum":"  466","line":"        Transcript transcript(LABEL_TRANSCRIPT_GROOTLE);","class":"linePartCov","hits":"1","order":"1705","possible_hits":"2",},
{"lineNum":"  467","line":"        transcript.add(\"H\", H);","class":"linePartCov","hits":"1","order":"1706","possible_hits":"2",},
{"lineNum":"  468","line":"        transcript.add(\"Gi\", Gi);","class":"linePartCov","hits":"1","order":"1707","possible_hits":"2",},
{"lineNum":"  469","line":"        transcript.add(\"Hi\", Hi);","class":"linePartCov","hits":"1","order":"1708","possible_hits":"2",},
{"lineNum":"  470","line":"        transcript.add(\"n\", Scalar(n));","class":"linePartCov","hits":"1","order":"1709","possible_hits":"2",},
{"lineNum":"  471","line":"        transcript.add(\"m\", Scalar(m));","class":"linePartCov","hits":"1","order":"1710","possible_hits":"2",},
{"lineNum":"  472","line":"        transcript.add(\"root\", roots[t]);","class":"linePartCov","hits":"1","order":"1711","possible_hits":"2",},
{"lineNum":"  473","line":"        transcript.add(\"S1\", S1[t]);","class":"linePartCov","hits":"1","order":"1712","possible_hits":"2",},
{"lineNum":"  474","line":"        transcript.add(\"V1\", V1[t]);","class":"linePartCov","hits":"1","order":"1713","possible_hits":"2",},
{"lineNum":"  475","line":"        transcript.add(\"A\", proof.A);","class":"linePartCov","hits":"1","order":"1714","possible_hits":"2",},
{"lineNum":"  476","line":"        transcript.add(\"B\", proof.B);","class":"linePartCov","hits":"1","order":"1715","possible_hits":"2",},
{"lineNum":"  477","line":"        transcript.add(\"X\", proof.X);","class":"linePartCov","hits":"1","order":"1716","possible_hits":"2",},
{"lineNum":"  478","line":"        transcript.add(\"X1\", proof.X1);","class":"linePartCov","hits":"1","order":"1717","possible_hits":"2",},
{"lineNum":"  479","line":"        Scalar x = transcript.challenge(\"x\");","class":"linePartCov","hits":"1","order":"1718","possible_hits":"2",},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"        // Generate nonzero random verifier weights (the randomization already asserts nonzero)"},
{"lineNum":"  482","line":"        Scalar w1, w2;","class":"lineCov","hits":"1","order":"1719","possible_hits":"1",},
{"lineNum":"  483","line":"        w1.randomize();","class":"lineCov","hits":"1","order":"1720","possible_hits":"1",},
{"lineNum":"  484","line":"        w2.randomize();","class":"lineCov","hits":"1","order":"1721","possible_hits":"1",},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"        // Reconstruct f-matrix"},
{"lineNum":"  487","line":"        std::vector<Scalar> f_;","class":"lineCov","hits":"1","order":"1722","possible_hits":"1",},
{"lineNum":"  488","line":"        if (!compute_fs(proof, x, f_, n, m)) {","class":"lineCov","hits":"1","order":"1723","possible_hits":"1",},
{"lineNum":"  489","line":"            LogPrintf(\"Invalid matrix reconstruction\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  490","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  491","line":"        }"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"        // Effective set size"},
{"lineNum":"  494","line":"        const std::size_t size = sizes[t];","class":"lineCov","hits":"1","order":"1741","possible_hits":"1",},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"        // A, B (and associated commitments)"},
{"lineNum":"  497","line":"        points.emplace_back(proof.A);","class":"lineCov","hits":"1","order":"1742","possible_hits":"1",},
{"lineNum":"  498","line":"        scalars.emplace_back(w1.negate());","class":"linePartCov","hits":"1","order":"1743","possible_hits":"2",},
{"lineNum":"  499","line":"        points.emplace_back(proof.B);","class":"lineCov","hits":"1","order":"1744","possible_hits":"1",},
{"lineNum":"  500","line":"        scalars.emplace_back(x.negate() * w1);","class":"linePartCov","hits":"1","order":"1745","possible_hits":"2",},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"        H_scalar += proof.z * w1;","class":"linePartCov","hits":"1","order":"1746","possible_hits":"2",},
{"lineNum":"  503","line":"        for (std::size_t i = 0; i < m * n; i++) {","class":"lineCov","hits":"2","order":"1747","possible_hits":"2",},
{"lineNum":"  504","line":"            Gi_scalars[i] += f_[i] * w1;","class":"linePartCov","hits":"1","order":"1748","possible_hits":"2",},
{"lineNum":"  505","line":"            Hi_scalars[i] += f_[i]*(x - f_[i]) * w1;","class":"linePartCov","hits":"1","order":"1749","possible_hits":"2",},
{"lineNum":"  506","line":"        }"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"        // Input sets"},
{"lineNum":"  509","line":"        H_scalar += (proof.zS + bind_weight * proof.zV) * w2.negate();","class":"linePartCov","hits":"1","order":"1750","possible_hits":"2",},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"        Scalar f_sum;","class":"lineCov","hits":"1","order":"1751","possible_hits":"1",},
{"lineNum":"  512","line":"        Scalar f_i(uint64_t(1));","class":"lineCov","hits":"1","order":"1752","possible_hits":"1",},
{"lineNum":"  513","line":"        std::vector<Scalar>::iterator ptr = commit_scalars.begin() + commits.size() - size;","class":"lineCov","hits":"1","order":"1753","possible_hits":"1",},
{"lineNum":"  514","line":"        compute_batch_fis(f_sum, f_i, m, f_, w2, ptr, ptr, ptr + size - 1, n);","class":"lineCov","hits":"1","order":"1754","possible_hits":"1",},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"        Scalar pow(uint64_t(1));","class":"lineCov","hits":"1","order":"1769","possible_hits":"1",},
{"lineNum":"  517","line":"        std::vector<Scalar> f_part_product;","class":"lineCov","hits":"1","order":"1770","possible_hits":"1",},
{"lineNum":"  518","line":"        for (std::ptrdiff_t j = m - 1; j >= 0; j--) {","class":"lineCov","hits":"2","order":"1771","possible_hits":"2",},
{"lineNum":"  519","line":"            f_part_product.push_back(pow);","class":"lineCov","hits":"1","order":"1772","possible_hits":"1",},
{"lineNum":"  520","line":"            pow *= f_[j*n + I_[size - 1][j]];","class":"lineCov","hits":"1","order":"1773","possible_hits":"1",},
{"lineNum":"  521","line":"        }","class":"lineCov","hits":"1","order":"1774","possible_hits":"1",},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"        Scalar x_powers(uint64_t(1));","class":"lineCov","hits":"1","order":"1775","possible_hits":"1",},
{"lineNum":"  524","line":"        for (std::size_t j = 0; j < m; j++) {","class":"lineCov","hits":"2","order":"1776","possible_hits":"2",},
{"lineNum":"  525","line":"            Scalar fi_sum(uint64_t(0));","class":"lineCov","hits":"1","order":"1777","possible_hits":"1",},
{"lineNum":"  526","line":"            for (std::size_t i = I_[size - 1][j] + 1; i < n; i++)","class":"linePartCov","hits":"1","order":"1778","possible_hits":"2",},
{"lineNum":"  527","line":"                fi_sum += f_[j*n + i];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  528","line":"            pow += fi_sum * x_powers * f_part_product[m - j - 1];","class":"linePartCov","hits":"1","order":"1779","possible_hits":"2",},
{"lineNum":"  529","line":"            x_powers *= x;","class":"lineCov","hits":"1","order":"1780","possible_hits":"1",},
{"lineNum":"  530","line":"        }","class":"linePartCov","hits":"1","order":"1781","possible_hits":"2",},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"        f_sum += pow;","class":"lineCov","hits":"1","order":"1782","possible_hits":"1",},
{"lineNum":"  533","line":"        commit_scalars[commits.size() - 1] += pow * w2;","class":"linePartCov","hits":"1","order":"1783","possible_hits":"2",},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"        // S1, V1"},
{"lineNum":"  536","line":"        points.emplace_back(S1[t] + V1[t] * bind_weight);","class":"linePartCov","hits":"1","order":"1784","possible_hits":"2",},
{"lineNum":"  537","line":"        scalars.emplace_back(f_sum * w2.negate());","class":"linePartCov","hits":"1","order":"1785","possible_hits":"2",},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"        // (X), (X1)"},
{"lineNum":"  540","line":"        x_powers = Scalar(uint64_t(1));","class":"linePartCov","hits":"1","order":"1786","possible_hits":"2",},
{"lineNum":"  541","line":"        for (std::size_t j = 0; j < m; j++) {","class":"lineCov","hits":"2","order":"1787","possible_hits":"2",},
{"lineNum":"  542","line":"            points.emplace_back(proof.X[j] + proof.X1[j] * bind_weight);","class":"linePartCov","hits":"1","order":"1788","possible_hits":"2",},
{"lineNum":"  543","line":"            scalars.emplace_back(x_powers.negate() * w2);","class":"linePartCov","hits":"1","order":"1789","possible_hits":"2",},
{"lineNum":"  544","line":"            x_powers *= x;","class":"lineCov","hits":"1","order":"1790","possible_hits":"1",},
{"lineNum":"  545","line":"        }","class":"lineCov","hits":"1","order":"1791","possible_hits":"1",},
{"lineNum":"  546","line":"    }","class":"linePartCov","hits":"1","order":"1792","possible_hits":"2",},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"    // Add common generators"},
{"lineNum":"  549","line":"    points.emplace_back(H);","class":"lineCov","hits":"1","order":"1793","possible_hits":"1",},
{"lineNum":"  550","line":"    scalars.emplace_back(H_scalar);","class":"lineCov","hits":"1","order":"1794","possible_hits":"1",},
{"lineNum":"  551","line":"    for (std::size_t i = 0; i < m * n; i++) {","class":"lineCov","hits":"2","order":"1795","possible_hits":"2",},
{"lineNum":"  552","line":"        points.emplace_back(Gi[i]);","class":"lineCov","hits":"1","order":"1796","possible_hits":"1",},
{"lineNum":"  553","line":"        scalars.emplace_back(Gi_scalars[i]);","class":"lineCov","hits":"1","order":"1797","possible_hits":"1",},
{"lineNum":"  554","line":"        points.emplace_back(Hi[i]);","class":"lineCov","hits":"1","order":"1798","possible_hits":"1",},
{"lineNum":"  555","line":"        scalars.emplace_back(Hi_scalars[i]);","class":"lineCov","hits":"1","order":"1799","possible_hits":"1",},
{"lineNum":"  556","line":"    }","class":"lineCov","hits":"1","order":"1800","possible_hits":"1",},
{"lineNum":"  557","line":"    for (std::size_t i = 0; i < commits.size(); i++) {","class":"lineCov","hits":"2","order":"1801","possible_hits":"2",},
{"lineNum":"  558","line":"        points.emplace_back(commits[i]);","class":"lineCov","hits":"1","order":"1802","possible_hits":"1",},
{"lineNum":"  559","line":"        scalars.emplace_back(commit_scalars[i]);","class":"lineCov","hits":"1","order":"1803","possible_hits":"1",},
{"lineNum":"  560","line":"    }","class":"lineCov","hits":"1","order":"1804","possible_hits":"1",},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"    // Verify the batch"},
{"lineNum":"  563","line":"    secp_primitives::MultiExponent result(points, scalars);","class":"lineCov","hits":"1","order":"1805","possible_hits":"1",},
{"lineNum":"  564","line":"    if (result.get_multiple().isInfinity()) {","class":"linePartCov","hits":"1","order":"1806","possible_hits":"2",},
{"lineNum":"  565","line":"        return true;","class":"lineCov","hits":"1","order":"1813","possible_hits":"1",},
{"lineNum":"  566","line":"    }"},
{"lineNum":"  567","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  568","line":"}","class":"linePartCov","hits":"1","order":"1814","possible_hits":"45",},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "grootle_fuzz_debug", "date" : "2023-08-17 10:24:07", "instrumented" : 356, "covered" : 321,};
var merged_data = [];
