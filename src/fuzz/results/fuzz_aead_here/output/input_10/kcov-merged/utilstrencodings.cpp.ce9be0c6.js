var data = {lines:[
{"lineNum":"    1","line":"// Copyright (c) 2009-2010 Satoshi Nakamoto"},
{"lineNum":"    2","line":"// Copyright (c) 2009-2016 The Bitcoin Core developers"},
{"lineNum":"    3","line":"// Distributed under the MIT software license, see the accompanying"},
{"lineNum":"    4","line":"// file COPYING or http://www.opensource.org/licenses/mit-license.php."},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#include \"utilstrencodings.h\""},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"#include \"tinyformat.h\""},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#include <cstdlib>"},
{"lineNum":"   11","line":"#include <cstring>"},
{"lineNum":"   12","line":"#include <errno.h>"},
{"lineNum":"   13","line":"#include <limits>"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";","class":"lineCov","hits":"1","order":"107",},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"static const std::string SAFE_CHARS[] =","class":"lineNoCov","hits":"0",},
{"lineNum":"   18","line":"{","class":"lineCov","hits":"1","order":"108",},
{"lineNum":"   19","line":"    CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT","class":"lineCov","hits":"1","order":"109",},
{"lineNum":"   20","line":"    CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT","class":"lineCov","hits":"1","order":"110",},
{"lineNum":"   21","line":"    CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME","class":"lineCov","hits":"1","order":"111",},
{"lineNum":"   22","line":"};"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"std::string SanitizeString(const std::string& str, int rule)"},
{"lineNum":"   25","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"   26","line":"    std::string strResult;","class":"lineNoCov","hits":"0",},
{"lineNum":"   27","line":"    for (std::string::size_type i = 0; i < str.size(); i++)","class":"lineNoCov","hits":"0",},
{"lineNum":"   28","line":"    {"},
{"lineNum":"   29","line":"        if (SAFE_CHARS[rule].find(str[i]) != std::string::npos)","class":"lineNoCov","hits":"0",},
{"lineNum":"   30","line":"            strResult.push_back(str[i]);","class":"lineNoCov","hits":"0",},
{"lineNum":"   31","line":"    }","class":"lineNoCov","hits":"0",},
{"lineNum":"   32","line":"    return strResult;","class":"lineNoCov","hits":"0",},
{"lineNum":"   33","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"const signed char p_util_hexdigit[256] ="},
{"lineNum":"   36","line":"{ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   37","line":"  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   38","line":"  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   39","line":"  0,1,2,3,4,5,6,7,8,9,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   40","line":"  -1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   41","line":"  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   42","line":"  -1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   43","line":"  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   44","line":"  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   45","line":"  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   46","line":"  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   47","line":"  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   48","line":"  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   49","line":"  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   50","line":"  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,"},
{"lineNum":"   51","line":"  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, };"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"signed char HexDigit(char c)"},
{"lineNum":"   54","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"   55","line":"    return p_util_hexdigit[(unsigned char)c];","class":"lineNoCov","hits":"0",},
{"lineNum":"   56","line":"}"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"bool IsHex(const std::string& str)"},
{"lineNum":"   59","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"   60","line":"    for(std::string::const_iterator it(str.begin()); it != str.end(); ++it)","class":"lineNoCov","hits":"0",},
{"lineNum":"   61","line":"    {"},
{"lineNum":"   62","line":"        if (HexDigit(*it) < 0)","class":"lineNoCov","hits":"0",},
{"lineNum":"   63","line":"            return false;","class":"lineNoCov","hits":"0",},
{"lineNum":"   64","line":"    }","class":"lineNoCov","hits":"0",},
{"lineNum":"   65","line":"    return (str.size() > 0) && (str.size()%2 == 0);","class":"lineNoCov","hits":"0",},
{"lineNum":"   66","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"std::vector<unsigned char> ParseHex(const char* psz)"},
{"lineNum":"   69","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"   70","line":"    // convert hex dump to vector"},
{"lineNum":"   71","line":"    std::vector<unsigned char> vch;","class":"lineNoCov","hits":"0",},
{"lineNum":"   72","line":"    while (true)","class":"lineNoCov","hits":"0",},
{"lineNum":"   73","line":"    {"},
{"lineNum":"   74","line":"        while (isspace(*psz))","class":"lineNoCov","hits":"0",},
{"lineNum":"   75","line":"            psz++;","class":"lineNoCov","hits":"0",},
{"lineNum":"   76","line":"        signed char c = HexDigit(*psz++);","class":"lineNoCov","hits":"0",},
{"lineNum":"   77","line":"        if (c == (signed char)-1)","class":"lineNoCov","hits":"0",},
{"lineNum":"   78","line":"            break;","class":"lineNoCov","hits":"0",},
{"lineNum":"   79","line":"        unsigned char n = (c << 4);","class":"lineNoCov","hits":"0",},
{"lineNum":"   80","line":"        c = HexDigit(*psz++);","class":"lineNoCov","hits":"0",},
{"lineNum":"   81","line":"        if (c == (signed char)-1)","class":"lineNoCov","hits":"0",},
{"lineNum":"   82","line":"            break;","class":"lineNoCov","hits":"0",},
{"lineNum":"   83","line":"        n |= c;","class":"lineNoCov","hits":"0",},
{"lineNum":"   84","line":"        vch.push_back(n);","class":"lineNoCov","hits":"0",},
{"lineNum":"   85","line":"    }"},
{"lineNum":"   86","line":"    return vch;","class":"lineNoCov","hits":"0",},
{"lineNum":"   87","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"std::vector<unsigned char> ParseHex(const std::string& str)"},
{"lineNum":"   90","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"   91","line":"    return ParseHex(str.c_str());","class":"lineNoCov","hits":"0",},
{"lineNum":"   92","line":"}"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"std::string EncodeBase64(const unsigned char* pch, size_t len)"},
{"lineNum":"   95","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"   96","line":"    static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    std::string strRet=\"\";","class":"lineNoCov","hits":"0",},
{"lineNum":"   99","line":"    strRet.reserve((len+2)/3*4);","class":"lineNoCov","hits":"0",},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    int mode=0, left=0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  102","line":"    const unsigned char *pchEnd = pch+len;","class":"lineNoCov","hits":"0",},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    while (pch<pchEnd)","class":"lineNoCov","hits":"0",},
{"lineNum":"  105","line":"    {"},
{"lineNum":"  106","line":"        int enc = *(pch++);","class":"lineNoCov","hits":"0",},
{"lineNum":"  107","line":"        switch (mode)","class":"lineNoCov","hits":"0",},
{"lineNum":"  108","line":"        {"},
{"lineNum":"  109","line":"            case 0: // we have no bits"},
{"lineNum":"  110","line":"                strRet += pbase64[enc >> 2];","class":"lineNoCov","hits":"0",},
{"lineNum":"  111","line":"                left = (enc & 3) << 4;","class":"lineNoCov","hits":"0",},
{"lineNum":"  112","line":"                mode = 1;","class":"lineNoCov","hits":"0",},
{"lineNum":"  113","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"            case 1: // we have two bits"},
{"lineNum":"  116","line":"                strRet += pbase64[left | (enc >> 4)];","class":"lineNoCov","hits":"0",},
{"lineNum":"  117","line":"                left = (enc & 15) << 2;","class":"lineNoCov","hits":"0",},
{"lineNum":"  118","line":"                mode = 2;","class":"lineNoCov","hits":"0",},
{"lineNum":"  119","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"            case 2: // we have four bits"},
{"lineNum":"  122","line":"                strRet += pbase64[left | (enc >> 6)];","class":"lineNoCov","hits":"0",},
{"lineNum":"  123","line":"                strRet += pbase64[enc & 63];","class":"lineNoCov","hits":"0",},
{"lineNum":"  124","line":"                mode = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  125","line":"                break;"},
{"lineNum":"  126","line":"        }"},
{"lineNum":"  127","line":"    }"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    if (mode)","class":"lineNoCov","hits":"0",},
{"lineNum":"  130","line":"    {"},
{"lineNum":"  131","line":"        strRet += pbase64[left];","class":"lineNoCov","hits":"0",},
{"lineNum":"  132","line":"        strRet += \'=\';","class":"lineNoCov","hits":"0",},
{"lineNum":"  133","line":"        if (mode == 1)","class":"lineNoCov","hits":"0",},
{"lineNum":"  134","line":"            strRet += \'=\';","class":"lineNoCov","hits":"0",},
{"lineNum":"  135","line":"    }","class":"lineNoCov","hits":"0",},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    return strRet;","class":"lineNoCov","hits":"0",},
{"lineNum":"  138","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"std::string EncodeBase64(const std::string& str)"},
{"lineNum":"  141","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  142","line":"    return EncodeBase64((const unsigned char*)str.c_str(), str.size());","class":"lineNoCov","hits":"0",},
{"lineNum":"  143","line":"}"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)"},
{"lineNum":"  146","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  147","line":"    static const int decode64_table[256] ="},
{"lineNum":"  148","line":"    {"},
{"lineNum":"  149","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  150","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  151","line":"        -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1,"},
{"lineNum":"  152","line":"        -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,"},
{"lineNum":"  153","line":"        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,"},
{"lineNum":"  154","line":"        29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,"},
{"lineNum":"  155","line":"        49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  156","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  157","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  158","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  159","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  160","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  161","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1"},
{"lineNum":"  162","line":"    };"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"    if (pfInvalid)","class":"lineNoCov","hits":"0",},
{"lineNum":"  165","line":"        *pfInvalid = false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"    std::vector<unsigned char> vchRet;","class":"lineNoCov","hits":"0",},
{"lineNum":"  168","line":"    vchRet.reserve(strlen(p)*3/4);","class":"lineNoCov","hits":"0",},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    int mode = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  171","line":"    int left = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    while (1)","class":"lineNoCov","hits":"0",},
{"lineNum":"  174","line":"    {"},
{"lineNum":"  175","line":"         int dec = decode64_table[(unsigned char)*p];","class":"lineNoCov","hits":"0",},
{"lineNum":"  176","line":"         if (dec == -1) break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  177","line":"         p++;","class":"lineNoCov","hits":"0",},
{"lineNum":"  178","line":"         switch (mode)","class":"lineNoCov","hits":"0",},
{"lineNum":"  179","line":"         {"},
{"lineNum":"  180","line":"             case 0: // we have no bits and get 6"},
{"lineNum":"  181","line":"                 left = dec;","class":"lineNoCov","hits":"0",},
{"lineNum":"  182","line":"                 mode = 1;","class":"lineNoCov","hits":"0",},
{"lineNum":"  183","line":"                 break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"              case 1: // we have 6 bits and keep 4"},
{"lineNum":"  186","line":"                  vchRet.push_back((left<<2) | (dec>>4));","class":"lineNoCov","hits":"0",},
{"lineNum":"  187","line":"                  left = dec & 15;","class":"lineNoCov","hits":"0",},
{"lineNum":"  188","line":"                  mode = 2;","class":"lineNoCov","hits":"0",},
{"lineNum":"  189","line":"                  break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"             case 2: // we have 4 bits and get 6, we keep 2"},
{"lineNum":"  192","line":"                 vchRet.push_back((left<<4) | (dec>>2));","class":"lineNoCov","hits":"0",},
{"lineNum":"  193","line":"                 left = dec & 3;","class":"lineNoCov","hits":"0",},
{"lineNum":"  194","line":"                 mode = 3;","class":"lineNoCov","hits":"0",},
{"lineNum":"  195","line":"                 break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"             case 3: // we have 2 bits and get 6"},
{"lineNum":"  198","line":"                 vchRet.push_back((left<<6) | dec);","class":"lineNoCov","hits":"0",},
{"lineNum":"  199","line":"                 mode = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  200","line":"                 break;"},
{"lineNum":"  201","line":"         }"},
{"lineNum":"  202","line":"    }"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"    if (pfInvalid)","class":"lineNoCov","hits":"0",},
{"lineNum":"  205","line":"        switch (mode)","class":"lineNoCov","hits":"0",},
{"lineNum":"  206","line":"        {"},
{"lineNum":"  207","line":"            case 0: // 4n base64 characters processed: ok"},
{"lineNum":"  208","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"            case 1: // 4n+1 base64 character processed: impossible"},
{"lineNum":"  211","line":"                *pfInvalid = true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  212","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"            case 2: // 4n+2 base64 characters processed: require \'==\'"},
{"lineNum":"  215","line":"                if (left || p[0] != \'=\' || p[1] != \'=\' || decode64_table[(unsigned char)p[2]] != -1)","class":"lineNoCov","hits":"0",},
{"lineNum":"  216","line":"                    *pfInvalid = true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  217","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"            case 3: // 4n+3 base64 characters processed: require \'=\'"},
{"lineNum":"  220","line":"                if (left || p[0] != \'=\' || decode64_table[(unsigned char)p[1]] != -1)","class":"lineNoCov","hits":"0",},
{"lineNum":"  221","line":"                    *pfInvalid = true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  222","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  223","line":"        }","class":"lineNoCov","hits":"0",},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"    return vchRet;","class":"lineNoCov","hits":"0",},
{"lineNum":"  226","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"std::string DecodeBase64(const std::string& str)"},
{"lineNum":"  229","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  230","line":"    std::vector<unsigned char> vchRet = DecodeBase64(str.c_str());","class":"lineNoCov","hits":"0",},
{"lineNum":"  231","line":"    return (vchRet.size() == 0) ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());","class":"lineNoCov","hits":"0",},
{"lineNum":"  232","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"std::string EncodeBase32(const unsigned char* pch, size_t len)"},
{"lineNum":"  235","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  236","line":"    static const char *pbase32 = \"abcdefghijklmnopqrstuvwxyz234567\";"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    std::string strRet=\"\";","class":"lineNoCov","hits":"0",},
{"lineNum":"  239","line":"    strRet.reserve((len+4)/5*8);","class":"lineNoCov","hits":"0",},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"    int mode=0, left=0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  242","line":"    const unsigned char *pchEnd = pch+len;","class":"lineNoCov","hits":"0",},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"    while (pch<pchEnd)","class":"lineNoCov","hits":"0",},
{"lineNum":"  245","line":"    {"},
{"lineNum":"  246","line":"        int enc = *(pch++);","class":"lineNoCov","hits":"0",},
{"lineNum":"  247","line":"        switch (mode)","class":"lineNoCov","hits":"0",},
{"lineNum":"  248","line":"        {"},
{"lineNum":"  249","line":"            case 0: // we have no bits"},
{"lineNum":"  250","line":"                strRet += pbase32[enc >> 3];","class":"lineNoCov","hits":"0",},
{"lineNum":"  251","line":"                left = (enc & 7) << 2;","class":"lineNoCov","hits":"0",},
{"lineNum":"  252","line":"                mode = 1;","class":"lineNoCov","hits":"0",},
{"lineNum":"  253","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"            case 1: // we have three bits"},
{"lineNum":"  256","line":"                strRet += pbase32[left | (enc >> 6)];","class":"lineNoCov","hits":"0",},
{"lineNum":"  257","line":"                strRet += pbase32[(enc >> 1) & 31];","class":"lineNoCov","hits":"0",},
{"lineNum":"  258","line":"                left = (enc & 1) << 4;","class":"lineNoCov","hits":"0",},
{"lineNum":"  259","line":"                mode = 2;","class":"lineNoCov","hits":"0",},
{"lineNum":"  260","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"            case 2: // we have one bit"},
{"lineNum":"  263","line":"                strRet += pbase32[left | (enc >> 4)];","class":"lineNoCov","hits":"0",},
{"lineNum":"  264","line":"                left = (enc & 15) << 1;","class":"lineNoCov","hits":"0",},
{"lineNum":"  265","line":"                mode = 3;","class":"lineNoCov","hits":"0",},
{"lineNum":"  266","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"            case 3: // we have four bits"},
{"lineNum":"  269","line":"                strRet += pbase32[left | (enc >> 7)];","class":"lineNoCov","hits":"0",},
{"lineNum":"  270","line":"                strRet += pbase32[(enc >> 2) & 31];","class":"lineNoCov","hits":"0",},
{"lineNum":"  271","line":"                left = (enc & 3) << 3;","class":"lineNoCov","hits":"0",},
{"lineNum":"  272","line":"                mode = 4;","class":"lineNoCov","hits":"0",},
{"lineNum":"  273","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"            case 4: // we have two bits"},
{"lineNum":"  276","line":"                strRet += pbase32[left | (enc >> 5)];","class":"lineNoCov","hits":"0",},
{"lineNum":"  277","line":"                strRet += pbase32[enc & 31];","class":"lineNoCov","hits":"0",},
{"lineNum":"  278","line":"                mode = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  279","line":"        }"},
{"lineNum":"  280","line":"    }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    static const int nPadding[5] = {0, 6, 4, 3, 1};"},
{"lineNum":"  283","line":"    if (mode)","class":"lineNoCov","hits":"0",},
{"lineNum":"  284","line":"    {"},
{"lineNum":"  285","line":"        strRet += pbase32[left];","class":"lineNoCov","hits":"0",},
{"lineNum":"  286","line":"        for (int n=0; n<nPadding[mode]; n++)","class":"lineNoCov","hits":"0",},
{"lineNum":"  287","line":"             strRet += \'=\';","class":"lineNoCov","hits":"0",},
{"lineNum":"  288","line":"    }","class":"lineNoCov","hits":"0",},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"    return strRet;","class":"lineNoCov","hits":"0",},
{"lineNum":"  291","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"std::string EncodeBase32(const std::string& str)"},
{"lineNum":"  294","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  295","line":"    return EncodeBase32((const unsigned char*)str.c_str(), str.size());","class":"lineNoCov","hits":"0",},
{"lineNum":"  296","line":"}"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)"},
{"lineNum":"  299","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  300","line":"    static const int decode32_table[256] ="},
{"lineNum":"  301","line":"    {"},
{"lineNum":"  302","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  303","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  304","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1,"},
{"lineNum":"  305","line":"        -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,"},
{"lineNum":"  306","line":"        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1,  0,  1,  2,"},
{"lineNum":"  307","line":"         3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,"},
{"lineNum":"  308","line":"        23, 24, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  309","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  310","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  311","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  312","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  313","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"},
{"lineNum":"  314","line":"        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1"},
{"lineNum":"  315","line":"    };"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"    if (pfInvalid)","class":"lineNoCov","hits":"0",},
{"lineNum":"  318","line":"        *pfInvalid = false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"    std::vector<unsigned char> vchRet;","class":"lineNoCov","hits":"0",},
{"lineNum":"  321","line":"    vchRet.reserve((strlen(p))*5/8);","class":"lineNoCov","hits":"0",},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    int mode = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  324","line":"    int left = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"    while (1)","class":"lineNoCov","hits":"0",},
{"lineNum":"  327","line":"    {"},
{"lineNum":"  328","line":"         int dec = decode32_table[(unsigned char)*p];","class":"lineNoCov","hits":"0",},
{"lineNum":"  329","line":"         if (dec == -1) break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  330","line":"         p++;","class":"lineNoCov","hits":"0",},
{"lineNum":"  331","line":"         switch (mode)","class":"lineNoCov","hits":"0",},
{"lineNum":"  332","line":"         {"},
{"lineNum":"  333","line":"             case 0: // we have no bits and get 5"},
{"lineNum":"  334","line":"                 left = dec;","class":"lineNoCov","hits":"0",},
{"lineNum":"  335","line":"                 mode = 1;","class":"lineNoCov","hits":"0",},
{"lineNum":"  336","line":"                 break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"              case 1: // we have 5 bits and keep 2"},
{"lineNum":"  339","line":"                  vchRet.push_back((left<<3) | (dec>>2));","class":"lineNoCov","hits":"0",},
{"lineNum":"  340","line":"                  left = dec & 3;","class":"lineNoCov","hits":"0",},
{"lineNum":"  341","line":"                  mode = 2;","class":"lineNoCov","hits":"0",},
{"lineNum":"  342","line":"                  break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"             case 2: // we have 2 bits and keep 7"},
{"lineNum":"  345","line":"                 left = left << 5 | dec;","class":"lineNoCov","hits":"0",},
{"lineNum":"  346","line":"                 mode = 3;","class":"lineNoCov","hits":"0",},
{"lineNum":"  347","line":"                 break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"             case 3: // we have 7 bits and keep 4"},
{"lineNum":"  350","line":"                 vchRet.push_back((left<<1) | (dec>>4));","class":"lineNoCov","hits":"0",},
{"lineNum":"  351","line":"                 left = dec & 15;","class":"lineNoCov","hits":"0",},
{"lineNum":"  352","line":"                 mode = 4;","class":"lineNoCov","hits":"0",},
{"lineNum":"  353","line":"                 break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"             case 4: // we have 4 bits, and keep 1"},
{"lineNum":"  356","line":"                 vchRet.push_back((left<<4) | (dec>>1));","class":"lineNoCov","hits":"0",},
{"lineNum":"  357","line":"                 left = dec & 1;","class":"lineNoCov","hits":"0",},
{"lineNum":"  358","line":"                 mode = 5;","class":"lineNoCov","hits":"0",},
{"lineNum":"  359","line":"                 break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"             case 5: // we have 1 bit, and keep 6"},
{"lineNum":"  362","line":"                 left = left << 5 | dec;","class":"lineNoCov","hits":"0",},
{"lineNum":"  363","line":"                 mode = 6;","class":"lineNoCov","hits":"0",},
{"lineNum":"  364","line":"                 break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"             case 6: // we have 6 bits, and keep 3"},
{"lineNum":"  367","line":"                 vchRet.push_back((left<<2) | (dec>>3));","class":"lineNoCov","hits":"0",},
{"lineNum":"  368","line":"                 left = dec & 7;","class":"lineNoCov","hits":"0",},
{"lineNum":"  369","line":"                 mode = 7;","class":"lineNoCov","hits":"0",},
{"lineNum":"  370","line":"                 break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"             case 7: // we have 3 bits, and keep 0"},
{"lineNum":"  373","line":"                 vchRet.push_back((left<<5) | dec);","class":"lineNoCov","hits":"0",},
{"lineNum":"  374","line":"                 mode = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  375","line":"                 break;"},
{"lineNum":"  376","line":"         }"},
{"lineNum":"  377","line":"    }"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    if (pfInvalid)","class":"lineNoCov","hits":"0",},
{"lineNum":"  380","line":"        switch (mode)","class":"lineNoCov","hits":"0",},
{"lineNum":"  381","line":"        {"},
{"lineNum":"  382","line":"            case 0: // 8n base32 characters processed: ok"},
{"lineNum":"  383","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"            case 1: // 8n+1 base32 characters processed: impossible"},
{"lineNum":"  386","line":"            case 3: //   +3"},
{"lineNum":"  387","line":"            case 6: //   +6"},
{"lineNum":"  388","line":"                *pfInvalid = true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  389","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"            case 2: // 8n+2 base32 characters processed: require \'======\'"},
{"lineNum":"  392","line":"                if (left || p[0] != \'=\' || p[1] != \'=\' || p[2] != \'=\' || p[3] != \'=\' || p[4] != \'=\' || p[5] != \'=\' || decode32_table[(unsigned char)p[6]] != -1)","class":"lineNoCov","hits":"0",},
{"lineNum":"  393","line":"                    *pfInvalid = true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  394","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"            case 4: // 8n+4 base32 characters processed: require \'====\'"},
{"lineNum":"  397","line":"                if (left || p[0] != \'=\' || p[1] != \'=\' || p[2] != \'=\' || p[3] != \'=\' || decode32_table[(unsigned char)p[4]] != -1)","class":"lineNoCov","hits":"0",},
{"lineNum":"  398","line":"                    *pfInvalid = true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  399","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"            case 5: // 8n+5 base32 characters processed: require \'===\'"},
{"lineNum":"  402","line":"                if (left || p[0] != \'=\' || p[1] != \'=\' || p[2] != \'=\' || decode32_table[(unsigned char)p[3]] != -1)","class":"lineNoCov","hits":"0",},
{"lineNum":"  403","line":"                    *pfInvalid = true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  404","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"            case 7: // 8n+7 base32 characters processed: require \'=\'"},
{"lineNum":"  407","line":"                if (left || p[0] != \'=\' || decode32_table[(unsigned char)p[1]] != -1)","class":"lineNoCov","hits":"0",},
{"lineNum":"  408","line":"                    *pfInvalid = true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  409","line":"                break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  410","line":"        }","class":"lineNoCov","hits":"0",},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"    return vchRet;","class":"lineNoCov","hits":"0",},
{"lineNum":"  413","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"std::string DecodeBase32(const std::string& str)"},
{"lineNum":"  416","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  417","line":"    std::vector<unsigned char> vchRet = DecodeBase32(str.c_str());","class":"lineNoCov","hits":"0",},
{"lineNum":"  418","line":"    return (vchRet.size() == 0) ? std::string() : std::string((const char*)&vchRet[0], vchRet.size());","class":"lineNoCov","hits":"0",},
{"lineNum":"  419","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"static bool ParsePrechecks(const std::string& str)"},
{"lineNum":"  422","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  423","line":"    if (str.empty()) // No empty string allowed","class":"lineNoCov","hits":"0",},
{"lineNum":"  424","line":"        return false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  425","line":"    if (str.size() >= 1 && (isspace(str[0]) || isspace(str[str.size()-1]))) // No padding allowed","class":"lineNoCov","hits":"0",},
{"lineNum":"  426","line":"        return false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  427","line":"    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed","class":"lineNoCov","hits":"0",},
{"lineNum":"  428","line":"        return false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  429","line":"    return true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  430","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"bool ParseInt32(const std::string& str, int32_t *out)"},
{"lineNum":"  433","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  434","line":"    if (!ParsePrechecks(str))","class":"lineNoCov","hits":"0",},
{"lineNum":"  435","line":"        return false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  436","line":"    char *endp = NULL;","class":"lineNoCov","hits":"0",},
{"lineNum":"  437","line":"    errno = 0; // strtol will not set errno if valid","class":"lineNoCov","hits":"0",},
{"lineNum":"  438","line":"    long int n = strtol(str.c_str(), &endp, 10);","class":"lineNoCov","hits":"0",},
{"lineNum":"  439","line":"    if(out) *out = (int32_t)n;","class":"lineNoCov","hits":"0",},
{"lineNum":"  440","line":"    // Note that strtol returns a *long int*, so even if strtol doesn\'t report a over/underflow"},
{"lineNum":"  441","line":"    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit"},
{"lineNum":"  442","line":"    // platforms the size of these types may be different."},
{"lineNum":"  443","line":"    return endp && *endp == 0 && !errno &&","class":"lineNoCov","hits":"0",},
{"lineNum":"  444","line":"        n >= std::numeric_limits<int32_t>::min() &&","class":"lineNoCov","hits":"0",},
{"lineNum":"  445","line":"        n <= std::numeric_limits<int32_t>::max();","class":"lineNoCov","hits":"0",},
{"lineNum":"  446","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"bool ParseInt64(const std::string& str, int64_t *out)"},
{"lineNum":"  449","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  450","line":"    if (!ParsePrechecks(str))","class":"lineNoCov","hits":"0",},
{"lineNum":"  451","line":"        return false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  452","line":"    char *endp = NULL;","class":"lineNoCov","hits":"0",},
{"lineNum":"  453","line":"    errno = 0; // strtoll will not set errno if valid","class":"lineNoCov","hits":"0",},
{"lineNum":"  454","line":"    long long int n = strtoll(str.c_str(), &endp, 10);","class":"lineNoCov","hits":"0",},
{"lineNum":"  455","line":"    if(out) *out = (int64_t)n;","class":"lineNoCov","hits":"0",},
{"lineNum":"  456","line":"    // Note that strtoll returns a *long long int*, so even if strtol doesn\'t report a over/underflow"},
{"lineNum":"  457","line":"    // we still have to check that the returned value is within the range of an *int64_t*."},
{"lineNum":"  458","line":"    return endp && *endp == 0 && !errno &&","class":"lineNoCov","hits":"0",},
{"lineNum":"  459","line":"        n >= std::numeric_limits<int64_t>::min() &&","class":"lineNoCov","hits":"0",},
{"lineNum":"  460","line":"        n <= std::numeric_limits<int64_t>::max();","class":"lineNoCov","hits":"0",},
{"lineNum":"  461","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"bool ParseUInt32(const std::string& str, uint32_t *out)"},
{"lineNum":"  464","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  465","line":"    if (!ParsePrechecks(str))","class":"lineNoCov","hits":"0",},
{"lineNum":"  466","line":"        return false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  467","line":"    if (str.size() >= 1 && str[0] == \'-\') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range","class":"lineNoCov","hits":"0",},
{"lineNum":"  468","line":"        return false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  469","line":"    char *endp = NULL;","class":"lineNoCov","hits":"0",},
{"lineNum":"  470","line":"    errno = 0; // strtoul will not set errno if valid","class":"lineNoCov","hits":"0",},
{"lineNum":"  471","line":"    unsigned long int n = strtoul(str.c_str(), &endp, 10);","class":"lineNoCov","hits":"0",},
{"lineNum":"  472","line":"    if(out) *out = (uint32_t)n;","class":"lineNoCov","hits":"0",},
{"lineNum":"  473","line":"    // Note that strtoul returns a *unsigned long int*, so even if it doesn\'t report a over/underflow"},
{"lineNum":"  474","line":"    // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit"},
{"lineNum":"  475","line":"    // platforms the size of these types may be different."},
{"lineNum":"  476","line":"    return endp && *endp == 0 && !errno &&","class":"lineNoCov","hits":"0",},
{"lineNum":"  477","line":"        n <= std::numeric_limits<uint32_t>::max();","class":"lineNoCov","hits":"0",},
{"lineNum":"  478","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"bool ParseUInt64(const std::string& str, uint64_t *out)"},
{"lineNum":"  481","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  482","line":"    if (!ParsePrechecks(str))","class":"lineNoCov","hits":"0",},
{"lineNum":"  483","line":"        return false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  484","line":"    if (str.size() >= 1 && str[0] == \'-\') // Reject negative values, unfortunately strtoull accepts these by default if they fit in the range","class":"lineNoCov","hits":"0",},
{"lineNum":"  485","line":"        return false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  486","line":"    char *endp = NULL;","class":"lineNoCov","hits":"0",},
{"lineNum":"  487","line":"    errno = 0; // strtoull will not set errno if valid","class":"lineNoCov","hits":"0",},
{"lineNum":"  488","line":"    unsigned long long int n = strtoull(str.c_str(), &endp, 10);","class":"lineNoCov","hits":"0",},
{"lineNum":"  489","line":"    if(out) *out = (uint64_t)n;","class":"lineNoCov","hits":"0",},
{"lineNum":"  490","line":"    // Note that strtoull returns a *unsigned long long int*, so even if it doesn\'t report a over/underflow"},
{"lineNum":"  491","line":"    // we still have to check that the returned value is within the range of an *uint64_t*."},
{"lineNum":"  492","line":"    return endp && *endp == 0 && !errno &&","class":"lineNoCov","hits":"0",},
{"lineNum":"  493","line":"        n <= std::numeric_limits<uint64_t>::max();","class":"lineNoCov","hits":"0",},
{"lineNum":"  494","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"bool ParseDouble(const std::string& str, double *out)"},
{"lineNum":"  498","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  499","line":"    if (!ParsePrechecks(str))","class":"lineNoCov","hits":"0",},
{"lineNum":"  500","line":"        return false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  501","line":"    if (str.size() >= 2 && str[0] == \'0\' && str[1] == \'x\') // No hexadecimal floats allowed","class":"lineNoCov","hits":"0",},
{"lineNum":"  502","line":"        return false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  503","line":"    std::istringstream text(str);","class":"lineNoCov","hits":"0",},
{"lineNum":"  504","line":"    text.imbue(std::locale::classic());","class":"lineNoCov","hits":"0",},
{"lineNum":"  505","line":"    double result;"},
{"lineNum":"  506","line":"    text >> result;","class":"lineNoCov","hits":"0",},
{"lineNum":"  507","line":"    if(out) *out = result;","class":"lineNoCov","hits":"0",},
{"lineNum":"  508","line":"    return text.eof() && !text.fail();","class":"lineNoCov","hits":"0",},
{"lineNum":"  509","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"std::string FormatParagraph(const std::string& in, size_t width, size_t indent)"},
{"lineNum":"  512","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  513","line":"    std::stringstream out;","class":"lineNoCov","hits":"0",},
{"lineNum":"  514","line":"    size_t ptr = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  515","line":"    size_t indented = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  516","line":"    while (ptr < in.size())","class":"lineNoCov","hits":"0",},
{"lineNum":"  517","line":"    {"},
{"lineNum":"  518","line":"        size_t lineend = in.find_first_of(\'\\n\', ptr);","class":"lineNoCov","hits":"0",},
{"lineNum":"  519","line":"        if (lineend == std::string::npos) {","class":"lineNoCov","hits":"0",},
{"lineNum":"  520","line":"            lineend = in.size();","class":"lineNoCov","hits":"0",},
{"lineNum":"  521","line":"        }"},
{"lineNum":"  522","line":"        const size_t linelen = lineend - ptr;","class":"lineNoCov","hits":"0",},
{"lineNum":"  523","line":"        const size_t rem_width = width - indented;","class":"lineNoCov","hits":"0",},
{"lineNum":"  524","line":"        if (linelen <= rem_width) {","class":"lineNoCov","hits":"0",},
{"lineNum":"  525","line":"            out << in.substr(ptr, linelen + 1);","class":"lineNoCov","hits":"0",},
{"lineNum":"  526","line":"            ptr = lineend + 1;","class":"lineNoCov","hits":"0",},
{"lineNum":"  527","line":"            indented = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  528","line":"        } else {","class":"lineNoCov","hits":"0",},
{"lineNum":"  529","line":"            size_t finalspace = in.find_last_of(\" \\n\", ptr + rem_width);","class":"lineNoCov","hits":"0",},
{"lineNum":"  530","line":"            if (finalspace == std::string::npos || finalspace < ptr) {","class":"lineNoCov","hits":"0",},
{"lineNum":"  531","line":"                // No place to break; just include the entire word and move on"},
{"lineNum":"  532","line":"                finalspace = in.find_first_of(\"\\n \", ptr);","class":"lineNoCov","hits":"0",},
{"lineNum":"  533","line":"                if (finalspace == std::string::npos) {","class":"lineNoCov","hits":"0",},
{"lineNum":"  534","line":"                    // End of the string, just add it and break"},
{"lineNum":"  535","line":"                    out << in.substr(ptr);","class":"lineNoCov","hits":"0",},
{"lineNum":"  536","line":"                    break;","class":"lineNoCov","hits":"0",},
{"lineNum":"  537","line":"                }"},
{"lineNum":"  538","line":"            }","class":"lineNoCov","hits":"0",},
{"lineNum":"  539","line":"            out << in.substr(ptr, finalspace - ptr) << \"\\n\";","class":"lineNoCov","hits":"0",},
{"lineNum":"  540","line":"            if (in[finalspace] == \'\\n\') {","class":"lineNoCov","hits":"0",},
{"lineNum":"  541","line":"                indented = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  542","line":"            } else if (indent) {","class":"lineNoCov","hits":"0",},
{"lineNum":"  543","line":"                out << std::string(indent, \' \');","class":"lineNoCov","hits":"0",},
{"lineNum":"  544","line":"                indented = indent;","class":"lineNoCov","hits":"0",},
{"lineNum":"  545","line":"            }","class":"lineNoCov","hits":"0",},
{"lineNum":"  546","line":"            ptr = finalspace + 1;","class":"lineNoCov","hits":"0",},
{"lineNum":"  547","line":"        }"},
{"lineNum":"  548","line":"    }"},
{"lineNum":"  549","line":"    return out.str();","class":"lineNoCov","hits":"0",},
{"lineNum":"  550","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"std::string i64tostr(int64_t n)"},
{"lineNum":"  553","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  554","line":"    return strprintf(\"%d\", n);","class":"lineNoCov","hits":"0",},
{"lineNum":"  555","line":"}"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"std::string itostr(int n)"},
{"lineNum":"  558","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  559","line":"    return strprintf(\"%d\", n);","class":"lineNoCov","hits":"0",},
{"lineNum":"  560","line":"}"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"int64_t atoi64(const char* psz)"},
{"lineNum":"  563","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  564","line":"#ifdef _MSC_VER"},
{"lineNum":"  565","line":"    return _atoi64(psz);"},
{"lineNum":"  566","line":"#else"},
{"lineNum":"  567","line":"    return strtoll(psz, NULL, 10);","class":"lineNoCov","hits":"0",},
{"lineNum":"  568","line":"#endif"},
{"lineNum":"  569","line":"}"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"int64_t atoi64(const std::string& str)"},
{"lineNum":"  572","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  573","line":"#ifdef _MSC_VER"},
{"lineNum":"  574","line":"    return _atoi64(str.c_str());"},
{"lineNum":"  575","line":"#else"},
{"lineNum":"  576","line":"    return strtoll(str.c_str(), NULL, 10);","class":"lineNoCov","hits":"0",},
{"lineNum":"  577","line":"#endif"},
{"lineNum":"  578","line":"}"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"int atoi(const std::string& str)"},
{"lineNum":"  581","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  582","line":"    return atoi(str.c_str());","class":"lineNoCov","hits":"0",},
{"lineNum":"  583","line":"}"},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":"/** Upper bound for mantissa."},
{"lineNum":"  586","line":" * 10^18-1 is the largest arbitrary decimal that will fit in a signed 64-bit integer."},
{"lineNum":"  587","line":" * Larger integers cannot consist of arbitrary combinations of 0-9:"},
{"lineNum":"  588","line":" *"},
{"lineNum":"  589","line":" *   999999999999999999  1^18-1"},
{"lineNum":"  590","line":" *  9223372036854775807  (1<<63)-1  (max int64_t)"},
{"lineNum":"  591","line":" *  9999999999999999999  1^19-1     (would overflow)"},
{"lineNum":"  592","line":" */"},
{"lineNum":"  593","line":"static const int64_t UPPER_BOUND = 1000000000000000000LL - 1LL;"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"/** Helper function for ParseFixedPoint */"},
{"lineNum":"  596","line":"static inline bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantissa_tzeros)"},
{"lineNum":"  597","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  598","line":"    if(ch == \'0\')","class":"lineNoCov","hits":"0",},
{"lineNum":"  599","line":"        ++mantissa_tzeros;","class":"lineNoCov","hits":"0",},
{"lineNum":"  600","line":"    else {"},
{"lineNum":"  601","line":"        for (int i=0; i<=mantissa_tzeros; ++i) {","class":"lineNoCov","hits":"0",},
{"lineNum":"  602","line":"            if (mantissa > (UPPER_BOUND / 10LL))","class":"lineNoCov","hits":"0",},
{"lineNum":"  603","line":"                return false; /* overflow */","class":"lineNoCov","hits":"0",},
{"lineNum":"  604","line":"            mantissa *= 10;","class":"lineNoCov","hits":"0",},
{"lineNum":"  605","line":"        }"},
{"lineNum":"  606","line":"        mantissa += ch - \'0\';","class":"lineNoCov","hits":"0",},
{"lineNum":"  607","line":"        mantissa_tzeros = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  608","line":"    }"},
{"lineNum":"  609","line":"    return true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  610","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)"},
{"lineNum":"  613","line":"{","class":"lineNoCov","hits":"0",},
{"lineNum":"  614","line":"    int64_t mantissa = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  615","line":"    int64_t exponent = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  616","line":"    int mantissa_tzeros = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  617","line":"    bool mantissa_sign = false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  618","line":"    bool exponent_sign = false;","class":"lineNoCov","hits":"0",},
{"lineNum":"  619","line":"    int ptr = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  620","line":"    int end = val.size();","class":"lineNoCov","hits":"0",},
{"lineNum":"  621","line":"    int point_ofs = 0;","class":"lineNoCov","hits":"0",},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"    if (ptr < end && val[ptr] == \'-\') {","class":"lineNoCov","hits":"0",},
{"lineNum":"  624","line":"        mantissa_sign = true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  625","line":"        ++ptr;","class":"lineNoCov","hits":"0",},
{"lineNum":"  626","line":"    }"},
{"lineNum":"  627","line":"    if (ptr < end)","class":"lineNoCov","hits":"0",},
{"lineNum":"  628","line":"    {"},
{"lineNum":"  629","line":"        if (val[ptr] == \'0\') {","class":"lineNoCov","hits":"0",},
{"lineNum":"  630","line":"            /* pass single 0 */"},
{"lineNum":"  631","line":"            ++ptr;","class":"lineNoCov","hits":"0",},
{"lineNum":"  632","line":"        } else if (val[ptr] >= \'1\' && val[ptr] <= \'9\') {","class":"lineNoCov","hits":"0",},
{"lineNum":"  633","line":"            while (ptr < end && val[ptr] >= \'0\' && val[ptr] <= \'9\') {","class":"lineNoCov","hits":"0",},
{"lineNum":"  634","line":"                if (!ProcessMantissaDigit(val[ptr], mantissa, mantissa_tzeros))","class":"lineNoCov","hits":"0",},
{"lineNum":"  635","line":"                    return false; /* overflow */","class":"lineNoCov","hits":"0",},
{"lineNum":"  636","line":"                ++ptr;","class":"lineNoCov","hits":"0",},
{"lineNum":"  637","line":"            }"},
{"lineNum":"  638","line":"        } else return false; /* missing expected digit */","class":"lineNoCov","hits":"0",},
{"lineNum":"  639","line":"    } else return false; /* empty string or loose \'-\' */","class":"lineNoCov","hits":"0",},
{"lineNum":"  640","line":"    if (ptr < end && val[ptr] == \'.\')","class":"lineNoCov","hits":"0",},
{"lineNum":"  641","line":"    {"},
{"lineNum":"  642","line":"        ++ptr;","class":"lineNoCov","hits":"0",},
{"lineNum":"  643","line":"        if (ptr < end && val[ptr] >= \'0\' && val[ptr] <= \'9\')","class":"lineNoCov","hits":"0",},
{"lineNum":"  644","line":"        {"},
{"lineNum":"  645","line":"            while (ptr < end && val[ptr] >= \'0\' && val[ptr] <= \'9\') {","class":"lineNoCov","hits":"0",},
{"lineNum":"  646","line":"                if (!ProcessMantissaDigit(val[ptr], mantissa, mantissa_tzeros))","class":"lineNoCov","hits":"0",},
{"lineNum":"  647","line":"                    return false; /* overflow */","class":"lineNoCov","hits":"0",},
{"lineNum":"  648","line":"                ++ptr;","class":"lineNoCov","hits":"0",},
{"lineNum":"  649","line":"                ++point_ofs;","class":"lineNoCov","hits":"0",},
{"lineNum":"  650","line":"            }"},
{"lineNum":"  651","line":"        } else return false; /* missing expected digit */","class":"lineNoCov","hits":"0",},
{"lineNum":"  652","line":"    }","class":"lineNoCov","hits":"0",},
{"lineNum":"  653","line":"    if (ptr < end && (val[ptr] == \'e\' || val[ptr] == \'E\'))","class":"lineNoCov","hits":"0",},
{"lineNum":"  654","line":"    {"},
{"lineNum":"  655","line":"        ++ptr;","class":"lineNoCov","hits":"0",},
{"lineNum":"  656","line":"        if (ptr < end && val[ptr] == \'+\')","class":"lineNoCov","hits":"0",},
{"lineNum":"  657","line":"            ++ptr;","class":"lineNoCov","hits":"0",},
{"lineNum":"  658","line":"        else if (ptr < end && val[ptr] == \'-\') {","class":"lineNoCov","hits":"0",},
{"lineNum":"  659","line":"            exponent_sign = true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  660","line":"            ++ptr;","class":"lineNoCov","hits":"0",},
{"lineNum":"  661","line":"        }"},
{"lineNum":"  662","line":"        if (ptr < end && val[ptr] >= \'0\' && val[ptr] <= \'9\') {","class":"lineNoCov","hits":"0",},
{"lineNum":"  663","line":"            while (ptr < end && val[ptr] >= \'0\' && val[ptr] <= \'9\') {","class":"lineNoCov","hits":"0",},
{"lineNum":"  664","line":"                if (exponent > (UPPER_BOUND / 10LL))","class":"lineNoCov","hits":"0",},
{"lineNum":"  665","line":"                    return false; /* overflow */","class":"lineNoCov","hits":"0",},
{"lineNum":"  666","line":"                exponent = exponent * 10 + val[ptr] - \'0\';","class":"lineNoCov","hits":"0",},
{"lineNum":"  667","line":"                ++ptr;","class":"lineNoCov","hits":"0",},
{"lineNum":"  668","line":"            }"},
{"lineNum":"  669","line":"        } else return false; /* missing expected digit */","class":"lineNoCov","hits":"0",},
{"lineNum":"  670","line":"    }","class":"lineNoCov","hits":"0",},
{"lineNum":"  671","line":"    if (ptr != end)","class":"lineNoCov","hits":"0",},
{"lineNum":"  672","line":"        return false; /* trailing garbage */","class":"lineNoCov","hits":"0",},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"    /* finalize exponent */"},
{"lineNum":"  675","line":"    if (exponent_sign)","class":"lineNoCov","hits":"0",},
{"lineNum":"  676","line":"        exponent = -exponent;","class":"lineNoCov","hits":"0",},
{"lineNum":"  677","line":"    exponent = exponent - point_ofs + mantissa_tzeros;","class":"lineNoCov","hits":"0",},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"    /* finalize mantissa */"},
{"lineNum":"  680","line":"    if (mantissa_sign)","class":"lineNoCov","hits":"0",},
{"lineNum":"  681","line":"        mantissa = -mantissa;","class":"lineNoCov","hits":"0",},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"    /* convert to one 64-bit fixed-point value */"},
{"lineNum":"  684","line":"    exponent += decimals;","class":"lineNoCov","hits":"0",},
{"lineNum":"  685","line":"    if (exponent < 0)","class":"lineNoCov","hits":"0",},
{"lineNum":"  686","line":"        return false; /* cannot represent values smaller than 10^-decimals */","class":"lineNoCov","hits":"0",},
{"lineNum":"  687","line":"    if (exponent >= 18)","class":"lineNoCov","hits":"0",},
{"lineNum":"  688","line":"        return false; /* cannot represent values larger than or equal to 10^(18-decimals) */","class":"lineNoCov","hits":"0",},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"    for (int i=0; i < exponent; ++i) {","class":"lineNoCov","hits":"0",},
{"lineNum":"  691","line":"        if (mantissa > (UPPER_BOUND / 10LL) || mantissa < -(UPPER_BOUND / 10LL))","class":"lineNoCov","hits":"0",},
{"lineNum":"  692","line":"            return false; /* overflow */","class":"lineNoCov","hits":"0",},
{"lineNum":"  693","line":"        mantissa *= 10;","class":"lineNoCov","hits":"0",},
{"lineNum":"  694","line":"    }"},
{"lineNum":"  695","line":"    if (mantissa > UPPER_BOUND || mantissa < -UPPER_BOUND)","class":"lineNoCov","hits":"0",},
{"lineNum":"  696","line":"        return false; /* overflow */","class":"lineNoCov","hits":"0",},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"    if (amount_out)","class":"lineNoCov","hits":"0",},
{"lineNum":"  699","line":"        *amount_out = mantissa;","class":"lineNoCov","hits":"0",},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"    return true;","class":"lineNoCov","hits":"0",},
{"lineNum":"  702","line":"}","class":"lineNoCov","hits":"0",},
{"lineNum":"  703","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "aead_fuzz_debug", "date" : "2023-08-09 11:47:39", "instrumented" : 402, "covered" : 5,};
var merged_data = [];
