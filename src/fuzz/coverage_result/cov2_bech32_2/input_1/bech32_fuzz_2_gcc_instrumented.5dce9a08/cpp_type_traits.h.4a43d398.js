var data = {lines:[
{"lineNum":"    1","line":"// The  -*- C++ -*- type traits classes for internal use in libstdc++"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2000-2019 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/** @file bits/cpp_type_traits.h"},
{"lineNum":"   26","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   27","line":" *  Do not attempt to use it directly. @headername{ext/type_traits}"},
{"lineNum":"   28","line":" */"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"// Written by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"#ifndef _CPP_TYPE_TRAITS_H"},
{"lineNum":"   33","line":"#define _CPP_TYPE_TRAITS_H 1"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"#pragma GCC system_header"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"#include <bits/c++config.h>"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"//"},
{"lineNum":"   40","line":"// This file provides some compile-time information about various types."},
{"lineNum":"   41","line":"// These representations were designed, on purpose, to be constant-expressions"},
{"lineNum":"   42","line":"// and not types as found in <bits/type_traits.h>.  In particular, they"},
{"lineNum":"   43","line":"// can be used in control structures and the optimizer hopefully will do"},
{"lineNum":"   44","line":"// the obvious thing."},
{"lineNum":"   45","line":"//"},
{"lineNum":"   46","line":"// Why integral expressions, and not functions nor types?"},
{"lineNum":"   47","line":"// Firstly, these compile-time entities are used as template-arguments"},
{"lineNum":"   48","line":"// so function return values won\'t work:  We need compile-time entities."},
{"lineNum":"   49","line":"// We\'re left with types and constant  integral expressions."},
{"lineNum":"   50","line":"// Secondly, from the point of view of ease of use, type-based compile-time"},
{"lineNum":"   51","line":"// information is -not- *that* convenient.  One has to write lots of"},
{"lineNum":"   52","line":"// overloaded functions and to hope that the compiler will select the right"},
{"lineNum":"   53","line":"// one. As a net effect, the overall structure isn\'t very clear at first"},
{"lineNum":"   54","line":"// glance."},
{"lineNum":"   55","line":"// Thirdly, partial ordering and overload resolution (of function templates)"},
{"lineNum":"   56","line":"// is highly costly in terms of compiler-resource.  It is a Good Thing to"},
{"lineNum":"   57","line":"// keep these resource consumption as least as possible."},
{"lineNum":"   58","line":"//"},
{"lineNum":"   59","line":"// See valarray_array.h for a case use."},
{"lineNum":"   60","line":"//"},
{"lineNum":"   61","line":"// -- Gaby (dosreis@cmla.ens-cachan.fr) 2000-03-06."},
{"lineNum":"   62","line":"//"},
{"lineNum":"   63","line":"// Update 2005: types are also provided and <bits/type_traits.h> has been"},
{"lineNum":"   64","line":"// removed."},
{"lineNum":"   65","line":"//"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"extern \"C++\" {"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   70","line":"{"},
{"lineNum":"   71","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"  struct __true_type { };"},
{"lineNum":"   74","line":"  struct __false_type { };"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"  template<bool>"},
{"lineNum":"   77","line":"    struct __truth_type"},
{"lineNum":"   78","line":"    { typedef __false_type __type; };"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"  template<>"},
{"lineNum":"   81","line":"    struct __truth_type<true>"},
{"lineNum":"   82","line":"    { typedef __true_type __type; };"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"  // N.B. The conversions to bool are needed due to the issue"},
{"lineNum":"   85","line":"  // explained in c++/19404."},
{"lineNum":"   86","line":"  template<class _Sp, class _Tp>"},
{"lineNum":"   87","line":"    struct __traitor"},
{"lineNum":"   88","line":"    {"},
{"lineNum":"   89","line":"      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };"},
{"lineNum":"   90","line":"      typedef typename __truth_type<__value>::__type __type;"},
{"lineNum":"   91","line":"    };"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"  // Compare for equality of types."},
{"lineNum":"   94","line":"  template<typename, typename>"},
{"lineNum":"   95","line":"    struct __are_same"},
{"lineNum":"   96","line":"    {"},
{"lineNum":"   97","line":"      enum { __value = 0 };"},
{"lineNum":"   98","line":"      typedef __false_type __type;"},
{"lineNum":"   99","line":"    };"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"  template<typename _Tp>"},
{"lineNum":"  102","line":"    struct __are_same<_Tp, _Tp>"},
{"lineNum":"  103","line":"    {"},
{"lineNum":"  104","line":"      enum { __value = 1 };"},
{"lineNum":"  105","line":"      typedef __true_type __type;"},
{"lineNum":"  106","line":"    };"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"  // Holds if the template-argument is a void type."},
{"lineNum":"  109","line":"  template<typename _Tp>"},
{"lineNum":"  110","line":"    struct __is_void"},
{"lineNum":"  111","line":"    {"},
{"lineNum":"  112","line":"      enum { __value = 0 };"},
{"lineNum":"  113","line":"      typedef __false_type __type;"},
{"lineNum":"  114","line":"    };"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"  template<>"},
{"lineNum":"  117","line":"    struct __is_void<void>"},
{"lineNum":"  118","line":"    {"},
{"lineNum":"  119","line":"      enum { __value = 1 };"},
{"lineNum":"  120","line":"      typedef __true_type __type;"},
{"lineNum":"  121","line":"    };"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"  //"},
{"lineNum":"  124","line":"  // Integer types"},
{"lineNum":"  125","line":"  //"},
{"lineNum":"  126","line":"  template<typename _Tp>"},
{"lineNum":"  127","line":"    struct __is_integer"},
{"lineNum":"  128","line":"    {"},
{"lineNum":"  129","line":"      enum { __value = 0 };"},
{"lineNum":"  130","line":"      typedef __false_type __type;"},
{"lineNum":"  131","line":"    };"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"  // Thirteen specializations (yes there are eleven standard integer"},
{"lineNum":"  134","line":"  // types; <em>long long</em> and <em>unsigned long long</em> are"},
{"lineNum":"  135","line":"  // supported as extensions).  Up to four target-specific __int<N>"},
{"lineNum":"  136","line":"  // types are supported as well."},
{"lineNum":"  137","line":"  template<>"},
{"lineNum":"  138","line":"    struct __is_integer<bool>"},
{"lineNum":"  139","line":"    {"},
{"lineNum":"  140","line":"      enum { __value = 1 };"},
{"lineNum":"  141","line":"      typedef __true_type __type;"},
{"lineNum":"  142","line":"    };"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"  template<>"},
{"lineNum":"  145","line":"    struct __is_integer<char>"},
{"lineNum":"  146","line":"    {"},
{"lineNum":"  147","line":"      enum { __value = 1 };"},
{"lineNum":"  148","line":"      typedef __true_type __type;"},
{"lineNum":"  149","line":"    };"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"  template<>"},
{"lineNum":"  152","line":"    struct __is_integer<signed char>"},
{"lineNum":"  153","line":"    {"},
{"lineNum":"  154","line":"      enum { __value = 1 };"},
{"lineNum":"  155","line":"      typedef __true_type __type;"},
{"lineNum":"  156","line":"    };"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"  template<>"},
{"lineNum":"  159","line":"    struct __is_integer<unsigned char>"},
{"lineNum":"  160","line":"    {"},
{"lineNum":"  161","line":"      enum { __value = 1 };"},
{"lineNum":"  162","line":"      typedef __true_type __type;"},
{"lineNum":"  163","line":"    };"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"# ifdef _GLIBCXX_USE_WCHAR_T"},
{"lineNum":"  166","line":"  template<>"},
{"lineNum":"  167","line":"    struct __is_integer<wchar_t>"},
{"lineNum":"  168","line":"    {"},
{"lineNum":"  169","line":"      enum { __value = 1 };"},
{"lineNum":"  170","line":"      typedef __true_type __type;"},
{"lineNum":"  171","line":"    };"},
{"lineNum":"  172","line":"# endif"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"#ifdef _GLIBCXX_USE_CHAR8_T"},
{"lineNum":"  175","line":"  template<>"},
{"lineNum":"  176","line":"    struct __is_integer<char8_t>"},
{"lineNum":"  177","line":"    {"},
{"lineNum":"  178","line":"      enum { __value = 1 };"},
{"lineNum":"  179","line":"      typedef __true_type __type;"},
{"lineNum":"  180","line":"    };"},
{"lineNum":"  181","line":"#endif"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  184","line":"  template<>"},
{"lineNum":"  185","line":"    struct __is_integer<char16_t>"},
{"lineNum":"  186","line":"    {"},
{"lineNum":"  187","line":"      enum { __value = 1 };"},
{"lineNum":"  188","line":"      typedef __true_type __type;"},
{"lineNum":"  189","line":"    };"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"  template<>"},
{"lineNum":"  192","line":"    struct __is_integer<char32_t>"},
{"lineNum":"  193","line":"    {"},
{"lineNum":"  194","line":"      enum { __value = 1 };"},
{"lineNum":"  195","line":"      typedef __true_type __type;"},
{"lineNum":"  196","line":"    };"},
{"lineNum":"  197","line":"#endif"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"  template<>"},
{"lineNum":"  200","line":"    struct __is_integer<short>"},
{"lineNum":"  201","line":"    {"},
{"lineNum":"  202","line":"      enum { __value = 1 };"},
{"lineNum":"  203","line":"      typedef __true_type __type;"},
{"lineNum":"  204","line":"    };"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"  template<>"},
{"lineNum":"  207","line":"    struct __is_integer<unsigned short>"},
{"lineNum":"  208","line":"    {"},
{"lineNum":"  209","line":"      enum { __value = 1 };"},
{"lineNum":"  210","line":"      typedef __true_type __type;"},
{"lineNum":"  211","line":"    };"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"  template<>"},
{"lineNum":"  214","line":"    struct __is_integer<int>"},
{"lineNum":"  215","line":"    {"},
{"lineNum":"  216","line":"      enum { __value = 1 };"},
{"lineNum":"  217","line":"      typedef __true_type __type;"},
{"lineNum":"  218","line":"    };"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"  template<>"},
{"lineNum":"  221","line":"    struct __is_integer<unsigned int>"},
{"lineNum":"  222","line":"    {"},
{"lineNum":"  223","line":"      enum { __value = 1 };"},
{"lineNum":"  224","line":"      typedef __true_type __type;"},
{"lineNum":"  225","line":"    };"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"  template<>"},
{"lineNum":"  228","line":"    struct __is_integer<long>"},
{"lineNum":"  229","line":"    {"},
{"lineNum":"  230","line":"      enum { __value = 1 };"},
{"lineNum":"  231","line":"      typedef __true_type __type;"},
{"lineNum":"  232","line":"    };"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"  template<>"},
{"lineNum":"  235","line":"    struct __is_integer<unsigned long>"},
{"lineNum":"  236","line":"    {"},
{"lineNum":"  237","line":"      enum { __value = 1 };"},
{"lineNum":"  238","line":"      typedef __true_type __type;"},
{"lineNum":"  239","line":"    };"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"  template<>"},
{"lineNum":"  242","line":"    struct __is_integer<long long>"},
{"lineNum":"  243","line":"    {"},
{"lineNum":"  244","line":"      enum { __value = 1 };"},
{"lineNum":"  245","line":"      typedef __true_type __type;"},
{"lineNum":"  246","line":"    };"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"  template<>"},
{"lineNum":"  249","line":"    struct __is_integer<unsigned long long>"},
{"lineNum":"  250","line":"    {"},
{"lineNum":"  251","line":"      enum { __value = 1 };"},
{"lineNum":"  252","line":"      typedef __true_type __type;"},
{"lineNum":"  253","line":"    };"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"#define __INT_N(TYPE) \t\t\t\\"},
{"lineNum":"  256","line":"  template<>\t\t\t\t\\"},
{"lineNum":"  257","line":"    struct __is_integer<TYPE>\t\t\\"},
{"lineNum":"  258","line":"    {\t\t\t\t\t\\"},
{"lineNum":"  259","line":"      enum { __value = 1 };\t\t\\"},
{"lineNum":"  260","line":"      typedef __true_type __type;\t\\"},
{"lineNum":"  261","line":"    };\t\t\t\t\t\\"},
{"lineNum":"  262","line":"  template<>\t\t\t\t\\"},
{"lineNum":"  263","line":"    struct __is_integer<unsigned TYPE>\t\\"},
{"lineNum":"  264","line":"    {\t\t\t\t\t\\"},
{"lineNum":"  265","line":"      enum { __value = 1 };\t\t\\"},
{"lineNum":"  266","line":"      typedef __true_type __type;\t\\"},
{"lineNum":"  267","line":"    };"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"#ifdef __GLIBCXX_TYPE_INT_N_0"},
{"lineNum":"  270","line":"__INT_N(__GLIBCXX_TYPE_INT_N_0)"},
{"lineNum":"  271","line":"#endif"},
{"lineNum":"  272","line":"#ifdef __GLIBCXX_TYPE_INT_N_1"},
{"lineNum":"  273","line":"__INT_N(__GLIBCXX_TYPE_INT_N_1)"},
{"lineNum":"  274","line":"#endif"},
{"lineNum":"  275","line":"#ifdef __GLIBCXX_TYPE_INT_N_2"},
{"lineNum":"  276","line":"__INT_N(__GLIBCXX_TYPE_INT_N_2)"},
{"lineNum":"  277","line":"#endif"},
{"lineNum":"  278","line":"#ifdef __GLIBCXX_TYPE_INT_N_3"},
{"lineNum":"  279","line":"__INT_N(__GLIBCXX_TYPE_INT_N_3)"},
{"lineNum":"  280","line":"#endif"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"#undef __INT_N"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"  //"},
{"lineNum":"  285","line":"  // Floating point types"},
{"lineNum":"  286","line":"  //"},
{"lineNum":"  287","line":"  template<typename _Tp>"},
{"lineNum":"  288","line":"    struct __is_floating"},
{"lineNum":"  289","line":"    {"},
{"lineNum":"  290","line":"      enum { __value = 0 };"},
{"lineNum":"  291","line":"      typedef __false_type __type;"},
{"lineNum":"  292","line":"    };"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"  // three specializations (float, double and \'long double\')"},
{"lineNum":"  295","line":"  template<>"},
{"lineNum":"  296","line":"    struct __is_floating<float>"},
{"lineNum":"  297","line":"    {"},
{"lineNum":"  298","line":"      enum { __value = 1 };"},
{"lineNum":"  299","line":"      typedef __true_type __type;"},
{"lineNum":"  300","line":"    };"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"  template<>"},
{"lineNum":"  303","line":"    struct __is_floating<double>"},
{"lineNum":"  304","line":"    {"},
{"lineNum":"  305","line":"      enum { __value = 1 };"},
{"lineNum":"  306","line":"      typedef __true_type __type;"},
{"lineNum":"  307","line":"    };"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"  template<>"},
{"lineNum":"  310","line":"    struct __is_floating<long double>"},
{"lineNum":"  311","line":"    {"},
{"lineNum":"  312","line":"      enum { __value = 1 };"},
{"lineNum":"  313","line":"      typedef __true_type __type;"},
{"lineNum":"  314","line":"    };"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"  //"},
{"lineNum":"  317","line":"  // Pointer types"},
{"lineNum":"  318","line":"  //"},
{"lineNum":"  319","line":"  template<typename _Tp>"},
{"lineNum":"  320","line":"    struct __is_pointer"},
{"lineNum":"  321","line":"    {"},
{"lineNum":"  322","line":"      enum { __value = 0 };"},
{"lineNum":"  323","line":"      typedef __false_type __type;"},
{"lineNum":"  324","line":"    };"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"  template<typename _Tp>"},
{"lineNum":"  327","line":"    struct __is_pointer<_Tp*>"},
{"lineNum":"  328","line":"    {"},
{"lineNum":"  329","line":"      enum { __value = 1 };"},
{"lineNum":"  330","line":"      typedef __true_type __type;"},
{"lineNum":"  331","line":"    };"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"  //"},
{"lineNum":"  334","line":"  // An arithmetic type is an integer type or a floating point type"},
{"lineNum":"  335","line":"  //"},
{"lineNum":"  336","line":"  template<typename _Tp>"},
{"lineNum":"  337","line":"    struct __is_arithmetic"},
{"lineNum":"  338","line":"    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >"},
{"lineNum":"  339","line":"    { };"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"  //"},
{"lineNum":"  342","line":"  // A scalar type is an arithmetic type or a pointer type"},
{"lineNum":"  343","line":"  //"},
{"lineNum":"  344","line":"  template<typename _Tp>"},
{"lineNum":"  345","line":"    struct __is_scalar"},
{"lineNum":"  346","line":"    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >"},
{"lineNum":"  347","line":"    { };"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"  //"},
{"lineNum":"  350","line":"  // For use in std::copy and std::find overloads for streambuf iterators."},
{"lineNum":"  351","line":"  //"},
{"lineNum":"  352","line":"  template<typename _Tp>"},
{"lineNum":"  353","line":"    struct __is_char"},
{"lineNum":"  354","line":"    {"},
{"lineNum":"  355","line":"      enum { __value = 0 };"},
{"lineNum":"  356","line":"      typedef __false_type __type;"},
{"lineNum":"  357","line":"    };"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"  template<>"},
{"lineNum":"  360","line":"    struct __is_char<char>"},
{"lineNum":"  361","line":"    {"},
{"lineNum":"  362","line":"      enum { __value = 1 };"},
{"lineNum":"  363","line":"      typedef __true_type __type;"},
{"lineNum":"  364","line":"    };"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"#ifdef _GLIBCXX_USE_WCHAR_T"},
{"lineNum":"  367","line":"  template<>"},
{"lineNum":"  368","line":"    struct __is_char<wchar_t>"},
{"lineNum":"  369","line":"    {"},
{"lineNum":"  370","line":"      enum { __value = 1 };"},
{"lineNum":"  371","line":"      typedef __true_type __type;"},
{"lineNum":"  372","line":"    };"},
{"lineNum":"  373","line":"#endif"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"  template<typename _Tp>"},
{"lineNum":"  376","line":"    struct __is_byte"},
{"lineNum":"  377","line":"    {"},
{"lineNum":"  378","line":"      enum { __value = 0 };"},
{"lineNum":"  379","line":"      typedef __false_type __type;"},
{"lineNum":"  380","line":"    };"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"  template<>"},
{"lineNum":"  383","line":"    struct __is_byte<char>"},
{"lineNum":"  384","line":"    {"},
{"lineNum":"  385","line":"      enum { __value = 1 };"},
{"lineNum":"  386","line":"      typedef __true_type __type;"},
{"lineNum":"  387","line":"    };"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"  template<>"},
{"lineNum":"  390","line":"    struct __is_byte<signed char>"},
{"lineNum":"  391","line":"    {"},
{"lineNum":"  392","line":"      enum { __value = 1 };"},
{"lineNum":"  393","line":"      typedef __true_type __type;"},
{"lineNum":"  394","line":"    };"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"  template<>"},
{"lineNum":"  397","line":"    struct __is_byte<unsigned char>"},
{"lineNum":"  398","line":"    {"},
{"lineNum":"  399","line":"      enum { __value = 1 };"},
{"lineNum":"  400","line":"      typedef __true_type __type;"},
{"lineNum":"  401","line":"    };"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"#if __cplusplus >= 201703L"},
{"lineNum":"  404","line":"  enum class byte : unsigned char;"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"  template<>"},
{"lineNum":"  407","line":"    struct __is_byte<byte>"},
{"lineNum":"  408","line":"    {"},
{"lineNum":"  409","line":"      enum { __value = 1 };"},
{"lineNum":"  410","line":"      typedef __true_type __type;"},
{"lineNum":"  411","line":"    };"},
{"lineNum":"  412","line":"#endif // C++17"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"  //"},
{"lineNum":"  415","line":"  // Move iterator type"},
{"lineNum":"  416","line":"  //"},
{"lineNum":"  417","line":"  template<typename _Tp>"},
{"lineNum":"  418","line":"    struct __is_move_iterator"},
{"lineNum":"  419","line":"    {"},
{"lineNum":"  420","line":"      enum { __value = 0 };"},
{"lineNum":"  421","line":"      typedef __false_type __type;"},
{"lineNum":"  422","line":"    };"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"  // Fallback implementation of the function in bits/stl_iterator.h used to"},
{"lineNum":"  425","line":"  // remove the move_iterator wrapper."},
{"lineNum":"  426","line":"  template<typename _Iterator>"},
{"lineNum":"  427","line":"    inline _Iterator"},
{"lineNum":"  428","line":"    __miter_base(_Iterator __it)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  429","line":"    { return __it; }","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  432","line":"} // namespace"},
{"lineNum":"  433","line":"} // extern \"C++\""},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"#endif //_CPP_TYPE_TRAITS_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "bech32_fuzz_2_gcc_instrumented", "date" : "2023-07-28 14:53:55", "instrumented" : 2, "covered" : 0,};
var merged_data = [];
