var data = {lines:[
{"lineNum":"    1","line":"// Functions used by iterators -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2019 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*"},
{"lineNum":"   26","line":" *"},
{"lineNum":"   27","line":" * Copyright (c) 1994"},
{"lineNum":"   28","line":" * Hewlett-Packard Company"},
{"lineNum":"   29","line":" *"},
{"lineNum":"   30","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   31","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   32","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   33","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   34","line":" * in supporting documentation.  Hewlett-Packard Company makes no"},
{"lineNum":"   35","line":" * representations about the suitability of this software for any"},
{"lineNum":"   36","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   37","line":" *"},
{"lineNum":"   38","line":" *"},
{"lineNum":"   39","line":" * Copyright (c) 1996-1998"},
{"lineNum":"   40","line":" * Silicon Graphics Computer Systems, Inc."},
{"lineNum":"   41","line":" *"},
{"lineNum":"   42","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   43","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   44","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   45","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   46","line":" * in supporting documentation.  Silicon Graphics makes no"},
{"lineNum":"   47","line":" * representations about the suitability of this software for any"},
{"lineNum":"   48","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   49","line":" */"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/** @file bits/stl_iterator_base_funcs.h"},
{"lineNum":"   52","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   53","line":" *  Do not attempt to use it directly. @headername{iterator}"},
{"lineNum":"   54","line":" *"},
{"lineNum":"   55","line":" *  This file contains all of the general iterator-related utility"},
{"lineNum":"   56","line":" *  functions, such as distance() and advance()."},
{"lineNum":"   57","line":" */"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"#ifndef _STL_ITERATOR_BASE_FUNCS_H"},
{"lineNum":"   60","line":"#define _STL_ITERATOR_BASE_FUNCS_H 1"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"#pragma GCC system_header"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"#include <bits/concept_check.h>"},
{"lineNum":"   65","line":"#include <debug/assertions.h>"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   68","line":"{"},
{"lineNum":"   69","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"_GLIBCXX_BEGIN_NAMESPACE_CONTAINER"},
{"lineNum":"   72","line":"  // Forward declaration for the overloads of __distance."},
{"lineNum":"   73","line":"  template <typename> struct _List_iterator;"},
{"lineNum":"   74","line":"  template <typename> struct _List_const_iterator;"},
{"lineNum":"   75","line":"_GLIBCXX_END_NAMESPACE_CONTAINER"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  template<typename _InputIterator>"},
{"lineNum":"   78","line":"    inline _GLIBCXX14_CONSTEXPR"},
{"lineNum":"   79","line":"    typename iterator_traits<_InputIterator>::difference_type"},
{"lineNum":"   80","line":"    __distance(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"   81","line":"               input_iterator_tag)"},
{"lineNum":"   82","line":"    {"},
{"lineNum":"   83","line":"      // concept requirements"},
{"lineNum":"   84","line":"      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"      typename iterator_traits<_InputIterator>::difference_type __n = 0;"},
{"lineNum":"   87","line":"      while (__first != __last)"},
{"lineNum":"   88","line":"\t{"},
{"lineNum":"   89","line":"\t  ++__first;"},
{"lineNum":"   90","line":"\t  ++__n;"},
{"lineNum":"   91","line":"\t}"},
{"lineNum":"   92","line":"      return __n;"},
{"lineNum":"   93","line":"    }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"  template<typename _RandomAccessIterator>"},
{"lineNum":"   96","line":"    inline _GLIBCXX14_CONSTEXPR"},
{"lineNum":"   97","line":"    typename iterator_traits<_RandomAccessIterator>::difference_type"},
{"lineNum":"   98","line":"    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   99","line":"               random_access_iterator_tag)"},
{"lineNum":"  100","line":"    {"},
{"lineNum":"  101","line":"      // concept requirements"},
{"lineNum":"  102","line":"      __glibcxx_function_requires(_RandomAccessIteratorConcept<"},
{"lineNum":"  103","line":"\t\t\t\t  _RandomAccessIterator>)"},
{"lineNum":"  104","line":"      return __last - __first;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  105","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"#if _GLIBCXX_USE_CXX11_ABI"},
{"lineNum":"  108","line":"  // Forward declaration because of the qualified call in distance."},
{"lineNum":"  109","line":"  template<typename _Tp>"},
{"lineNum":"  110","line":"    ptrdiff_t"},
{"lineNum":"  111","line":"    __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,"},
{"lineNum":"  112","line":"\t       _GLIBCXX_STD_C::_List_iterator<_Tp>,"},
{"lineNum":"  113","line":"\t       input_iterator_tag);"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"  template<typename _Tp>"},
{"lineNum":"  116","line":"    ptrdiff_t"},
{"lineNum":"  117","line":"    __distance(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,"},
{"lineNum":"  118","line":"\t       _GLIBCXX_STD_C::_List_const_iterator<_Tp>,"},
{"lineNum":"  119","line":"\t       input_iterator_tag);"},
{"lineNum":"  120","line":"#endif"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  /**"},
{"lineNum":"  123","line":"   *  @brief A generalization of pointer arithmetic."},
{"lineNum":"  124","line":"   *  @param  __first  An input iterator."},
{"lineNum":"  125","line":"   *  @param  __last  An input iterator."},
{"lineNum":"  126","line":"   *  @return  The distance between them."},
{"lineNum":"  127","line":"   *"},
{"lineNum":"  128","line":"   *  Returns @c n such that __first + n == __last.  This requires"},
{"lineNum":"  129","line":"   *  that @p __last must be reachable from @p __first.  Note that @c"},
{"lineNum":"  130","line":"   *  n may be negative."},
{"lineNum":"  131","line":"   *"},
{"lineNum":"  132","line":"   *  For random access iterators, this uses their @c + and @c - operations"},
{"lineNum":"  133","line":"   *  and are constant time.  For other %iterator classes they are linear time."},
{"lineNum":"  134","line":"  */"},
{"lineNum":"  135","line":"  template<typename _InputIterator>"},
{"lineNum":"  136","line":"    inline _GLIBCXX17_CONSTEXPR"},
{"lineNum":"  137","line":"    typename iterator_traits<_InputIterator>::difference_type"},
{"lineNum":"  138","line":"    distance(_InputIterator __first, _InputIterator __last)","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  139","line":"    {"},
{"lineNum":"  140","line":"      // concept requirements -- taken care of in __distance"},
{"lineNum":"  141","line":"      return std::__distance(__first, __last,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  142","line":"\t\t\t     std::__iterator_category(__first));","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  143","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"  template<typename _InputIterator, typename _Distance>"},
{"lineNum":"  146","line":"    inline _GLIBCXX14_CONSTEXPR void"},
{"lineNum":"  147","line":"    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)"},
{"lineNum":"  148","line":"    {"},
{"lineNum":"  149","line":"      // concept requirements"},
{"lineNum":"  150","line":"      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)"},
{"lineNum":"  151","line":"      __glibcxx_assert(__n >= 0);"},
{"lineNum":"  152","line":"      while (__n--)"},
{"lineNum":"  153","line":"\t++__i;"},
{"lineNum":"  154","line":"    }"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"  template<typename _BidirectionalIterator, typename _Distance>"},
{"lineNum":"  157","line":"    inline _GLIBCXX14_CONSTEXPR void"},
{"lineNum":"  158","line":"    __advance(_BidirectionalIterator& __i, _Distance __n,"},
{"lineNum":"  159","line":"\t      bidirectional_iterator_tag)"},
{"lineNum":"  160","line":"    {"},
{"lineNum":"  161","line":"      // concept requirements"},
{"lineNum":"  162","line":"      __glibcxx_function_requires(_BidirectionalIteratorConcept<"},
{"lineNum":"  163","line":"\t\t\t\t  _BidirectionalIterator>)"},
{"lineNum":"  164","line":"      if (__n > 0)"},
{"lineNum":"  165","line":"        while (__n--)"},
{"lineNum":"  166","line":"\t  ++__i;"},
{"lineNum":"  167","line":"      else"},
{"lineNum":"  168","line":"        while (__n++)"},
{"lineNum":"  169","line":"\t  --__i;"},
{"lineNum":"  170","line":"    }"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"  template<typename _RandomAccessIterator, typename _Distance>"},
{"lineNum":"  173","line":"    inline _GLIBCXX14_CONSTEXPR void"},
{"lineNum":"  174","line":"    __advance(_RandomAccessIterator& __i, _Distance __n,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"              random_access_iterator_tag)"},
{"lineNum":"  176","line":"    {"},
{"lineNum":"  177","line":"      // concept requirements"},
{"lineNum":"  178","line":"      __glibcxx_function_requires(_RandomAccessIteratorConcept<"},
{"lineNum":"  179","line":"\t\t\t\t  _RandomAccessIterator>)"},
{"lineNum":"  180","line":"      if (__builtin_constant_p(__n) && __n == 1)"},
{"lineNum":"  181","line":"\t++__i;"},
{"lineNum":"  182","line":"      else if (__builtin_constant_p(__n) && __n == -1)"},
{"lineNum":"  183","line":"\t--__i;"},
{"lineNum":"  184","line":"      else"},
{"lineNum":"  185","line":"\t__i += __n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"  /**"},
{"lineNum":"  189","line":"   *  @brief A generalization of pointer arithmetic."},
{"lineNum":"  190","line":"   *  @param  __i  An input iterator."},
{"lineNum":"  191","line":"   *  @param  __n  The @a delta by which to change @p __i."},
{"lineNum":"  192","line":"   *  @return  Nothing."},
{"lineNum":"  193","line":"   *"},
{"lineNum":"  194","line":"   *  This increments @p i by @p n.  For bidirectional and random access"},
{"lineNum":"  195","line":"   *  iterators, @p __n may be negative, in which case @p __i is decremented."},
{"lineNum":"  196","line":"   *"},
{"lineNum":"  197","line":"   *  For random access iterators, this uses their @c + and @c - operations"},
{"lineNum":"  198","line":"   *  and are constant time.  For other %iterator classes they are linear time."},
{"lineNum":"  199","line":"  */"},
{"lineNum":"  200","line":"  template<typename _InputIterator, typename _Distance>"},
{"lineNum":"  201","line":"    inline _GLIBCXX17_CONSTEXPR void"},
{"lineNum":"  202","line":"    advance(_InputIterator& __i, _Distance __n)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  203","line":"    {"},
{"lineNum":"  204","line":"      // concept requirements -- taken care of in __advance"},
{"lineNum":"  205","line":"      typename iterator_traits<_InputIterator>::difference_type __d = __n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  206","line":"      std::__advance(__i, __d, std::__iterator_category(__i));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  207","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"  template<typename _InputIterator>"},
{"lineNum":"  212","line":"    inline _GLIBCXX17_CONSTEXPR _InputIterator"},
{"lineNum":"  213","line":"    next(_InputIterator __x, typename"},
{"lineNum":"  214","line":"\t iterator_traits<_InputIterator>::difference_type __n = 1)"},
{"lineNum":"  215","line":"    {"},
{"lineNum":"  216","line":"      // concept requirements"},
{"lineNum":"  217","line":"      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)"},
{"lineNum":"  218","line":"      std::advance(__x, __n);"},
{"lineNum":"  219","line":"      return __x;"},
{"lineNum":"  220","line":"    }"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"  template<typename _BidirectionalIterator>"},
{"lineNum":"  223","line":"    inline _GLIBCXX17_CONSTEXPR _BidirectionalIterator"},
{"lineNum":"  224","line":"    prev(_BidirectionalIterator __x, typename"},
{"lineNum":"  225","line":"\t iterator_traits<_BidirectionalIterator>::difference_type __n = 1)"},
{"lineNum":"  226","line":"    {"},
{"lineNum":"  227","line":"      // concept requirements"},
{"lineNum":"  228","line":"      __glibcxx_function_requires(_BidirectionalIteratorConcept<"},
{"lineNum":"  229","line":"\t\t\t\t  _BidirectionalIterator>)"},
{"lineNum":"  230","line":"      std::advance(__x, -__n);"},
{"lineNum":"  231","line":"      return __x;"},
{"lineNum":"  232","line":"    }"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"#endif // C++11"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  237","line":"} // namespace"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"#endif /* _STL_ITERATOR_BASE_FUNCS_H */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "bech32_fuzz_2_gcc_instrumented", "date" : "2023-07-28 14:53:55", "instrumented" : 14, "covered" : 0,};
var merged_data = [];
