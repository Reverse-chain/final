var data = {lines:[
{"lineNum":"    1","line":"// Vector implementation (out of line) -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2019 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*"},
{"lineNum":"   26","line":" *"},
{"lineNum":"   27","line":" * Copyright (c) 1994"},
{"lineNum":"   28","line":" * Hewlett-Packard Company"},
{"lineNum":"   29","line":" *"},
{"lineNum":"   30","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   31","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   32","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   33","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   34","line":" * in supporting documentation.  Hewlett-Packard Company makes no"},
{"lineNum":"   35","line":" * representations about the suitability of this software for any"},
{"lineNum":"   36","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   37","line":" *"},
{"lineNum":"   38","line":" *"},
{"lineNum":"   39","line":" * Copyright (c) 1996"},
{"lineNum":"   40","line":" * Silicon Graphics Computer Systems, Inc."},
{"lineNum":"   41","line":" *"},
{"lineNum":"   42","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   43","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   44","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   45","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   46","line":" * in supporting documentation.  Silicon Graphics makes no"},
{"lineNum":"   47","line":" * representations about the suitability of this  software for any"},
{"lineNum":"   48","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   49","line":" */"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/** @file bits/vector.tcc"},
{"lineNum":"   52","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   53","line":" *  Do not attempt to use it directly. @headername{vector}"},
{"lineNum":"   54","line":" */"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#ifndef _VECTOR_TCC"},
{"lineNum":"   57","line":"#define _VECTOR_TCC 1"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   60","line":"{"},
{"lineNum":"   61","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   62","line":"_GLIBCXX_BEGIN_NAMESPACE_CONTAINER"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"   65","line":"    void"},
{"lineNum":"   66","line":"    vector<_Tp, _Alloc>::"},
{"lineNum":"   67","line":"    reserve(size_type __n)"},
{"lineNum":"   68","line":"    {"},
{"lineNum":"   69","line":"      if (__n > this->max_size())"},
{"lineNum":"   70","line":"\t__throw_length_error(__N(\"vector::reserve\"));"},
{"lineNum":"   71","line":"      if (this->capacity() < __n)"},
{"lineNum":"   72","line":"\t{"},
{"lineNum":"   73","line":"\t  const size_type __old_size = size();"},
{"lineNum":"   74","line":"\t  pointer __tmp;"},
{"lineNum":"   75","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   76","line":"\t  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())"},
{"lineNum":"   77","line":"\t    {"},
{"lineNum":"   78","line":"\t      __tmp = this->_M_allocate(__n);"},
{"lineNum":"   79","line":"\t      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,"},
{"lineNum":"   80","line":"\t\t\t  __tmp, _M_get_Tp_allocator());"},
{"lineNum":"   81","line":"\t    }"},
{"lineNum":"   82","line":"\t  else"},
{"lineNum":"   83","line":"#endif"},
{"lineNum":"   84","line":"\t    {"},
{"lineNum":"   85","line":"\t      __tmp = _M_allocate_and_copy(__n,"},
{"lineNum":"   86","line":"\t\t_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),"},
{"lineNum":"   87","line":"\t\t_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));"},
{"lineNum":"   88","line":"\t      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,"},
{"lineNum":"   89","line":"\t\t\t    _M_get_Tp_allocator());"},
{"lineNum":"   90","line":"\t    }"},
{"lineNum":"   91","line":"\t  _GLIBCXX_ASAN_ANNOTATE_REINIT;"},
{"lineNum":"   92","line":"\t  _M_deallocate(this->_M_impl._M_start,"},
{"lineNum":"   93","line":"\t\t\tthis->_M_impl._M_end_of_storage"},
{"lineNum":"   94","line":"\t\t\t- this->_M_impl._M_start);"},
{"lineNum":"   95","line":"\t  this->_M_impl._M_start = __tmp;"},
{"lineNum":"   96","line":"\t  this->_M_impl._M_finish = __tmp + __old_size;"},
{"lineNum":"   97","line":"\t  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;"},
{"lineNum":"   98","line":"\t}"},
{"lineNum":"   99","line":"    }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  102","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  103","line":"    template<typename... _Args>"},
{"lineNum":"  104","line":"#if __cplusplus > 201402L"},
{"lineNum":"  105","line":"      typename vector<_Tp, _Alloc>::reference"},
{"lineNum":"  106","line":"#else"},
{"lineNum":"  107","line":"      void"},
{"lineNum":"  108","line":"#endif"},
{"lineNum":"  109","line":"      vector<_Tp, _Alloc>::","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"      emplace_back(_Args&&... __args)"},
{"lineNum":"  111","line":"      {"},
{"lineNum":"  112","line":"\tif (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  113","line":"\t  {"},
{"lineNum":"  114","line":"\t    _GLIBCXX_ASAN_ANNOTATE_GROW(1);"},
{"lineNum":"  115","line":"\t    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  116","line":"\t\t\t\t     std::forward<_Args>(__args)...);"},
{"lineNum":"  117","line":"\t    ++this->_M_impl._M_finish;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  118","line":"\t    _GLIBCXX_ASAN_ANNOTATE_GREW(1);"},
{"lineNum":"  119","line":"\t  }"},
{"lineNum":"  120","line":"\telse"},
{"lineNum":"  121","line":"\t  _M_realloc_insert(end(), std::forward<_Args>(__args)...);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"#if __cplusplus > 201402L"},
{"lineNum":"  123","line":"\treturn back();"},
{"lineNum":"  124","line":"#endif"},
{"lineNum":"  125","line":"      }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  126","line":"#endif"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  129","line":"    typename vector<_Tp, _Alloc>::iterator"},
{"lineNum":"  130","line":"    vector<_Tp, _Alloc>::"},
{"lineNum":"  131","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  132","line":"    insert(const_iterator __position, const value_type& __x)"},
{"lineNum":"  133","line":"#else"},
{"lineNum":"  134","line":"    insert(iterator __position, const value_type& __x)"},
{"lineNum":"  135","line":"#endif"},
{"lineNum":"  136","line":"    {"},
{"lineNum":"  137","line":"      const size_type __n = __position - begin();"},
{"lineNum":"  138","line":"      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)"},
{"lineNum":"  139","line":"\tif (__position == end())"},
{"lineNum":"  140","line":"\t  {"},
{"lineNum":"  141","line":"\t    _GLIBCXX_ASAN_ANNOTATE_GROW(1);"},
{"lineNum":"  142","line":"\t    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,"},
{"lineNum":"  143","line":"\t\t\t\t     __x);"},
{"lineNum":"  144","line":"\t    ++this->_M_impl._M_finish;"},
{"lineNum":"  145","line":"\t    _GLIBCXX_ASAN_ANNOTATE_GREW(1);"},
{"lineNum":"  146","line":"\t  }"},
{"lineNum":"  147","line":"\telse"},
{"lineNum":"  148","line":"\t  {"},
{"lineNum":"  149","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  150","line":"\t    const auto __pos = begin() + (__position - cbegin());"},
{"lineNum":"  151","line":"\t    // __x could be an existing element of this vector, so make a"},
{"lineNum":"  152","line":"\t    // copy of it before _M_insert_aux moves elements around."},
{"lineNum":"  153","line":"\t    _Temporary_value __x_copy(this, __x);"},
{"lineNum":"  154","line":"\t    _M_insert_aux(__pos, std::move(__x_copy._M_val()));"},
{"lineNum":"  155","line":"#else"},
{"lineNum":"  156","line":"\t    _M_insert_aux(__position, __x);"},
{"lineNum":"  157","line":"#endif"},
{"lineNum":"  158","line":"\t  }"},
{"lineNum":"  159","line":"      else"},
{"lineNum":"  160","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  161","line":"\t_M_realloc_insert(begin() + (__position - cbegin()), __x);"},
{"lineNum":"  162","line":"#else"},
{"lineNum":"  163","line":"\t_M_realloc_insert(__position, __x);"},
{"lineNum":"  164","line":"#endif"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"      return iterator(this->_M_impl._M_start + __n);"},
{"lineNum":"  167","line":"    }"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  170","line":"    typename vector<_Tp, _Alloc>::iterator"},
{"lineNum":"  171","line":"    vector<_Tp, _Alloc>::"},
{"lineNum":"  172","line":"    _M_erase(iterator __position)"},
{"lineNum":"  173","line":"    {"},
{"lineNum":"  174","line":"      if (__position + 1 != end())"},
{"lineNum":"  175","line":"\t_GLIBCXX_MOVE3(__position + 1, end(), __position);"},
{"lineNum":"  176","line":"      --this->_M_impl._M_finish;"},
{"lineNum":"  177","line":"      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);"},
{"lineNum":"  178","line":"      _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);"},
{"lineNum":"  179","line":"      return __position;"},
{"lineNum":"  180","line":"    }"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  183","line":"    typename vector<_Tp, _Alloc>::iterator"},
{"lineNum":"  184","line":"    vector<_Tp, _Alloc>::"},
{"lineNum":"  185","line":"    _M_erase(iterator __first, iterator __last)"},
{"lineNum":"  186","line":"    {"},
{"lineNum":"  187","line":"      if (__first != __last)"},
{"lineNum":"  188","line":"\t{"},
{"lineNum":"  189","line":"\t  if (__last != end())"},
{"lineNum":"  190","line":"\t    _GLIBCXX_MOVE3(__last, end(), __first);"},
{"lineNum":"  191","line":"\t  _M_erase_at_end(__first.base() + (end() - __last));"},
{"lineNum":"  192","line":"\t}"},
{"lineNum":"  193","line":"      return __first;"},
{"lineNum":"  194","line":"    }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  197","line":"    vector<_Tp, _Alloc>&"},
{"lineNum":"  198","line":"    vector<_Tp, _Alloc>::"},
{"lineNum":"  199","line":"    operator=(const vector<_Tp, _Alloc>& __x)"},
{"lineNum":"  200","line":"    {"},
{"lineNum":"  201","line":"      if (&__x != this)"},
{"lineNum":"  202","line":"\t{"},
{"lineNum":"  203","line":"\t  _GLIBCXX_ASAN_ANNOTATE_REINIT;"},
{"lineNum":"  204","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  205","line":"\t  if (_Alloc_traits::_S_propagate_on_copy_assign())"},
{"lineNum":"  206","line":"\t    {"},
{"lineNum":"  207","line":"\t      if (!_Alloc_traits::_S_always_equal()"},
{"lineNum":"  208","line":"\t          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())"},
{"lineNum":"  209","line":"\t        {"},
{"lineNum":"  210","line":"\t\t  // replacement allocator cannot free existing storage"},
{"lineNum":"  211","line":"\t\t  this->clear();"},
{"lineNum":"  212","line":"\t\t  _M_deallocate(this->_M_impl._M_start,"},
{"lineNum":"  213","line":"\t\t\t\tthis->_M_impl._M_end_of_storage"},
{"lineNum":"  214","line":"\t\t\t\t- this->_M_impl._M_start);"},
{"lineNum":"  215","line":"\t\t  this->_M_impl._M_start = nullptr;"},
{"lineNum":"  216","line":"\t\t  this->_M_impl._M_finish = nullptr;"},
{"lineNum":"  217","line":"\t\t  this->_M_impl._M_end_of_storage = nullptr;"},
{"lineNum":"  218","line":"\t\t}"},
{"lineNum":"  219","line":"\t      std::__alloc_on_copy(_M_get_Tp_allocator(),"},
{"lineNum":"  220","line":"\t\t\t\t   __x._M_get_Tp_allocator());"},
{"lineNum":"  221","line":"\t    }"},
{"lineNum":"  222","line":"#endif"},
{"lineNum":"  223","line":"\t  const size_type __xlen = __x.size();"},
{"lineNum":"  224","line":"\t  if (__xlen > capacity())"},
{"lineNum":"  225","line":"\t    {"},
{"lineNum":"  226","line":"\t      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),"},
{"lineNum":"  227","line":"\t\t\t\t\t\t   __x.end());"},
{"lineNum":"  228","line":"\t      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,"},
{"lineNum":"  229","line":"\t\t\t    _M_get_Tp_allocator());"},
{"lineNum":"  230","line":"\t      _M_deallocate(this->_M_impl._M_start,"},
{"lineNum":"  231","line":"\t\t\t    this->_M_impl._M_end_of_storage"},
{"lineNum":"  232","line":"\t\t\t    - this->_M_impl._M_start);"},
{"lineNum":"  233","line":"\t      this->_M_impl._M_start = __tmp;"},
{"lineNum":"  234","line":"\t      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;"},
{"lineNum":"  235","line":"\t    }"},
{"lineNum":"  236","line":"\t  else if (size() >= __xlen)"},
{"lineNum":"  237","line":"\t    {"},
{"lineNum":"  238","line":"\t      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),"},
{"lineNum":"  239","line":"\t\t\t    end(), _M_get_Tp_allocator());"},
{"lineNum":"  240","line":"\t    }"},
{"lineNum":"  241","line":"\t  else"},
{"lineNum":"  242","line":"\t    {"},
{"lineNum":"  243","line":"\t      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),"},
{"lineNum":"  244","line":"\t\t\tthis->_M_impl._M_start);"},
{"lineNum":"  245","line":"\t      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),"},
{"lineNum":"  246","line":"\t\t\t\t\t  __x._M_impl._M_finish,"},
{"lineNum":"  247","line":"\t\t\t\t\t  this->_M_impl._M_finish,"},
{"lineNum":"  248","line":"\t\t\t\t\t  _M_get_Tp_allocator());"},
{"lineNum":"  249","line":"\t    }"},
{"lineNum":"  250","line":"\t  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;"},
{"lineNum":"  251","line":"\t}"},
{"lineNum":"  252","line":"      return *this;"},
{"lineNum":"  253","line":"    }"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  256","line":"    void"},
{"lineNum":"  257","line":"    vector<_Tp, _Alloc>::"},
{"lineNum":"  258","line":"    _M_fill_assign(size_t __n, const value_type& __val)"},
{"lineNum":"  259","line":"    {"},
{"lineNum":"  260","line":"      if (__n > capacity())"},
{"lineNum":"  261","line":"\t{"},
{"lineNum":"  262","line":"\t  vector __tmp(__n, __val, _M_get_Tp_allocator());"},
{"lineNum":"  263","line":"\t  __tmp._M_impl._M_swap_data(this->_M_impl);"},
{"lineNum":"  264","line":"\t}"},
{"lineNum":"  265","line":"      else if (__n > size())"},
{"lineNum":"  266","line":"\t{"},
{"lineNum":"  267","line":"\t  std::fill(begin(), end(), __val);"},
{"lineNum":"  268","line":"\t  const size_type __add = __n - size();"},
{"lineNum":"  269","line":"\t  _GLIBCXX_ASAN_ANNOTATE_GROW(__add);"},
{"lineNum":"  270","line":"\t  this->_M_impl._M_finish ="},
{"lineNum":"  271","line":"\t    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,"},
{"lineNum":"  272","line":"\t\t\t\t\t  __add, __val, _M_get_Tp_allocator());"},
{"lineNum":"  273","line":"\t  _GLIBCXX_ASAN_ANNOTATE_GREW(__add);"},
{"lineNum":"  274","line":"\t}"},
{"lineNum":"  275","line":"      else"},
{"lineNum":"  276","line":"        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));"},
{"lineNum":"  277","line":"    }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  280","line":"    template<typename _InputIterator>"},
{"lineNum":"  281","line":"      void"},
{"lineNum":"  282","line":"      vector<_Tp, _Alloc>::"},
{"lineNum":"  283","line":"      _M_assign_aux(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  284","line":"\t\t    std::input_iterator_tag)"},
{"lineNum":"  285","line":"      {"},
{"lineNum":"  286","line":"\tpointer __cur(this->_M_impl._M_start);"},
{"lineNum":"  287","line":"\tfor (; __first != __last && __cur != this->_M_impl._M_finish;"},
{"lineNum":"  288","line":"\t     ++__cur, (void)++__first)"},
{"lineNum":"  289","line":"\t  *__cur = *__first;"},
{"lineNum":"  290","line":"\tif (__first == __last)"},
{"lineNum":"  291","line":"\t  _M_erase_at_end(__cur);"},
{"lineNum":"  292","line":"\telse"},
{"lineNum":"  293","line":"\t  _M_range_insert(end(), __first, __last,"},
{"lineNum":"  294","line":"\t\t\t  std::__iterator_category(__first));"},
{"lineNum":"  295","line":"      }"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  298","line":"    template<typename _ForwardIterator>"},
{"lineNum":"  299","line":"      void"},
{"lineNum":"  300","line":"      vector<_Tp, _Alloc>::"},
{"lineNum":"  301","line":"      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  302","line":"\t\t    std::forward_iterator_tag)"},
{"lineNum":"  303","line":"      {"},
{"lineNum":"  304","line":"\tconst size_type __len = std::distance(__first, __last);"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"\tif (__len > capacity())"},
{"lineNum":"  307","line":"\t  {"},
{"lineNum":"  308","line":"\t    _S_check_init_len(__len, _M_get_Tp_allocator());"},
{"lineNum":"  309","line":"\t    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));"},
{"lineNum":"  310","line":"\t    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,"},
{"lineNum":"  311","line":"\t\t\t  _M_get_Tp_allocator());"},
{"lineNum":"  312","line":"\t    _GLIBCXX_ASAN_ANNOTATE_REINIT;"},
{"lineNum":"  313","line":"\t    _M_deallocate(this->_M_impl._M_start,"},
{"lineNum":"  314","line":"\t\t\t  this->_M_impl._M_end_of_storage"},
{"lineNum":"  315","line":"\t\t\t  - this->_M_impl._M_start);"},
{"lineNum":"  316","line":"\t    this->_M_impl._M_start = __tmp;"},
{"lineNum":"  317","line":"\t    this->_M_impl._M_finish = this->_M_impl._M_start + __len;"},
{"lineNum":"  318","line":"\t    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;"},
{"lineNum":"  319","line":"\t  }"},
{"lineNum":"  320","line":"\telse if (size() >= __len)"},
{"lineNum":"  321","line":"\t  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));"},
{"lineNum":"  322","line":"\telse"},
{"lineNum":"  323","line":"\t  {"},
{"lineNum":"  324","line":"\t    _ForwardIterator __mid = __first;"},
{"lineNum":"  325","line":"\t    std::advance(__mid, size());"},
{"lineNum":"  326","line":"\t    std::copy(__first, __mid, this->_M_impl._M_start);"},
{"lineNum":"  327","line":"\t    const size_type __attribute__((__unused__)) __n = __len - size();"},
{"lineNum":"  328","line":"\t    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);"},
{"lineNum":"  329","line":"\t    this->_M_impl._M_finish ="},
{"lineNum":"  330","line":"\t      std::__uninitialized_copy_a(__mid, __last,"},
{"lineNum":"  331","line":"\t\t\t\t\t  this->_M_impl._M_finish,"},
{"lineNum":"  332","line":"\t\t\t\t\t  _M_get_Tp_allocator());"},
{"lineNum":"  333","line":"\t    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);"},
{"lineNum":"  334","line":"\t  }"},
{"lineNum":"  335","line":"      }"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  338","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  339","line":"    auto"},
{"lineNum":"  340","line":"    vector<_Tp, _Alloc>::"},
{"lineNum":"  341","line":"    _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator"},
{"lineNum":"  342","line":"    {"},
{"lineNum":"  343","line":"      const auto __n = __position - cbegin();"},
{"lineNum":"  344","line":"      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)"},
{"lineNum":"  345","line":"\tif (__position == cend())"},
{"lineNum":"  346","line":"\t  {"},
{"lineNum":"  347","line":"\t    _GLIBCXX_ASAN_ANNOTATE_GROW(1);"},
{"lineNum":"  348","line":"\t    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,"},
{"lineNum":"  349","line":"\t\t\t\t     std::move(__v));"},
{"lineNum":"  350","line":"\t    ++this->_M_impl._M_finish;"},
{"lineNum":"  351","line":"\t    _GLIBCXX_ASAN_ANNOTATE_GREW(1);"},
{"lineNum":"  352","line":"\t  }"},
{"lineNum":"  353","line":"\telse"},
{"lineNum":"  354","line":"\t  _M_insert_aux(begin() + __n, std::move(__v));"},
{"lineNum":"  355","line":"      else"},
{"lineNum":"  356","line":"\t_M_realloc_insert(begin() + __n, std::move(__v));"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"      return iterator(this->_M_impl._M_start + __n);"},
{"lineNum":"  359","line":"    }"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  362","line":"    template<typename... _Args>"},
{"lineNum":"  363","line":"      auto"},
{"lineNum":"  364","line":"      vector<_Tp, _Alloc>::"},
{"lineNum":"  365","line":"      _M_emplace_aux(const_iterator __position, _Args&&... __args)"},
{"lineNum":"  366","line":"      -> iterator"},
{"lineNum":"  367","line":"      {"},
{"lineNum":"  368","line":"\tconst auto __n = __position - cbegin();"},
{"lineNum":"  369","line":"\tif (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)"},
{"lineNum":"  370","line":"\t  if (__position == cend())"},
{"lineNum":"  371","line":"\t    {"},
{"lineNum":"  372","line":"\t      _GLIBCXX_ASAN_ANNOTATE_GROW(1);"},
{"lineNum":"  373","line":"\t      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,"},
{"lineNum":"  374","line":"\t\t\t\t       std::forward<_Args>(__args)...);"},
{"lineNum":"  375","line":"\t      ++this->_M_impl._M_finish;"},
{"lineNum":"  376","line":"\t      _GLIBCXX_ASAN_ANNOTATE_GREW(1);"},
{"lineNum":"  377","line":"\t    }"},
{"lineNum":"  378","line":"\t  else"},
{"lineNum":"  379","line":"\t    {"},
{"lineNum":"  380","line":"\t      // We need to construct a temporary because something in __args..."},
{"lineNum":"  381","line":"\t      // could alias one of the elements of the container and so we"},
{"lineNum":"  382","line":"\t      // need to use it before _M_insert_aux moves elements around."},
{"lineNum":"  383","line":"\t      _Temporary_value __tmp(this, std::forward<_Args>(__args)...);"},
{"lineNum":"  384","line":"\t      _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));"},
{"lineNum":"  385","line":"\t    }"},
{"lineNum":"  386","line":"\telse"},
{"lineNum":"  387","line":"\t  _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"\treturn iterator(this->_M_impl._M_start + __n);"},
{"lineNum":"  390","line":"      }"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  393","line":"    template<typename _Arg>"},
{"lineNum":"  394","line":"      void"},
{"lineNum":"  395","line":"      vector<_Tp, _Alloc>::"},
{"lineNum":"  396","line":"      _M_insert_aux(iterator __position, _Arg&& __arg)"},
{"lineNum":"  397","line":"#else"},
{"lineNum":"  398","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  399","line":"    void"},
{"lineNum":"  400","line":"    vector<_Tp, _Alloc>::"},
{"lineNum":"  401","line":"    _M_insert_aux(iterator __position, const _Tp& __x)"},
{"lineNum":"  402","line":"#endif"},
{"lineNum":"  403","line":"    {"},
{"lineNum":"  404","line":"      _GLIBCXX_ASAN_ANNOTATE_GROW(1);"},
{"lineNum":"  405","line":"      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,"},
{"lineNum":"  406","line":"\t\t\t       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));"},
{"lineNum":"  407","line":"      ++this->_M_impl._M_finish;"},
{"lineNum":"  408","line":"      _GLIBCXX_ASAN_ANNOTATE_GREW(1);"},
{"lineNum":"  409","line":"#if __cplusplus < 201103L"},
{"lineNum":"  410","line":"      _Tp __x_copy = __x;"},
{"lineNum":"  411","line":"#endif"},
{"lineNum":"  412","line":"      _GLIBCXX_MOVE_BACKWARD3(__position.base(),"},
{"lineNum":"  413","line":"\t\t\t      this->_M_impl._M_finish - 2,"},
{"lineNum":"  414","line":"\t\t\t      this->_M_impl._M_finish - 1);"},
{"lineNum":"  415","line":"#if __cplusplus < 201103L"},
{"lineNum":"  416","line":"      *__position = __x_copy;"},
{"lineNum":"  417","line":"#else"},
{"lineNum":"  418","line":"      *__position = std::forward<_Arg>(__arg);"},
{"lineNum":"  419","line":"#endif"},
{"lineNum":"  420","line":"    }"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  423","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  424","line":"    template<typename... _Args>"},
{"lineNum":"  425","line":"      void"},
{"lineNum":"  426","line":"      vector<_Tp, _Alloc>::","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  427","line":"      _M_realloc_insert(iterator __position, _Args&&... __args)"},
{"lineNum":"  428","line":"#else"},
{"lineNum":"  429","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  430","line":"    void"},
{"lineNum":"  431","line":"    vector<_Tp, _Alloc>::"},
{"lineNum":"  432","line":"    _M_realloc_insert(iterator __position, const _Tp& __x)"},
{"lineNum":"  433","line":"#endif"},
{"lineNum":"  434","line":"    {"},
{"lineNum":"  435","line":"      const size_type __len =","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  436","line":"\t_M_check_len(size_type(1), \"vector::_M_realloc_insert\");"},
{"lineNum":"  437","line":"      pointer __old_start = this->_M_impl._M_start;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  438","line":"      pointer __old_finish = this->_M_impl._M_finish;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":"      const size_type __elems_before = __position - begin();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  440","line":"      pointer __new_start(this->_M_allocate(__len));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  441","line":"      pointer __new_finish(__new_start);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":"      __try"},
{"lineNum":"  443","line":"\t{"},
{"lineNum":"  444","line":"\t  // The order of the three operations is dictated by the C++11"},
{"lineNum":"  445","line":"\t  // case, where the moves could alter a new element belonging"},
{"lineNum":"  446","line":"\t  // to the existing vector.  This is an issue only for callers"},
{"lineNum":"  447","line":"\t  // taking the element by lvalue ref (see last bullet of C++11"},
{"lineNum":"  448","line":"\t  // [res.on.arguments])."},
{"lineNum":"  449","line":"\t  _Alloc_traits::construct(this->_M_impl,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  450","line":"\t\t\t\t   __new_start + __elems_before,"},
{"lineNum":"  451","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  452","line":"\t\t\t\t   std::forward<_Args>(__args)...);"},
{"lineNum":"  453","line":"#else"},
{"lineNum":"  454","line":"\t\t\t\t   __x);"},
{"lineNum":"  455","line":"#endif"},
{"lineNum":"  456","line":"\t  __new_finish = pointer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  459","line":"\t  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  460","line":"\t    {"},
{"lineNum":"  461","line":"\t      __new_finish = _S_relocate(__old_start, __position.base(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  462","line":"\t\t\t\t\t __new_start, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"\t      ++__new_finish;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"\t      __new_finish = _S_relocate(__position.base(), __old_finish,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  467","line":"\t\t\t\t\t __new_finish, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  468","line":"\t    }"},
{"lineNum":"  469","line":"\t  else"},
{"lineNum":"  470","line":"#endif"},
{"lineNum":"  471","line":"\t    {"},
{"lineNum":"  472","line":"\t      __new_finish"},
{"lineNum":"  473","line":"\t\t= std::__uninitialized_move_if_noexcept_a"},
{"lineNum":"  474","line":"\t\t(__old_start, __position.base(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  475","line":"\t\t __new_start, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"\t      ++__new_finish;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"\t      __new_finish"},
{"lineNum":"  480","line":"\t\t= std::__uninitialized_move_if_noexcept_a"},
{"lineNum":"  481","line":"\t\t(__position.base(), __old_finish,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":"\t\t __new_finish, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  483","line":"\t    }"},
{"lineNum":"  484","line":"\t}"},
{"lineNum":"  485","line":"      __catch(...)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  486","line":"\t{"},
{"lineNum":"  487","line":"\t  if (!__new_finish)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":"\t    _Alloc_traits::destroy(this->_M_impl,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  489","line":"\t\t\t\t   __new_start + __elems_before);"},
{"lineNum":"  490","line":"\t  else"},
{"lineNum":"  491","line":"\t    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  492","line":"\t  _M_deallocate(__new_start, __len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  493","line":"\t  __throw_exception_again;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  494","line":"\t}"},
{"lineNum":"  495","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  496","line":"      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  497","line":"#endif"},
{"lineNum":"  498","line":"\tstd::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  499","line":"      _GLIBCXX_ASAN_ANNOTATE_REINIT;"},
{"lineNum":"  500","line":"      _M_deallocate(__old_start,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  501","line":"\t\t    this->_M_impl._M_end_of_storage - __old_start);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  502","line":"      this->_M_impl._M_start = __new_start;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  503","line":"      this->_M_impl._M_finish = __new_finish;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  504","line":"      this->_M_impl._M_end_of_storage = __new_start + __len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  505","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  508","line":"    void"},
{"lineNum":"  509","line":"    vector<_Tp, _Alloc>::"},
{"lineNum":"  510","line":"    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)"},
{"lineNum":"  511","line":"    {"},
{"lineNum":"  512","line":"      if (__n != 0)"},
{"lineNum":"  513","line":"\t{"},
{"lineNum":"  514","line":"\t  if (size_type(this->_M_impl._M_end_of_storage"},
{"lineNum":"  515","line":"\t\t\t- this->_M_impl._M_finish) >= __n)"},
{"lineNum":"  516","line":"\t    {"},
{"lineNum":"  517","line":"#if __cplusplus < 201103L"},
{"lineNum":"  518","line":"\t      value_type __x_copy = __x;"},
{"lineNum":"  519","line":"#else"},
{"lineNum":"  520","line":"\t      _Temporary_value __tmp(this, __x);"},
{"lineNum":"  521","line":"\t      value_type& __x_copy = __tmp._M_val();"},
{"lineNum":"  522","line":"#endif"},
{"lineNum":"  523","line":"\t      const size_type __elems_after = end() - __position;"},
{"lineNum":"  524","line":"\t      pointer __old_finish(this->_M_impl._M_finish);"},
{"lineNum":"  525","line":"\t      if (__elems_after > __n)"},
{"lineNum":"  526","line":"\t\t{"},
{"lineNum":"  527","line":"\t\t  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);"},
{"lineNum":"  528","line":"\t\t  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,"},
{"lineNum":"  529","line":"\t\t\t\t\t      this->_M_impl._M_finish,"},
{"lineNum":"  530","line":"\t\t\t\t\t      this->_M_impl._M_finish,"},
{"lineNum":"  531","line":"\t\t\t\t\t      _M_get_Tp_allocator());"},
{"lineNum":"  532","line":"\t\t  this->_M_impl._M_finish += __n;"},
{"lineNum":"  533","line":"\t\t  _GLIBCXX_ASAN_ANNOTATE_GREW(__n);"},
{"lineNum":"  534","line":"\t\t  _GLIBCXX_MOVE_BACKWARD3(__position.base(),"},
{"lineNum":"  535","line":"\t\t\t\t\t  __old_finish - __n, __old_finish);"},
{"lineNum":"  536","line":"\t\t  std::fill(__position.base(), __position.base() + __n,"},
{"lineNum":"  537","line":"\t\t\t    __x_copy);"},
{"lineNum":"  538","line":"\t\t}"},
{"lineNum":"  539","line":"\t      else"},
{"lineNum":"  540","line":"\t\t{"},
{"lineNum":"  541","line":"\t\t  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);"},
{"lineNum":"  542","line":"\t\t  this->_M_impl._M_finish ="},
{"lineNum":"  543","line":"\t\t    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,"},
{"lineNum":"  544","line":"\t\t\t\t\t\t  __n - __elems_after,"},
{"lineNum":"  545","line":"\t\t\t\t\t\t  __x_copy,"},
{"lineNum":"  546","line":"\t\t\t\t\t\t  _M_get_Tp_allocator());"},
{"lineNum":"  547","line":"\t\t  _GLIBCXX_ASAN_ANNOTATE_GREW(__n - __elems_after);"},
{"lineNum":"  548","line":"\t\t  std::__uninitialized_move_a(__position.base(), __old_finish,"},
{"lineNum":"  549","line":"\t\t\t\t\t      this->_M_impl._M_finish,"},
{"lineNum":"  550","line":"\t\t\t\t\t      _M_get_Tp_allocator());"},
{"lineNum":"  551","line":"\t\t  this->_M_impl._M_finish += __elems_after;"},
{"lineNum":"  552","line":"\t\t  _GLIBCXX_ASAN_ANNOTATE_GREW(__elems_after);"},
{"lineNum":"  553","line":"\t\t  std::fill(__position.base(), __old_finish, __x_copy);"},
{"lineNum":"  554","line":"\t\t}"},
{"lineNum":"  555","line":"\t    }"},
{"lineNum":"  556","line":"\t  else"},
{"lineNum":"  557","line":"\t    {"},
{"lineNum":"  558","line":"\t      const size_type __len ="},
{"lineNum":"  559","line":"\t\t_M_check_len(__n, \"vector::_M_fill_insert\");"},
{"lineNum":"  560","line":"\t      const size_type __elems_before = __position - begin();"},
{"lineNum":"  561","line":"\t      pointer __new_start(this->_M_allocate(__len));"},
{"lineNum":"  562","line":"\t      pointer __new_finish(__new_start);"},
{"lineNum":"  563","line":"\t      __try"},
{"lineNum":"  564","line":"\t\t{"},
{"lineNum":"  565","line":"\t\t  // See _M_realloc_insert above."},
{"lineNum":"  566","line":"\t\t  std::__uninitialized_fill_n_a(__new_start + __elems_before,"},
{"lineNum":"  567","line":"\t\t\t\t\t\t__n, __x,"},
{"lineNum":"  568","line":"\t\t\t\t\t\t_M_get_Tp_allocator());"},
{"lineNum":"  569","line":"\t\t  __new_finish = pointer();"},
{"lineNum":"  570","line":""},
{"lineNum":"  571","line":"\t\t  __new_finish"},
{"lineNum":"  572","line":"\t\t    = std::__uninitialized_move_if_noexcept_a"},
{"lineNum":"  573","line":"\t\t    (this->_M_impl._M_start, __position.base(),"},
{"lineNum":"  574","line":"\t\t     __new_start, _M_get_Tp_allocator());"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"\t\t  __new_finish += __n;"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"\t\t  __new_finish"},
{"lineNum":"  579","line":"\t\t    = std::__uninitialized_move_if_noexcept_a"},
{"lineNum":"  580","line":"\t\t    (__position.base(), this->_M_impl._M_finish,"},
{"lineNum":"  581","line":"\t\t     __new_finish, _M_get_Tp_allocator());"},
{"lineNum":"  582","line":"\t\t}"},
{"lineNum":"  583","line":"\t      __catch(...)"},
{"lineNum":"  584","line":"\t\t{"},
{"lineNum":"  585","line":"\t\t  if (!__new_finish)"},
{"lineNum":"  586","line":"\t\t    std::_Destroy(__new_start + __elems_before,"},
{"lineNum":"  587","line":"\t\t\t\t  __new_start + __elems_before + __n,"},
{"lineNum":"  588","line":"\t\t\t\t  _M_get_Tp_allocator());"},
{"lineNum":"  589","line":"\t\t  else"},
{"lineNum":"  590","line":"\t\t    std::_Destroy(__new_start, __new_finish,"},
{"lineNum":"  591","line":"\t\t\t\t  _M_get_Tp_allocator());"},
{"lineNum":"  592","line":"\t\t  _M_deallocate(__new_start, __len);"},
{"lineNum":"  593","line":"\t\t  __throw_exception_again;"},
{"lineNum":"  594","line":"\t\t}"},
{"lineNum":"  595","line":"\t      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,"},
{"lineNum":"  596","line":"\t\t\t    _M_get_Tp_allocator());"},
{"lineNum":"  597","line":"\t      _GLIBCXX_ASAN_ANNOTATE_REINIT;"},
{"lineNum":"  598","line":"\t      _M_deallocate(this->_M_impl._M_start,"},
{"lineNum":"  599","line":"\t\t\t    this->_M_impl._M_end_of_storage"},
{"lineNum":"  600","line":"\t\t\t    - this->_M_impl._M_start);"},
{"lineNum":"  601","line":"\t      this->_M_impl._M_start = __new_start;"},
{"lineNum":"  602","line":"\t      this->_M_impl._M_finish = __new_finish;"},
{"lineNum":"  603","line":"\t      this->_M_impl._M_end_of_storage = __new_start + __len;"},
{"lineNum":"  604","line":"\t    }"},
{"lineNum":"  605","line":"\t}"},
{"lineNum":"  606","line":"    }"},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  609","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  610","line":"    void"},
{"lineNum":"  611","line":"    vector<_Tp, _Alloc>::","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  612","line":"    _M_default_append(size_type __n)"},
{"lineNum":"  613","line":"    {"},
{"lineNum":"  614","line":"      if (__n != 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  615","line":"\t{"},
{"lineNum":"  616","line":"\t  const size_type __size = size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  617","line":"\t  size_type __navail = size_type(this->_M_impl._M_end_of_storage","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  618","line":"\t\t\t\t\t - this->_M_impl._M_finish);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  619","line":""},
{"lineNum":"  620","line":"\t  if (__size > max_size() || __navail > max_size() - __size)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  621","line":"\t    __builtin_unreachable();"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"\t  if (__navail >= __n)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  624","line":"\t    {"},
{"lineNum":"  625","line":"\t      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);"},
{"lineNum":"  626","line":"\t      this->_M_impl._M_finish =","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  627","line":"\t\tstd::__uninitialized_default_n_a(this->_M_impl._M_finish,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  628","line":"\t\t\t\t\t\t __n, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  629","line":"\t      _GLIBCXX_ASAN_ANNOTATE_GREW(__n);"},
{"lineNum":"  630","line":"\t    }"},
{"lineNum":"  631","line":"\t  else"},
{"lineNum":"  632","line":"\t    {"},
{"lineNum":"  633","line":"\t      const size_type __len =","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  634","line":"\t\t_M_check_len(__n, \"vector::_M_default_append\");"},
{"lineNum":"  635","line":"\t      pointer __new_start(this->_M_allocate(__len));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  636","line":"\t      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  637","line":"\t\t{"},
{"lineNum":"  638","line":"\t\t  __try"},
{"lineNum":"  639","line":"\t\t    {"},
{"lineNum":"  640","line":"\t\t      std::__uninitialized_default_n_a(__new_start + __size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  641","line":"\t\t\t      __n, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  642","line":"\t\t    }"},
{"lineNum":"  643","line":"\t\t  __catch(...)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  644","line":"\t\t    {"},
{"lineNum":"  645","line":"\t\t      _M_deallocate(__new_start, __len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  646","line":"\t\t      __throw_exception_again;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  647","line":"\t\t    }"},
{"lineNum":"  648","line":"\t\t  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  649","line":"\t\t\t      __new_start, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  650","line":"\t\t}"},
{"lineNum":"  651","line":"\t      else"},
{"lineNum":"  652","line":"\t\t{"},
{"lineNum":"  653","line":"\t\t  pointer __destroy_from = pointer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  654","line":"\t\t  __try"},
{"lineNum":"  655","line":"\t\t    {"},
{"lineNum":"  656","line":"\t\t      std::__uninitialized_default_n_a(__new_start + __size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  657","line":"\t\t\t      __n, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  658","line":"\t\t      __destroy_from = __new_start + __size;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  659","line":"\t\t      std::__uninitialized_move_if_noexcept_a(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  660","line":"\t\t\t      this->_M_impl._M_start, this->_M_impl._M_finish,"},
{"lineNum":"  661","line":"\t\t\t      __new_start, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  662","line":"\t\t    }"},
{"lineNum":"  663","line":"\t\t  __catch(...)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  664","line":"\t\t    {"},
{"lineNum":"  665","line":"\t\t      if (__destroy_from)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  666","line":"\t\t\tstd::_Destroy(__destroy_from, __destroy_from + __n,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  667","line":"\t\t\t\t      _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  668","line":"\t\t      _M_deallocate(__new_start, __len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  669","line":"\t\t      __throw_exception_again;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  670","line":"\t\t    }"},
{"lineNum":"  671","line":"\t\t  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  672","line":"\t\t\t\t_M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  673","line":"\t\t}"},
{"lineNum":"  674","line":"\t      _GLIBCXX_ASAN_ANNOTATE_REINIT;"},
{"lineNum":"  675","line":"\t      _M_deallocate(this->_M_impl._M_start,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  676","line":"\t\t\t    this->_M_impl._M_end_of_storage","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  677","line":"\t\t\t    - this->_M_impl._M_start);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  678","line":"\t      this->_M_impl._M_start = __new_start;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  679","line":"\t      this->_M_impl._M_finish = __new_start + __size + __n;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  680","line":"\t      this->_M_impl._M_end_of_storage = __new_start + __len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  681","line":"\t    }"},
{"lineNum":"  682","line":"\t}"},
{"lineNum":"  683","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  684","line":""},
{"lineNum":"  685","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  686","line":"    bool"},
{"lineNum":"  687","line":"    vector<_Tp, _Alloc>::","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  688","line":"    _M_shrink_to_fit()"},
{"lineNum":"  689","line":"    {"},
{"lineNum":"  690","line":"      if (capacity() == size())","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  691","line":"\treturn false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  692","line":"      _GLIBCXX_ASAN_ANNOTATE_REINIT;"},
{"lineNum":"  693","line":"      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  694","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  695","line":"#endif"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  698","line":"    template<typename _InputIterator>"},
{"lineNum":"  699","line":"      void"},
{"lineNum":"  700","line":"      vector<_Tp, _Alloc>::"},
{"lineNum":"  701","line":"      _M_range_insert(iterator __pos, _InputIterator __first,"},
{"lineNum":"  702","line":"\t\t      _InputIterator __last, std::input_iterator_tag)"},
{"lineNum":"  703","line":"      {"},
{"lineNum":"  704","line":"\tif (__pos == end())"},
{"lineNum":"  705","line":"\t  {"},
{"lineNum":"  706","line":"\t    for (; __first != __last; ++__first)"},
{"lineNum":"  707","line":"\t      insert(end(), *__first);"},
{"lineNum":"  708","line":"\t  }"},
{"lineNum":"  709","line":"\telse if (__first != __last)"},
{"lineNum":"  710","line":"\t  {"},
{"lineNum":"  711","line":"\t    vector __tmp(__first, __last, _M_get_Tp_allocator());"},
{"lineNum":"  712","line":"\t    insert(__pos,"},
{"lineNum":"  713","line":"\t\t   _GLIBCXX_MAKE_MOVE_ITERATOR(__tmp.begin()),"},
{"lineNum":"  714","line":"\t\t   _GLIBCXX_MAKE_MOVE_ITERATOR(__tmp.end()));"},
{"lineNum":"  715","line":"\t  }"},
{"lineNum":"  716","line":"      }"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"  template<typename _Tp, typename _Alloc>"},
{"lineNum":"  719","line":"    template<typename _ForwardIterator>"},
{"lineNum":"  720","line":"      void"},
{"lineNum":"  721","line":"      vector<_Tp, _Alloc>::","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  722","line":"      _M_range_insert(iterator __position, _ForwardIterator __first,"},
{"lineNum":"  723","line":"\t\t      _ForwardIterator __last, std::forward_iterator_tag)"},
{"lineNum":"  724","line":"      {"},
{"lineNum":"  725","line":"\tif (__first != __last)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  726","line":"\t  {"},
{"lineNum":"  727","line":"\t    const size_type __n = std::distance(__first, __last);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  728","line":"\t    if (size_type(this->_M_impl._M_end_of_storage","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  729","line":"\t\t\t  - this->_M_impl._M_finish) >= __n)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  730","line":"\t      {"},
{"lineNum":"  731","line":"\t\tconst size_type __elems_after = end() - __position;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  732","line":"\t\tpointer __old_finish(this->_M_impl._M_finish);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  733","line":"\t\tif (__elems_after > __n)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  734","line":"\t\t  {"},
{"lineNum":"  735","line":"\t\t    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);"},
{"lineNum":"  736","line":"\t\t    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  737","line":"\t\t\t\t\t\tthis->_M_impl._M_finish,"},
{"lineNum":"  738","line":"\t\t\t\t\t\tthis->_M_impl._M_finish,"},
{"lineNum":"  739","line":"\t\t\t\t\t\t_M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  740","line":"\t\t    this->_M_impl._M_finish += __n;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  741","line":"\t\t    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);"},
{"lineNum":"  742","line":"\t\t    _GLIBCXX_MOVE_BACKWARD3(__position.base(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  743","line":"\t\t\t\t\t    __old_finish - __n, __old_finish);"},
{"lineNum":"  744","line":"\t\t    std::copy(__first, __last, __position);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  745","line":"\t\t  }"},
{"lineNum":"  746","line":"\t\telse"},
{"lineNum":"  747","line":"\t\t  {"},
{"lineNum":"  748","line":"\t\t    _ForwardIterator __mid = __first;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  749","line":"\t\t    std::advance(__mid, __elems_after);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  750","line":"\t\t    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);"},
{"lineNum":"  751","line":"\t\t    std::__uninitialized_copy_a(__mid, __last,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  752","line":"\t\t\t\t\t\tthis->_M_impl._M_finish,"},
{"lineNum":"  753","line":"\t\t\t\t\t\t_M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  754","line":"\t\t    this->_M_impl._M_finish += __n - __elems_after;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  755","line":"\t\t    _GLIBCXX_ASAN_ANNOTATE_GREW(__n - __elems_after);"},
{"lineNum":"  756","line":"\t\t    std::__uninitialized_move_a(__position.base(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  757","line":"\t\t\t\t\t\t__old_finish,"},
{"lineNum":"  758","line":"\t\t\t\t\t\tthis->_M_impl._M_finish,"},
{"lineNum":"  759","line":"\t\t\t\t\t\t_M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  760","line":"\t\t    this->_M_impl._M_finish += __elems_after;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  761","line":"\t\t    _GLIBCXX_ASAN_ANNOTATE_GREW(__elems_after);"},
{"lineNum":"  762","line":"\t\t    std::copy(__first, __mid, __position);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  763","line":"\t\t  }"},
{"lineNum":"  764","line":"\t      }"},
{"lineNum":"  765","line":"\t    else"},
{"lineNum":"  766","line":"\t      {"},
{"lineNum":"  767","line":"\t\tconst size_type __len =","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  768","line":"\t\t  _M_check_len(__n, \"vector::_M_range_insert\");"},
{"lineNum":"  769","line":"\t\tpointer __new_start(this->_M_allocate(__len));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  770","line":"\t\tpointer __new_finish(__new_start);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  771","line":"\t\t__try"},
{"lineNum":"  772","line":"\t\t  {"},
{"lineNum":"  773","line":"\t\t    __new_finish"},
{"lineNum":"  774","line":"\t\t      = std::__uninitialized_move_if_noexcept_a"},
{"lineNum":"  775","line":"\t\t      (this->_M_impl._M_start, __position.base(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  776","line":"\t\t       __new_start, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  777","line":"\t\t    __new_finish"},
{"lineNum":"  778","line":"\t\t      = std::__uninitialized_copy_a(__first, __last,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  779","line":"\t\t\t\t\t\t    __new_finish,"},
{"lineNum":"  780","line":"\t\t\t\t\t\t    _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  781","line":"\t\t    __new_finish"},
{"lineNum":"  782","line":"\t\t      = std::__uninitialized_move_if_noexcept_a"},
{"lineNum":"  783","line":"\t\t      (__position.base(), this->_M_impl._M_finish,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  784","line":"\t\t       __new_finish, _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  785","line":"\t\t  }"},
{"lineNum":"  786","line":"\t\t__catch(...)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  787","line":"\t\t  {"},
{"lineNum":"  788","line":"\t\t    std::_Destroy(__new_start, __new_finish,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  789","line":"\t\t\t\t  _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  790","line":"\t\t    _M_deallocate(__new_start, __len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  791","line":"\t\t    __throw_exception_again;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  792","line":"\t\t  }"},
{"lineNum":"  793","line":"\t\tstd::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  794","line":"\t\t\t      _M_get_Tp_allocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  795","line":"\t\t_GLIBCXX_ASAN_ANNOTATE_REINIT;"},
{"lineNum":"  796","line":"\t\t_M_deallocate(this->_M_impl._M_start,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  797","line":"\t\t\t      this->_M_impl._M_end_of_storage","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  798","line":"\t\t\t      - this->_M_impl._M_start);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  799","line":"\t\tthis->_M_impl._M_start = __new_start;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  800","line":"\t\tthis->_M_impl._M_finish = __new_finish;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  801","line":"\t\tthis->_M_impl._M_end_of_storage = __new_start + __len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  802","line":"\t      }"},
{"lineNum":"  803","line":"\t  }"},
{"lineNum":"  804","line":"      }","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  805","line":""},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"  // vector<bool>"},
{"lineNum":"  808","line":"  template<typename _Alloc>"},
{"lineNum":"  809","line":"    void"},
{"lineNum":"  810","line":"    vector<bool, _Alloc>::"},
{"lineNum":"  811","line":"    _M_reallocate(size_type __n)"},
{"lineNum":"  812","line":"    {"},
{"lineNum":"  813","line":"      _Bit_pointer __q = this->_M_allocate(__n);"},
{"lineNum":"  814","line":"      iterator __start(std::__addressof(*__q), 0);"},
{"lineNum":"  815","line":"      iterator __finish(_M_copy_aligned(begin(), end(), __start));"},
{"lineNum":"  816","line":"      this->_M_deallocate();"},
{"lineNum":"  817","line":"      this->_M_impl._M_start = __start;"},
{"lineNum":"  818","line":"      this->_M_impl._M_finish = __finish;"},
{"lineNum":"  819","line":"      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);"},
{"lineNum":"  820","line":"    }"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"  template<typename _Alloc>"},
{"lineNum":"  823","line":"    void"},
{"lineNum":"  824","line":"    vector<bool, _Alloc>::"},
{"lineNum":"  825","line":"    _M_fill_insert(iterator __position, size_type __n, bool __x)"},
{"lineNum":"  826","line":"    {"},
{"lineNum":"  827","line":"      if (__n == 0)"},
{"lineNum":"  828","line":"\treturn;"},
{"lineNum":"  829","line":"      if (capacity() - size() >= __n)"},
{"lineNum":"  830","line":"\t{"},
{"lineNum":"  831","line":"\t  std::copy_backward(__position, end(),"},
{"lineNum":"  832","line":"\t\t\t     this->_M_impl._M_finish + difference_type(__n));"},
{"lineNum":"  833","line":"\t  std::fill(__position, __position + difference_type(__n), __x);"},
{"lineNum":"  834","line":"\t  this->_M_impl._M_finish += difference_type(__n);"},
{"lineNum":"  835","line":"\t}"},
{"lineNum":"  836","line":"      else"},
{"lineNum":"  837","line":"\t{"},
{"lineNum":"  838","line":"\t  const size_type __len ="},
{"lineNum":"  839","line":"\t    _M_check_len(__n, \"vector<bool>::_M_fill_insert\");"},
{"lineNum":"  840","line":"\t  _Bit_pointer __q = this->_M_allocate(__len);"},
{"lineNum":"  841","line":"\t  iterator __start(std::__addressof(*__q), 0);"},
{"lineNum":"  842","line":"\t  iterator __i = _M_copy_aligned(begin(), __position, __start);"},
{"lineNum":"  843","line":"\t  std::fill(__i, __i + difference_type(__n), __x);"},
{"lineNum":"  844","line":"\t  iterator __finish = std::copy(__position, end(),"},
{"lineNum":"  845","line":"\t\t\t\t\t__i + difference_type(__n));"},
{"lineNum":"  846","line":"\t  this->_M_deallocate();"},
{"lineNum":"  847","line":"\t  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);"},
{"lineNum":"  848","line":"\t  this->_M_impl._M_start = __start;"},
{"lineNum":"  849","line":"\t  this->_M_impl._M_finish = __finish;"},
{"lineNum":"  850","line":"\t}"},
{"lineNum":"  851","line":"    }"},
{"lineNum":"  852","line":""},
{"lineNum":"  853","line":"  template<typename _Alloc>"},
{"lineNum":"  854","line":"    template<typename _ForwardIterator>"},
{"lineNum":"  855","line":"      void"},
{"lineNum":"  856","line":"      vector<bool, _Alloc>::"},
{"lineNum":"  857","line":"      _M_insert_range(iterator __position, _ForwardIterator __first,"},
{"lineNum":"  858","line":"\t\t      _ForwardIterator __last, std::forward_iterator_tag)"},
{"lineNum":"  859","line":"      {"},
{"lineNum":"  860","line":"\tif (__first != __last)"},
{"lineNum":"  861","line":"\t  {"},
{"lineNum":"  862","line":"\t    size_type __n = std::distance(__first, __last);"},
{"lineNum":"  863","line":"\t    if (capacity() - size() >= __n)"},
{"lineNum":"  864","line":"\t      {"},
{"lineNum":"  865","line":"\t\tstd::copy_backward(__position, end(),"},
{"lineNum":"  866","line":"\t\t\t\t   this->_M_impl._M_finish"},
{"lineNum":"  867","line":"\t\t\t\t   + difference_type(__n));"},
{"lineNum":"  868","line":"\t\tstd::copy(__first, __last, __position);"},
{"lineNum":"  869","line":"\t\tthis->_M_impl._M_finish += difference_type(__n);"},
{"lineNum":"  870","line":"\t      }"},
{"lineNum":"  871","line":"\t    else"},
{"lineNum":"  872","line":"\t      {"},
{"lineNum":"  873","line":"\t\tconst size_type __len ="},
{"lineNum":"  874","line":"\t\t  _M_check_len(__n, \"vector<bool>::_M_insert_range\");"},
{"lineNum":"  875","line":"\t\t_Bit_pointer __q = this->_M_allocate(__len);"},
{"lineNum":"  876","line":"\t\titerator __start(std::__addressof(*__q), 0);"},
{"lineNum":"  877","line":"\t\titerator __i = _M_copy_aligned(begin(), __position, __start);"},
{"lineNum":"  878","line":"\t\t__i = std::copy(__first, __last, __i);"},
{"lineNum":"  879","line":"\t\titerator __finish = std::copy(__position, end(), __i);"},
{"lineNum":"  880","line":"\t\tthis->_M_deallocate();"},
{"lineNum":"  881","line":"\t\tthis->_M_impl._M_end_of_storage = __q + _S_nword(__len);"},
{"lineNum":"  882","line":"\t\tthis->_M_impl._M_start = __start;"},
{"lineNum":"  883","line":"\t\tthis->_M_impl._M_finish = __finish;"},
{"lineNum":"  884","line":"\t      }"},
{"lineNum":"  885","line":"\t  }"},
{"lineNum":"  886","line":"      }"},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"  template<typename _Alloc>"},
{"lineNum":"  889","line":"    void"},
{"lineNum":"  890","line":"    vector<bool, _Alloc>::"},
{"lineNum":"  891","line":"    _M_insert_aux(iterator __position, bool __x)"},
{"lineNum":"  892","line":"    {"},
{"lineNum":"  893","line":"      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())"},
{"lineNum":"  894","line":"\t{"},
{"lineNum":"  895","line":"\t  std::copy_backward(__position, this->_M_impl._M_finish,"},
{"lineNum":"  896","line":"\t\t\t     this->_M_impl._M_finish + 1);"},
{"lineNum":"  897","line":"\t  *__position = __x;"},
{"lineNum":"  898","line":"\t  ++this->_M_impl._M_finish;"},
{"lineNum":"  899","line":"\t}"},
{"lineNum":"  900","line":"      else"},
{"lineNum":"  901","line":"\t{"},
{"lineNum":"  902","line":"\t  const size_type __len ="},
{"lineNum":"  903","line":"\t    _M_check_len(size_type(1), \"vector<bool>::_M_insert_aux\");"},
{"lineNum":"  904","line":"\t  _Bit_pointer __q = this->_M_allocate(__len);"},
{"lineNum":"  905","line":"\t  iterator __start(std::__addressof(*__q), 0);"},
{"lineNum":"  906","line":"\t  iterator __i = _M_copy_aligned(begin(), __position, __start);"},
{"lineNum":"  907","line":"\t  *__i++ = __x;"},
{"lineNum":"  908","line":"\t  iterator __finish = std::copy(__position, end(), __i);"},
{"lineNum":"  909","line":"\t  this->_M_deallocate();"},
{"lineNum":"  910","line":"\t  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);"},
{"lineNum":"  911","line":"\t  this->_M_impl._M_start = __start;"},
{"lineNum":"  912","line":"\t  this->_M_impl._M_finish = __finish;"},
{"lineNum":"  913","line":"\t}"},
{"lineNum":"  914","line":"    }"},
{"lineNum":"  915","line":""},
{"lineNum":"  916","line":"  template<typename _Alloc>"},
{"lineNum":"  917","line":"    typename vector<bool, _Alloc>::iterator"},
{"lineNum":"  918","line":"    vector<bool, _Alloc>::"},
{"lineNum":"  919","line":"    _M_erase(iterator __position)"},
{"lineNum":"  920","line":"    {"},
{"lineNum":"  921","line":"      if (__position + 1 != end())"},
{"lineNum":"  922","line":"        std::copy(__position + 1, end(), __position);"},
{"lineNum":"  923","line":"      --this->_M_impl._M_finish;"},
{"lineNum":"  924","line":"      return __position;"},
{"lineNum":"  925","line":"    }"},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"  template<typename _Alloc>"},
{"lineNum":"  928","line":"    typename vector<bool, _Alloc>::iterator"},
{"lineNum":"  929","line":"    vector<bool, _Alloc>::"},
{"lineNum":"  930","line":"    _M_erase(iterator __first, iterator __last)"},
{"lineNum":"  931","line":"    {"},
{"lineNum":"  932","line":"      if (__first != __last)"},
{"lineNum":"  933","line":"\t_M_erase_at_end(std::copy(__last, end(), __first));"},
{"lineNum":"  934","line":"      return __first;"},
{"lineNum":"  935","line":"    }"},
{"lineNum":"  936","line":""},
{"lineNum":"  937","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  938","line":"  template<typename _Alloc>"},
{"lineNum":"  939","line":"    bool"},
{"lineNum":"  940","line":"    vector<bool, _Alloc>::"},
{"lineNum":"  941","line":"    _M_shrink_to_fit()"},
{"lineNum":"  942","line":"    {"},
{"lineNum":"  943","line":"      if (capacity() - size() < int(_S_word_bit))"},
{"lineNum":"  944","line":"\treturn false;"},
{"lineNum":"  945","line":"      __try"},
{"lineNum":"  946","line":"\t{"},
{"lineNum":"  947","line":"\t  _M_reallocate(size());"},
{"lineNum":"  948","line":"\t  return true;"},
{"lineNum":"  949","line":"\t}"},
{"lineNum":"  950","line":"      __catch(...)"},
{"lineNum":"  951","line":"\t{ return false; }"},
{"lineNum":"  952","line":"    }"},
{"lineNum":"  953","line":"#endif"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"_GLIBCXX_END_NAMESPACE_CONTAINER"},
{"lineNum":"  956","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  957","line":"} // namespace std"},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"  962","line":"{"},
{"lineNum":"  963","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"  template<typename _Alloc>"},
{"lineNum":"  966","line":"    size_t"},
{"lineNum":"  967","line":"    hash<_GLIBCXX_STD_C::vector<bool, _Alloc>>::"},
{"lineNum":"  968","line":"    operator()(const _GLIBCXX_STD_C::vector<bool, _Alloc>& __b) const noexcept"},
{"lineNum":"  969","line":"    {"},
{"lineNum":"  970","line":"      size_t __hash = 0;"},
{"lineNum":"  971","line":"      using _GLIBCXX_STD_C::_S_word_bit;"},
{"lineNum":"  972","line":"      using _GLIBCXX_STD_C::_Bit_type;"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"      const size_t __words = __b.size() / _S_word_bit;"},
{"lineNum":"  975","line":"      if (__words)"},
{"lineNum":"  976","line":"\t{"},
{"lineNum":"  977","line":"\t  const size_t __clength = __words * sizeof(_Bit_type);"},
{"lineNum":"  978","line":"\t  __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);"},
{"lineNum":"  979","line":"\t}"},
{"lineNum":"  980","line":""},
{"lineNum":"  981","line":"      const size_t __extrabits = __b.size() % _S_word_bit;"},
{"lineNum":"  982","line":"      if (__extrabits)"},
{"lineNum":"  983","line":"\t{"},
{"lineNum":"  984","line":"\t  _Bit_type __hiword = *__b._M_impl._M_finish._M_p;"},
{"lineNum":"  985","line":"\t  __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);"},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"\t  const size_t __clength"},
{"lineNum":"  988","line":"\t    = (__extrabits + __CHAR_BIT__ - 1) / __CHAR_BIT__;"},
{"lineNum":"  989","line":"\t  if (__words)"},
{"lineNum":"  990","line":"\t    __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);"},
{"lineNum":"  991","line":"\t  else"},
{"lineNum":"  992","line":"\t    __hash = std::_Hash_impl::hash(&__hiword, __clength);"},
{"lineNum":"  993","line":"\t}"},
{"lineNum":"  994","line":""},
{"lineNum":"  995","line":"      return __hash;"},
{"lineNum":"  996","line":"    }"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  999","line":"} // namespace std"},
{"lineNum":" 1000","line":""},
{"lineNum":" 1001","line":"#endif // C++11"},
{"lineNum":" 1002","line":""},
{"lineNum":" 1003","line":"#undef _GLIBCXX_ASAN_ANNOTATE_REINIT"},
{"lineNum":" 1004","line":"#undef _GLIBCXX_ASAN_ANNOTATE_GROW"},
{"lineNum":" 1005","line":"#undef _GLIBCXX_ASAN_ANNOTATE_GREW"},
{"lineNum":" 1006","line":"#undef _GLIBCXX_ASAN_ANNOTATE_SHRINK"},
{"lineNum":" 1007","line":""},
{"lineNum":" 1008","line":"#endif /* _VECTOR_TCC */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "bech32_fuzz_2_gcc_instrumented", "date" : "2023-07-28 14:53:55", "instrumented" : 131, "covered" : 0,};
var merged_data = [];
