var data = {lines:[
{"lineNum":"    1","line":"// Move, forward and identity for C++11 + swap -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2007-2019 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/** @file bits/move.h"},
{"lineNum":"   26","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   27","line":" *  Do not attempt to use it directly. @headername{utility}"},
{"lineNum":"   28","line":" */"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"#ifndef _MOVE_H"},
{"lineNum":"   31","line":"#define _MOVE_H 1"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"#include <bits/c++config.h>"},
{"lineNum":"   34","line":"#include <bits/concept_check.h>"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   37","line":"{"},
{"lineNum":"   38","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"  // Used, in C++03 mode too, by allocators, etc."},
{"lineNum":"   41","line":"  /**"},
{"lineNum":"   42","line":"   *  @brief Same as C++11 std::addressof"},
{"lineNum":"   43","line":"   *  @ingroup utilities"},
{"lineNum":"   44","line":"   */"},
{"lineNum":"   45","line":"  template<typename _Tp>"},
{"lineNum":"   46","line":"    inline _GLIBCXX_CONSTEXPR _Tp*"},
{"lineNum":"   47","line":"    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT"},
{"lineNum":"   48","line":"    { return __builtin_addressof(__r); }"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"   53","line":"} // namespace"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"#include <type_traits> // Brings in std::declval too."},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   58","line":"{"},
{"lineNum":"   59","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"  /**"},
{"lineNum":"   62","line":"   *  @addtogroup utilities"},
{"lineNum":"   63","line":"   *  @{"},
{"lineNum":"   64","line":"   */"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"  /**"},
{"lineNum":"   67","line":"   *  @brief  Forward an lvalue."},
{"lineNum":"   68","line":"   *  @return The parameter cast to the specified type."},
{"lineNum":"   69","line":"   *"},
{"lineNum":"   70","line":"   *  This function is used to implement \"perfect forwarding\"."},
{"lineNum":"   71","line":"   */"},
{"lineNum":"   72","line":"  template<typename _Tp>"},
{"lineNum":"   73","line":"    constexpr _Tp&&"},
{"lineNum":"   74","line":"    forward(typename std::remove_reference<_Tp>::type& __t) noexcept","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"    { return static_cast<_Tp&&>(__t); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"  /**"},
{"lineNum":"   78","line":"   *  @brief  Forward an rvalue."},
{"lineNum":"   79","line":"   *  @return The parameter cast to the specified type."},
{"lineNum":"   80","line":"   *"},
{"lineNum":"   81","line":"   *  This function is used to implement \"perfect forwarding\"."},
{"lineNum":"   82","line":"   */"},
{"lineNum":"   83","line":"  template<typename _Tp>"},
{"lineNum":"   84","line":"    constexpr _Tp&&"},
{"lineNum":"   85","line":"    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept"},
{"lineNum":"   86","line":"    {"},
{"lineNum":"   87","line":"      static_assert(!std::is_lvalue_reference<_Tp>::value, \"template argument\""},
{"lineNum":"   88","line":"\t\t    \" substituting _Tp is an lvalue reference type\");"},
{"lineNum":"   89","line":"      return static_cast<_Tp&&>(__t);"},
{"lineNum":"   90","line":"    }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"  /**"},
{"lineNum":"   93","line":"   *  @brief  Convert a value to an rvalue."},
{"lineNum":"   94","line":"   *  @param  __t  A thing of arbitrary type."},
{"lineNum":"   95","line":"   *  @return The parameter cast to an rvalue-reference to allow moving it."},
{"lineNum":"   96","line":"  */"},
{"lineNum":"   97","line":"  template<typename _Tp>"},
{"lineNum":"   98","line":"    constexpr typename std::remove_reference<_Tp>::type&&"},
{"lineNum":"   99","line":"    move(_Tp&& __t) noexcept","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  100","line":"    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"  template<typename _Tp>"},
{"lineNum":"  104","line":"    struct __move_if_noexcept_cond"},
{"lineNum":"  105","line":"    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,"},
{"lineNum":"  106","line":"                    is_copy_constructible<_Tp>>::type { };"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"  /**"},
{"lineNum":"  109","line":"   *  @brief  Conditionally convert a value to an rvalue."},
{"lineNum":"  110","line":"   *  @param  __x  A thing of arbitrary type."},
{"lineNum":"  111","line":"   *  @return The parameter, possibly cast to an rvalue-reference."},
{"lineNum":"  112","line":"   *"},
{"lineNum":"  113","line":"   *  Same as std::move unless the type\'s move constructor could throw and the"},
{"lineNum":"  114","line":"   *  type is copyable, in which case an lvalue-reference is returned instead."},
{"lineNum":"  115","line":"   */"},
{"lineNum":"  116","line":"  template<typename _Tp>"},
{"lineNum":"  117","line":"    constexpr typename"},
{"lineNum":"  118","line":"    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type"},
{"lineNum":"  119","line":"    move_if_noexcept(_Tp& __x) noexcept"},
{"lineNum":"  120","line":"    { return std::move(__x); }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"  // declval, from type_traits."},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"#if __cplusplus > 201402L"},
{"lineNum":"  125","line":"  // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  126","line":"  // 2296. std::addressof should be constexpr"},
{"lineNum":"  127","line":"# define __cpp_lib_addressof_constexpr 201603"},
{"lineNum":"  128","line":"#endif"},
{"lineNum":"  129","line":"  /**"},
{"lineNum":"  130","line":"   *  @brief Returns the actual address of the object or function"},
{"lineNum":"  131","line":"   *         referenced by r, even in the presence of an overloaded"},
{"lineNum":"  132","line":"   *         operator&."},
{"lineNum":"  133","line":"   *  @param  __r  Reference to an object or function."},
{"lineNum":"  134","line":"   *  @return   The actual address."},
{"lineNum":"  135","line":"  */"},
{"lineNum":"  136","line":"  template<typename _Tp>"},
{"lineNum":"  137","line":"    inline _GLIBCXX17_CONSTEXPR _Tp*"},
{"lineNum":"  138","line":"    addressof(_Tp& __r) noexcept"},
{"lineNum":"  139","line":"    { return std::__addressof(__r); }"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"  // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  142","line":"  // 2598. addressof works on temporaries"},
{"lineNum":"  143","line":"  template<typename _Tp>"},
{"lineNum":"  144","line":"    const _Tp* addressof(const _Tp&&) = delete;"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"  // C++11 version of std::exchange for internal use."},
{"lineNum":"  147","line":"  template <typename _Tp, typename _Up = _Tp>"},
{"lineNum":"  148","line":"    inline _Tp"},
{"lineNum":"  149","line":"    __exchange(_Tp& __obj, _Up&& __new_val)"},
{"lineNum":"  150","line":"    {"},
{"lineNum":"  151","line":"      _Tp __old_val = std::move(__obj);"},
{"lineNum":"  152","line":"      __obj = std::forward<_Up>(__new_val);"},
{"lineNum":"  153","line":"      return __old_val;"},
{"lineNum":"  154","line":"    }"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"  /// @} group utilities"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"#define _GLIBCXX_MOVE(__val) std::move(__val)"},
{"lineNum":"  159","line":"#define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)"},
{"lineNum":"  160","line":"#else"},
{"lineNum":"  161","line":"#define _GLIBCXX_MOVE(__val) (__val)"},
{"lineNum":"  162","line":"#define _GLIBCXX_FORWARD(_Tp, __val) (__val)"},
{"lineNum":"  163","line":"#endif"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"  /**"},
{"lineNum":"  166","line":"   *  @addtogroup utilities"},
{"lineNum":"  167","line":"   *  @{"},
{"lineNum":"  168","line":"   */"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"  /**"},
{"lineNum":"  171","line":"   *  @brief Swaps two values."},
{"lineNum":"  172","line":"   *  @param  __a  A thing of arbitrary type."},
{"lineNum":"  173","line":"   *  @param  __b  Another thing of arbitrary type."},
{"lineNum":"  174","line":"   *  @return   Nothing."},
{"lineNum":"  175","line":"  */"},
{"lineNum":"  176","line":"  template<typename _Tp>"},
{"lineNum":"  177","line":"    inline"},
{"lineNum":"  178","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  179","line":"    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,"},
{"lineNum":"  180","line":"\t\t\t      is_move_constructible<_Tp>,"},
{"lineNum":"  181","line":"\t\t\t      is_move_assignable<_Tp>>::value>::type"},
{"lineNum":"  182","line":"    swap(_Tp& __a, _Tp& __b)"},
{"lineNum":"  183","line":"    noexcept(__and_<is_nothrow_move_constructible<_Tp>,"},
{"lineNum":"  184","line":"\t            is_nothrow_move_assignable<_Tp>>::value)"},
{"lineNum":"  185","line":"#else"},
{"lineNum":"  186","line":"    void"},
{"lineNum":"  187","line":"    swap(_Tp& __a, _Tp& __b)"},
{"lineNum":"  188","line":"#endif"},
{"lineNum":"  189","line":"    {"},
{"lineNum":"  190","line":"      // concept requirements"},
{"lineNum":"  191","line":"      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"      _Tp __tmp = _GLIBCXX_MOVE(__a);"},
{"lineNum":"  194","line":"      __a = _GLIBCXX_MOVE(__b);"},
{"lineNum":"  195","line":"      __b = _GLIBCXX_MOVE(__tmp);"},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"  // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  199","line":"  // DR 809. std::swap should be overloaded for array types."},
{"lineNum":"  200","line":"  /// Swap the contents of two arrays."},
{"lineNum":"  201","line":"  template<typename _Tp, size_t _Nm>"},
{"lineNum":"  202","line":"    inline"},
{"lineNum":"  203","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  204","line":"    typename enable_if<__is_swappable<_Tp>::value>::type"},
{"lineNum":"  205","line":"    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])"},
{"lineNum":"  206","line":"    noexcept(__is_nothrow_swappable<_Tp>::value)"},
{"lineNum":"  207","line":"#else"},
{"lineNum":"  208","line":"    void"},
{"lineNum":"  209","line":"    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])"},
{"lineNum":"  210","line":"#endif"},
{"lineNum":"  211","line":"    {"},
{"lineNum":"  212","line":"      for (size_t __n = 0; __n < _Nm; ++__n)"},
{"lineNum":"  213","line":"\tswap(__a[__n], __b[__n]);"},
{"lineNum":"  214","line":"    }"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"  /// @} group utilities"},
{"lineNum":"  217","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  218","line":"} // namespace"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"#endif /* _MOVE_H */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "bech32_fuzz_2_gcc_instrumented", "date" : "2023-07-28 14:53:55", "instrumented" : 4, "covered" : 0,};
var merged_data = [];
