var data = {lines:[
{"lineNum":"    1","line":"// nonstandard construct and destroy functions -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2019 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*"},
{"lineNum":"   26","line":" *"},
{"lineNum":"   27","line":" * Copyright (c) 1994"},
{"lineNum":"   28","line":" * Hewlett-Packard Company"},
{"lineNum":"   29","line":" *"},
{"lineNum":"   30","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   31","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   32","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   33","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   34","line":" * in supporting documentation.  Hewlett-Packard Company makes no"},
{"lineNum":"   35","line":" * representations about the suitability of this software for any"},
{"lineNum":"   36","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   37","line":" *"},
{"lineNum":"   38","line":" *"},
{"lineNum":"   39","line":" * Copyright (c) 1996,1997"},
{"lineNum":"   40","line":" * Silicon Graphics Computer Systems, Inc."},
{"lineNum":"   41","line":" *"},
{"lineNum":"   42","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   43","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   44","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   45","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   46","line":" * in supporting documentation.  Silicon Graphics makes no"},
{"lineNum":"   47","line":" * representations about the suitability of this software for any"},
{"lineNum":"   48","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   49","line":" */"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/** @file bits/stl_construct.h"},
{"lineNum":"   52","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   53","line":" *  Do not attempt to use it directly. @headername{memory}"},
{"lineNum":"   54","line":" */"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#ifndef _STL_CONSTRUCT_H"},
{"lineNum":"   57","line":"#define _STL_CONSTRUCT_H 1"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"#include <new>"},
{"lineNum":"   60","line":"#include <bits/move.h>"},
{"lineNum":"   61","line":"#include <ext/alloc_traits.h>"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   64","line":"{"},
{"lineNum":"   65","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"  /**"},
{"lineNum":"   68","line":"   * Constructs an object in existing memory by invoking an allocated"},
{"lineNum":"   69","line":"   * object\'s constructor with an initializer."},
{"lineNum":"   70","line":"   */"},
{"lineNum":"   71","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   72","line":"  template<typename _T1, typename... _Args>"},
{"lineNum":"   73","line":"    inline void"},
{"lineNum":"   74","line":"    _Construct(_T1* __p, _Args&&... __args)"},
{"lineNum":"   75","line":"    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }"},
{"lineNum":"   76","line":"#else"},
{"lineNum":"   77","line":"  template<typename _T1, typename _T2>"},
{"lineNum":"   78","line":"    inline void"},
{"lineNum":"   79","line":"    _Construct(_T1* __p, const _T2& __value)"},
{"lineNum":"   80","line":"    {"},
{"lineNum":"   81","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"   82","line":"      // 402. wrong new expression in [some_]allocator::construct"},
{"lineNum":"   83","line":"      ::new(static_cast<void*>(__p)) _T1(__value);"},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":"#endif"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"  template<typename _T1>"},
{"lineNum":"   88","line":"    inline void"},
{"lineNum":"   89","line":"    _Construct_novalue(_T1* __p)"},
{"lineNum":"   90","line":"    { ::new(static_cast<void*>(__p)) _T1; }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"  /**"},
{"lineNum":"   93","line":"   * Destroy the object pointed to by a pointer type."},
{"lineNum":"   94","line":"   */"},
{"lineNum":"   95","line":"  template<typename _Tp>"},
{"lineNum":"   96","line":"    inline void"},
{"lineNum":"   97","line":"    _Destroy(_Tp* __pointer)"},
{"lineNum":"   98","line":"    { __pointer->~_Tp(); }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"  template<bool>"},
{"lineNum":"  101","line":"    struct _Destroy_aux"},
{"lineNum":"  102","line":"    {"},
{"lineNum":"  103","line":"      template<typename _ForwardIterator>"},
{"lineNum":"  104","line":"        static void"},
{"lineNum":"  105","line":"        __destroy(_ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":"  106","line":"\t{"},
{"lineNum":"  107","line":"\t  for (; __first != __last; ++__first)"},
{"lineNum":"  108","line":"\t    std::_Destroy(std::__addressof(*__first));"},
{"lineNum":"  109","line":"\t}"},
{"lineNum":"  110","line":"    };"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"  template<>"},
{"lineNum":"  113","line":"    struct _Destroy_aux<true>"},
{"lineNum":"  114","line":"    {"},
{"lineNum":"  115","line":"      template<typename _ForwardIterator>"},
{"lineNum":"  116","line":"        static void"},
{"lineNum":"  117","line":"        __destroy(_ForwardIterator, _ForwardIterator) { }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  118","line":"    };"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"  /**"},
{"lineNum":"  121","line":"   * Destroy a range of objects.  If the value_type of the object has"},
{"lineNum":"  122","line":"   * a trivial destructor, the compiler should optimize all of this"},
{"lineNum":"  123","line":"   * away, otherwise the objects\' destructors must be invoked."},
{"lineNum":"  124","line":"   */"},
{"lineNum":"  125","line":"  template<typename _ForwardIterator>"},
{"lineNum":"  126","line":"    inline void"},
{"lineNum":"  127","line":"    _Destroy(_ForwardIterator __first, _ForwardIterator __last)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"    {"},
{"lineNum":"  129","line":"      typedef typename iterator_traits<_ForwardIterator>::value_type"},
{"lineNum":"  130","line":"                       _Value_type;"},
{"lineNum":"  131","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  132","line":"      // A deleted destructor is trivial, this ensures we reject such types:"},
{"lineNum":"  133","line":"      static_assert(is_destructible<_Value_type>::value,"},
{"lineNum":"  134","line":"\t\t    \"value type is destructible\");"},
{"lineNum":"  135","line":"#endif"},
{"lineNum":"  136","line":"      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::"},
{"lineNum":"  137","line":"\t__destroy(__first, __last);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"  template<bool>"},
{"lineNum":"  141","line":"    struct _Destroy_n_aux"},
{"lineNum":"  142","line":"    {"},
{"lineNum":"  143","line":"      template<typename _ForwardIterator, typename _Size>"},
{"lineNum":"  144","line":"        static _ForwardIterator"},
{"lineNum":"  145","line":"        __destroy_n(_ForwardIterator __first, _Size __count)"},
{"lineNum":"  146","line":"\t{"},
{"lineNum":"  147","line":"\t  for (; __count > 0; (void)++__first, --__count)"},
{"lineNum":"  148","line":"\t    std::_Destroy(std::__addressof(*__first));"},
{"lineNum":"  149","line":"\t  return __first;"},
{"lineNum":"  150","line":"\t}"},
{"lineNum":"  151","line":"    };"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"  template<>"},
{"lineNum":"  154","line":"    struct _Destroy_n_aux<true>"},
{"lineNum":"  155","line":"    {"},
{"lineNum":"  156","line":"      template<typename _ForwardIterator, typename _Size>"},
{"lineNum":"  157","line":"        static _ForwardIterator"},
{"lineNum":"  158","line":"        __destroy_n(_ForwardIterator __first, _Size __count)"},
{"lineNum":"  159","line":"\t{"},
{"lineNum":"  160","line":"\t  std::advance(__first, __count);"},
{"lineNum":"  161","line":"\t  return __first;"},
{"lineNum":"  162","line":"\t}"},
{"lineNum":"  163","line":"    };"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"  /**"},
{"lineNum":"  166","line":"   * Destroy a range of objects.  If the value_type of the object has"},
{"lineNum":"  167","line":"   * a trivial destructor, the compiler should optimize all of this"},
{"lineNum":"  168","line":"   * away, otherwise the objects\' destructors must be invoked."},
{"lineNum":"  169","line":"   */"},
{"lineNum":"  170","line":"  template<typename _ForwardIterator, typename _Size>"},
{"lineNum":"  171","line":"    inline _ForwardIterator"},
{"lineNum":"  172","line":"    _Destroy_n(_ForwardIterator __first, _Size __count)"},
{"lineNum":"  173","line":"    {"},
{"lineNum":"  174","line":"      typedef typename iterator_traits<_ForwardIterator>::value_type"},
{"lineNum":"  175","line":"                       _Value_type;"},
{"lineNum":"  176","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  177","line":"      // A deleted destructor is trivial, this ensures we reject such types:"},
{"lineNum":"  178","line":"      static_assert(is_destructible<_Value_type>::value,"},
{"lineNum":"  179","line":"\t\t    \"value type is destructible\");"},
{"lineNum":"  180","line":"#endif"},
{"lineNum":"  181","line":"      return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::"},
{"lineNum":"  182","line":"\t__destroy_n(__first, __count);"},
{"lineNum":"  183","line":"    }"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"  /**"},
{"lineNum":"  186","line":"   * Destroy a range of objects using the supplied allocator.  For"},
{"lineNum":"  187","line":"   * nondefault allocators we do not optimize away invocation of"},
{"lineNum":"  188","line":"   * destroy() even if _Tp has a trivial destructor."},
{"lineNum":"  189","line":"   */"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"  template<typename _ForwardIterator, typename _Allocator>"},
{"lineNum":"  192","line":"    void"},
{"lineNum":"  193","line":"    _Destroy(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  194","line":"\t     _Allocator& __alloc)"},
{"lineNum":"  195","line":"    {"},
{"lineNum":"  196","line":"      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;"},
{"lineNum":"  197","line":"      for (; __first != __last; ++__first)"},
{"lineNum":"  198","line":"\t__traits::destroy(__alloc, std::__addressof(*__first));"},
{"lineNum":"  199","line":"    }"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"  template<typename _ForwardIterator, typename _Tp>"},
{"lineNum":"  202","line":"    inline void"},
{"lineNum":"  203","line":"    _Destroy(_ForwardIterator __first, _ForwardIterator __last,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":"\t     allocator<_Tp>&)"},
{"lineNum":"  205","line":"    {"},
{"lineNum":"  206","line":"      _Destroy(__first, __last);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"#if __cplusplus > 201402L"},
{"lineNum":"  210","line":"  template <typename _Tp>"},
{"lineNum":"  211","line":"    inline void"},
{"lineNum":"  212","line":"    destroy_at(_Tp* __location)"},
{"lineNum":"  213","line":"    {"},
{"lineNum":"  214","line":"      std::_Destroy(__location);"},
{"lineNum":"  215","line":"    }"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"  template <typename _ForwardIterator>"},
{"lineNum":"  218","line":"    inline void"},
{"lineNum":"  219","line":"    destroy(_ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":"  220","line":"    {"},
{"lineNum":"  221","line":"      std::_Destroy(__first, __last);"},
{"lineNum":"  222","line":"    }"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"  template <typename _ForwardIterator, typename _Size>"},
{"lineNum":"  225","line":"    inline _ForwardIterator"},
{"lineNum":"  226","line":"    destroy_n(_ForwardIterator __first, _Size __count)"},
{"lineNum":"  227","line":"    {"},
{"lineNum":"  228","line":"      return std::_Destroy_n(__first, __count);"},
{"lineNum":"  229","line":"    }"},
{"lineNum":"  230","line":"#endif"},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  233","line":"} // namespace std"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"#endif /* _STL_CONSTRUCT_H */"},
{"lineNum":"  236","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "bech32_fuzz_2_gcc_instrumented", "date" : "2023-07-28 14:53:55", "instrumented" : 7, "covered" : 0,};
var merged_data = [];
