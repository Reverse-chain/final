var data = {lines:[
{"lineNum":"    1","line":"// Iterators -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2019 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*"},
{"lineNum":"   26","line":" *"},
{"lineNum":"   27","line":" * Copyright (c) 1994"},
{"lineNum":"   28","line":" * Hewlett-Packard Company"},
{"lineNum":"   29","line":" *"},
{"lineNum":"   30","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   31","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   32","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   33","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   34","line":" * in supporting documentation.  Hewlett-Packard Company makes no"},
{"lineNum":"   35","line":" * representations about the suitability of this software for any"},
{"lineNum":"   36","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   37","line":" *"},
{"lineNum":"   38","line":" *"},
{"lineNum":"   39","line":" * Copyright (c) 1996-1998"},
{"lineNum":"   40","line":" * Silicon Graphics Computer Systems, Inc."},
{"lineNum":"   41","line":" *"},
{"lineNum":"   42","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   43","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   44","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   45","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   46","line":" * in supporting documentation.  Silicon Graphics makes no"},
{"lineNum":"   47","line":" * representations about the suitability of this software for any"},
{"lineNum":"   48","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   49","line":" */"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/** @file bits/stl_iterator.h"},
{"lineNum":"   52","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   53","line":" *  Do not attempt to use it directly. @headername{iterator}"},
{"lineNum":"   54","line":" *"},
{"lineNum":"   55","line":" *  This file implements reverse_iterator, back_insert_iterator,"},
{"lineNum":"   56","line":" *  front_insert_iterator, insert_iterator, __normal_iterator, and their"},
{"lineNum":"   57","line":" *  supporting functions and overloaded operators."},
{"lineNum":"   58","line":" */"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"#ifndef _STL_ITERATOR_H"},
{"lineNum":"   61","line":"#define _STL_ITERATOR_H 1"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"#include <bits/cpp_type_traits.h>"},
{"lineNum":"   64","line":"#include <ext/type_traits.h>"},
{"lineNum":"   65","line":"#include <bits/move.h>"},
{"lineNum":"   66","line":"#include <bits/ptr_traits.h>"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   69","line":"# include <type_traits>"},
{"lineNum":"   70","line":"#endif"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"#if __cplusplus >= 201703L"},
{"lineNum":"   73","line":"# define __cpp_lib_array_constexpr 201803L"},
{"lineNum":"   74","line":"#endif"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   77","line":"{"},
{"lineNum":"   78","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"  /**"},
{"lineNum":"   81","line":"   * @addtogroup iterators"},
{"lineNum":"   82","line":"   * @{"},
{"lineNum":"   83","line":"   */"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"  // 24.4.1 Reverse iterators"},
{"lineNum":"   86","line":"  /**"},
{"lineNum":"   87","line":"   *  Bidirectional and random access iterators have corresponding reverse"},
{"lineNum":"   88","line":"   *  %iterator adaptors that iterate through the data structure in the"},
{"lineNum":"   89","line":"   *  opposite direction.  They have the same signatures as the corresponding"},
{"lineNum":"   90","line":"   *  iterators.  The fundamental relation between a reverse %iterator and its"},
{"lineNum":"   91","line":"   *  corresponding %iterator @c i is established by the identity:"},
{"lineNum":"   92","line":"   *  @code"},
{"lineNum":"   93","line":"   *      &*(reverse_iterator(i)) == &*(i - 1)"},
{"lineNum":"   94","line":"   *  @endcode"},
{"lineNum":"   95","line":"   *"},
{"lineNum":"   96","line":"   *  <em>This mapping is dictated by the fact that while there is always a"},
{"lineNum":"   97","line":"   *  pointer past the end of an array, there might not be a valid pointer"},
{"lineNum":"   98","line":"   *  before the beginning of an array.</em> [24.4.1]/1,2"},
{"lineNum":"   99","line":"   *"},
{"lineNum":"  100","line":"   *  Reverse iterators can be tricky and surprising at first.  Their"},
{"lineNum":"  101","line":"   *  semantics make sense, however, and the trickiness is a side effect of"},
{"lineNum":"  102","line":"   *  the requirement that the iterators must be safe."},
{"lineNum":"  103","line":"  */"},
{"lineNum":"  104","line":"  template<typename _Iterator>"},
{"lineNum":"  105","line":"    class reverse_iterator"},
{"lineNum":"  106","line":"    : public iterator<typename iterator_traits<_Iterator>::iterator_category,"},
{"lineNum":"  107","line":"\t\t      typename iterator_traits<_Iterator>::value_type,"},
{"lineNum":"  108","line":"\t\t      typename iterator_traits<_Iterator>::difference_type,"},
{"lineNum":"  109","line":"\t\t      typename iterator_traits<_Iterator>::pointer,"},
{"lineNum":"  110","line":"                      typename iterator_traits<_Iterator>::reference>"},
{"lineNum":"  111","line":"    {"},
{"lineNum":"  112","line":"    protected:"},
{"lineNum":"  113","line":"      _Iterator current;"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"      typedef iterator_traits<_Iterator>\t\t__traits_type;"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    public:"},
{"lineNum":"  118","line":"      typedef _Iterator\t\t\t\t\titerator_type;"},
{"lineNum":"  119","line":"      typedef typename __traits_type::difference_type\tdifference_type;"},
{"lineNum":"  120","line":"      typedef typename __traits_type::pointer\t\tpointer;"},
{"lineNum":"  121","line":"      typedef typename __traits_type::reference\t\treference;"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"      /**"},
{"lineNum":"  124","line":"       *  The default constructor value-initializes member @p current."},
{"lineNum":"  125","line":"       *  If it is a pointer, that means it is zero-initialized."},
{"lineNum":"  126","line":"      */"},
{"lineNum":"  127","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  128","line":"      // 235 No specification of default ctor for reverse_iterator"},
{"lineNum":"  129","line":"      // 1012. reverse_iterator default ctor should value initialize"},
{"lineNum":"  130","line":"      _GLIBCXX17_CONSTEXPR"},
{"lineNum":"  131","line":"      reverse_iterator() : current() { }"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"      /**"},
{"lineNum":"  134","line":"       *  This %iterator will move in the opposite direction that @p x does."},
{"lineNum":"  135","line":"      */"},
{"lineNum":"  136","line":"      explicit _GLIBCXX17_CONSTEXPR"},
{"lineNum":"  137","line":"      reverse_iterator(iterator_type __x) : current(__x) { }"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"      /**"},
{"lineNum":"  140","line":"       *  The copy constructor is normal."},
{"lineNum":"  141","line":"      */"},
{"lineNum":"  142","line":"      _GLIBCXX17_CONSTEXPR"},
{"lineNum":"  143","line":"      reverse_iterator(const reverse_iterator& __x)"},
{"lineNum":"  144","line":"      : current(__x.current) { }"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  147","line":"      reverse_iterator& operator=(const reverse_iterator&) = default;"},
{"lineNum":"  148","line":"#endif"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"      /**"},
{"lineNum":"  151","line":"       *  A %reverse_iterator across other types can be copied if the"},
{"lineNum":"  152","line":"       *  underlying %iterator can be converted to the type of @c current."},
{"lineNum":"  153","line":"      */"},
{"lineNum":"  154","line":"      template<typename _Iter>"},
{"lineNum":"  155","line":"\t_GLIBCXX17_CONSTEXPR"},
{"lineNum":"  156","line":"        reverse_iterator(const reverse_iterator<_Iter>& __x)"},
{"lineNum":"  157","line":"\t: current(__x.base()) { }"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"      /**"},
{"lineNum":"  160","line":"       *  @return  @c current, the %iterator used for underlying work."},
{"lineNum":"  161","line":"      */"},
{"lineNum":"  162","line":"      _GLIBCXX17_CONSTEXPR iterator_type"},
{"lineNum":"  163","line":"      base() const"},
{"lineNum":"  164","line":"      { return current; }"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"      /**"},
{"lineNum":"  167","line":"       *  @return  A reference to the value at @c --current"},
{"lineNum":"  168","line":"       *"},
{"lineNum":"  169","line":"       *  This requires that @c --current is dereferenceable."},
{"lineNum":"  170","line":"       *"},
{"lineNum":"  171","line":"       *  @warning This implementation requires that for an iterator of the"},
{"lineNum":"  172","line":"       *           underlying iterator type, @c x, a reference obtained by"},
{"lineNum":"  173","line":"       *           @c *x remains valid after @c x has been modified or"},
{"lineNum":"  174","line":"       *           destroyed. This is a bug: http://gcc.gnu.org/PR51823"},
{"lineNum":"  175","line":"      */"},
{"lineNum":"  176","line":"      _GLIBCXX17_CONSTEXPR reference"},
{"lineNum":"  177","line":"      operator*() const"},
{"lineNum":"  178","line":"      {"},
{"lineNum":"  179","line":"\t_Iterator __tmp = current;"},
{"lineNum":"  180","line":"\treturn *--__tmp;"},
{"lineNum":"  181","line":"      }"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"      /**"},
{"lineNum":"  184","line":"       *  @return  A pointer to the value at @c --current"},
{"lineNum":"  185","line":"       *"},
{"lineNum":"  186","line":"       *  This requires that @c --current is dereferenceable."},
{"lineNum":"  187","line":"      */"},
{"lineNum":"  188","line":"      _GLIBCXX17_CONSTEXPR pointer"},
{"lineNum":"  189","line":"      operator->() const"},
{"lineNum":"  190","line":"      {"},
{"lineNum":"  191","line":"\t// _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  192","line":"\t// 1052. operator-> should also support smart pointers"},
{"lineNum":"  193","line":"\t_Iterator __tmp = current;"},
{"lineNum":"  194","line":"\t--__tmp;"},
{"lineNum":"  195","line":"\treturn _S_to_pointer(__tmp);"},
{"lineNum":"  196","line":"      }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"      /**"},
{"lineNum":"  199","line":"       *  @return  @c *this"},
{"lineNum":"  200","line":"       *"},
{"lineNum":"  201","line":"       *  Decrements the underlying iterator."},
{"lineNum":"  202","line":"      */"},
{"lineNum":"  203","line":"      _GLIBCXX17_CONSTEXPR reverse_iterator&"},
{"lineNum":"  204","line":"      operator++()"},
{"lineNum":"  205","line":"      {"},
{"lineNum":"  206","line":"\t--current;"},
{"lineNum":"  207","line":"\treturn *this;"},
{"lineNum":"  208","line":"      }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"      /**"},
{"lineNum":"  211","line":"       *  @return  The original value of @c *this"},
{"lineNum":"  212","line":"       *"},
{"lineNum":"  213","line":"       *  Decrements the underlying iterator."},
{"lineNum":"  214","line":"      */"},
{"lineNum":"  215","line":"      _GLIBCXX17_CONSTEXPR reverse_iterator"},
{"lineNum":"  216","line":"      operator++(int)"},
{"lineNum":"  217","line":"      {"},
{"lineNum":"  218","line":"\treverse_iterator __tmp = *this;"},
{"lineNum":"  219","line":"\t--current;"},
{"lineNum":"  220","line":"\treturn __tmp;"},
{"lineNum":"  221","line":"      }"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"      /**"},
{"lineNum":"  224","line":"       *  @return  @c *this"},
{"lineNum":"  225","line":"       *"},
{"lineNum":"  226","line":"       *  Increments the underlying iterator."},
{"lineNum":"  227","line":"      */"},
{"lineNum":"  228","line":"      _GLIBCXX17_CONSTEXPR reverse_iterator&"},
{"lineNum":"  229","line":"      operator--()"},
{"lineNum":"  230","line":"      {"},
{"lineNum":"  231","line":"\t++current;"},
{"lineNum":"  232","line":"\treturn *this;"},
{"lineNum":"  233","line":"      }"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"      /**"},
{"lineNum":"  236","line":"       *  @return  A reverse_iterator with the previous value of @c *this"},
{"lineNum":"  237","line":"       *"},
{"lineNum":"  238","line":"       *  Increments the underlying iterator."},
{"lineNum":"  239","line":"      */"},
{"lineNum":"  240","line":"      _GLIBCXX17_CONSTEXPR reverse_iterator"},
{"lineNum":"  241","line":"      operator--(int)"},
{"lineNum":"  242","line":"      {"},
{"lineNum":"  243","line":"\treverse_iterator __tmp = *this;"},
{"lineNum":"  244","line":"\t++current;"},
{"lineNum":"  245","line":"\treturn __tmp;"},
{"lineNum":"  246","line":"      }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"      /**"},
{"lineNum":"  249","line":"       *  @return  A reverse_iterator that refers to @c current - @a __n"},
{"lineNum":"  250","line":"       *"},
{"lineNum":"  251","line":"       *  The underlying iterator must be a Random Access Iterator."},
{"lineNum":"  252","line":"      */"},
{"lineNum":"  253","line":"      _GLIBCXX17_CONSTEXPR reverse_iterator"},
{"lineNum":"  254","line":"      operator+(difference_type __n) const"},
{"lineNum":"  255","line":"      { return reverse_iterator(current - __n); }"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"      /**"},
{"lineNum":"  258","line":"       *  @return  *this"},
{"lineNum":"  259","line":"       *"},
{"lineNum":"  260","line":"       *  Moves the underlying iterator backwards @a __n steps."},
{"lineNum":"  261","line":"       *  The underlying iterator must be a Random Access Iterator."},
{"lineNum":"  262","line":"      */"},
{"lineNum":"  263","line":"      _GLIBCXX17_CONSTEXPR reverse_iterator&"},
{"lineNum":"  264","line":"      operator+=(difference_type __n)"},
{"lineNum":"  265","line":"      {"},
{"lineNum":"  266","line":"\tcurrent -= __n;"},
{"lineNum":"  267","line":"\treturn *this;"},
{"lineNum":"  268","line":"      }"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"      /**"},
{"lineNum":"  271","line":"       *  @return  A reverse_iterator that refers to @c current - @a __n"},
{"lineNum":"  272","line":"       *"},
{"lineNum":"  273","line":"       *  The underlying iterator must be a Random Access Iterator."},
{"lineNum":"  274","line":"      */"},
{"lineNum":"  275","line":"      _GLIBCXX17_CONSTEXPR reverse_iterator"},
{"lineNum":"  276","line":"      operator-(difference_type __n) const"},
{"lineNum":"  277","line":"      { return reverse_iterator(current + __n); }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"      /**"},
{"lineNum":"  280","line":"       *  @return  *this"},
{"lineNum":"  281","line":"       *"},
{"lineNum":"  282","line":"       *  Moves the underlying iterator forwards @a __n steps."},
{"lineNum":"  283","line":"       *  The underlying iterator must be a Random Access Iterator."},
{"lineNum":"  284","line":"      */"},
{"lineNum":"  285","line":"      _GLIBCXX17_CONSTEXPR reverse_iterator&"},
{"lineNum":"  286","line":"      operator-=(difference_type __n)"},
{"lineNum":"  287","line":"      {"},
{"lineNum":"  288","line":"\tcurrent += __n;"},
{"lineNum":"  289","line":"\treturn *this;"},
{"lineNum":"  290","line":"      }"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"      /**"},
{"lineNum":"  293","line":"       *  @return  The value at @c current - @a __n - 1"},
{"lineNum":"  294","line":"       *"},
{"lineNum":"  295","line":"       *  The underlying iterator must be a Random Access Iterator."},
{"lineNum":"  296","line":"      */"},
{"lineNum":"  297","line":"      _GLIBCXX17_CONSTEXPR reference"},
{"lineNum":"  298","line":"      operator[](difference_type __n) const"},
{"lineNum":"  299","line":"      { return *(*this + __n); }"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"    private:"},
{"lineNum":"  302","line":"      template<typename _Tp>"},
{"lineNum":"  303","line":"\tstatic _GLIBCXX17_CONSTEXPR _Tp*"},
{"lineNum":"  304","line":"\t_S_to_pointer(_Tp* __p)"},
{"lineNum":"  305","line":"        { return __p; }"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"      template<typename _Tp>"},
{"lineNum":"  308","line":"\tstatic _GLIBCXX17_CONSTEXPR pointer"},
{"lineNum":"  309","line":"\t_S_to_pointer(_Tp __t)"},
{"lineNum":"  310","line":"        { return __t.operator->(); }"},
{"lineNum":"  311","line":"    };"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"  ///@{"},
{"lineNum":"  314","line":"  /**"},
{"lineNum":"  315","line":"   *  @param  __x  A %reverse_iterator."},
{"lineNum":"  316","line":"   *  @param  __y  A %reverse_iterator."},
{"lineNum":"  317","line":"   *  @return  A simple bool."},
{"lineNum":"  318","line":"   *"},
{"lineNum":"  319","line":"   *  Reverse iterators forward many operations to their underlying base()"},
{"lineNum":"  320","line":"   *  iterators.  Others are implemented in terms of one another."},
{"lineNum":"  321","line":"   *"},
{"lineNum":"  322","line":"  */"},
{"lineNum":"  323","line":"  template<typename _Iterator>"},
{"lineNum":"  324","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":"  325","line":"    operator==(const reverse_iterator<_Iterator>& __x,"},
{"lineNum":"  326","line":"\t       const reverse_iterator<_Iterator>& __y)"},
{"lineNum":"  327","line":"    { return __x.base() == __y.base(); }"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"  template<typename _Iterator>"},
{"lineNum":"  330","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":"  331","line":"    operator<(const reverse_iterator<_Iterator>& __x,"},
{"lineNum":"  332","line":"\t      const reverse_iterator<_Iterator>& __y)"},
{"lineNum":"  333","line":"    { return __y.base() < __x.base(); }"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"  template<typename _Iterator>"},
{"lineNum":"  336","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":"  337","line":"    operator!=(const reverse_iterator<_Iterator>& __x,"},
{"lineNum":"  338","line":"\t       const reverse_iterator<_Iterator>& __y)"},
{"lineNum":"  339","line":"    { return !(__x == __y); }"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"  template<typename _Iterator>"},
{"lineNum":"  342","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":"  343","line":"    operator>(const reverse_iterator<_Iterator>& __x,"},
{"lineNum":"  344","line":"\t      const reverse_iterator<_Iterator>& __y)"},
{"lineNum":"  345","line":"    { return __y < __x; }"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"  template<typename _Iterator>"},
{"lineNum":"  348","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":"  349","line":"    operator<=(const reverse_iterator<_Iterator>& __x,"},
{"lineNum":"  350","line":"\t       const reverse_iterator<_Iterator>& __y)"},
{"lineNum":"  351","line":"    { return !(__y < __x); }"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"  template<typename _Iterator>"},
{"lineNum":"  354","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":"  355","line":"    operator>=(const reverse_iterator<_Iterator>& __x,"},
{"lineNum":"  356","line":"\t       const reverse_iterator<_Iterator>& __y)"},
{"lineNum":"  357","line":"    { return !(__x < __y); }"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"  // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  360","line":"  // DR 280. Comparison of reverse_iterator to const reverse_iterator."},
{"lineNum":"  361","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":"  362","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":"  363","line":"    operator==(const reverse_iterator<_IteratorL>& __x,"},
{"lineNum":"  364","line":"\t       const reverse_iterator<_IteratorR>& __y)"},
{"lineNum":"  365","line":"    { return __x.base() == __y.base(); }"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":"  368","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":"  369","line":"    operator<(const reverse_iterator<_IteratorL>& __x,"},
{"lineNum":"  370","line":"\t      const reverse_iterator<_IteratorR>& __y)"},
{"lineNum":"  371","line":"    { return __y.base() < __x.base(); }"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":"  374","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":"  375","line":"    operator!=(const reverse_iterator<_IteratorL>& __x,"},
{"lineNum":"  376","line":"\t       const reverse_iterator<_IteratorR>& __y)"},
{"lineNum":"  377","line":"    { return !(__x == __y); }"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":"  380","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":"  381","line":"    operator>(const reverse_iterator<_IteratorL>& __x,"},
{"lineNum":"  382","line":"\t      const reverse_iterator<_IteratorR>& __y)"},
{"lineNum":"  383","line":"    { return __y < __x; }"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":"  386","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":"  387","line":"    operator<=(const reverse_iterator<_IteratorL>& __x,"},
{"lineNum":"  388","line":"\t       const reverse_iterator<_IteratorR>& __y)"},
{"lineNum":"  389","line":"    { return !(__y < __x); }"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":"  392","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":"  393","line":"    operator>=(const reverse_iterator<_IteratorL>& __x,"},
{"lineNum":"  394","line":"\t       const reverse_iterator<_IteratorR>& __y)"},
{"lineNum":"  395","line":"    { return !(__x < __y); }"},
{"lineNum":"  396","line":"  ///@}"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"#if __cplusplus < 201103L"},
{"lineNum":"  399","line":"  template<typename _Iterator>"},
{"lineNum":"  400","line":"    inline typename reverse_iterator<_Iterator>::difference_type"},
{"lineNum":"  401","line":"    operator-(const reverse_iterator<_Iterator>& __x,"},
{"lineNum":"  402","line":"\t      const reverse_iterator<_Iterator>& __y)"},
{"lineNum":"  403","line":"    { return __y.base() - __x.base(); }"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":"  406","line":"    inline typename reverse_iterator<_IteratorL>::difference_type"},
{"lineNum":"  407","line":"    operator-(const reverse_iterator<_IteratorL>& __x,"},
{"lineNum":"  408","line":"\t      const reverse_iterator<_IteratorR>& __y)"},
{"lineNum":"  409","line":"    { return __y.base() - __x.base(); }"},
{"lineNum":"  410","line":"#else"},
{"lineNum":"  411","line":"  // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  412","line":"  // DR 685. reverse_iterator/move_iterator difference has invalid signatures"},
{"lineNum":"  413","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":"  414","line":"    inline _GLIBCXX17_CONSTEXPR auto"},
{"lineNum":"  415","line":"    operator-(const reverse_iterator<_IteratorL>& __x,"},
{"lineNum":"  416","line":"\t      const reverse_iterator<_IteratorR>& __y)"},
{"lineNum":"  417","line":"    -> decltype(__y.base() - __x.base())"},
{"lineNum":"  418","line":"    { return __y.base() - __x.base(); }"},
{"lineNum":"  419","line":"#endif"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"  template<typename _Iterator>"},
{"lineNum":"  422","line":"    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>"},
{"lineNum":"  423","line":"    operator+(typename reverse_iterator<_Iterator>::difference_type __n,"},
{"lineNum":"  424","line":"\t      const reverse_iterator<_Iterator>& __x)"},
{"lineNum":"  425","line":"    { return reverse_iterator<_Iterator>(__x.base() - __n); }"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  428","line":"  // Same as C++14 make_reverse_iterator but used in C++11 mode too."},
{"lineNum":"  429","line":"  template<typename _Iterator>"},
{"lineNum":"  430","line":"    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>"},
{"lineNum":"  431","line":"    __make_reverse_iterator(_Iterator __i)"},
{"lineNum":"  432","line":"    { return reverse_iterator<_Iterator>(__i); }"},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"# if __cplusplus > 201103L"},
{"lineNum":"  435","line":"#  define __cpp_lib_make_reverse_iterator 201402"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"  // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  438","line":"  // DR 2285. make_reverse_iterator"},
{"lineNum":"  439","line":"  /// Generator function for reverse_iterator."},
{"lineNum":"  440","line":"  template<typename _Iterator>"},
{"lineNum":"  441","line":"    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>"},
{"lineNum":"  442","line":"    make_reverse_iterator(_Iterator __i)"},
{"lineNum":"  443","line":"    { return reverse_iterator<_Iterator>(__i); }"},
{"lineNum":"  444","line":"# endif"},
{"lineNum":"  445","line":"#endif"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  448","line":"  template<typename _Iterator>"},
{"lineNum":"  449","line":"    auto"},
{"lineNum":"  450","line":"    __niter_base(reverse_iterator<_Iterator> __it)"},
{"lineNum":"  451","line":"    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))"},
{"lineNum":"  452","line":"    { return __make_reverse_iterator(__niter_base(__it.base())); }"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"  template<typename _Iterator>"},
{"lineNum":"  455","line":"    struct __is_move_iterator<reverse_iterator<_Iterator> >"},
{"lineNum":"  456","line":"      : __is_move_iterator<_Iterator>"},
{"lineNum":"  457","line":"    { };"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"  template<typename _Iterator>"},
{"lineNum":"  460","line":"    auto"},
{"lineNum":"  461","line":"    __miter_base(reverse_iterator<_Iterator> __it)"},
{"lineNum":"  462","line":"    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))"},
{"lineNum":"  463","line":"    { return __make_reverse_iterator(__miter_base(__it.base())); }"},
{"lineNum":"  464","line":"#endif"},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"  // 24.4.2.2.1 back_insert_iterator"},
{"lineNum":"  467","line":"  /**"},
{"lineNum":"  468","line":"   *  @brief  Turns assignment into insertion."},
{"lineNum":"  469","line":"   *"},
{"lineNum":"  470","line":"   *  These are output iterators, constructed from a container-of-T."},
{"lineNum":"  471","line":"   *  Assigning a T to the iterator appends it to the container using"},
{"lineNum":"  472","line":"   *  push_back."},
{"lineNum":"  473","line":"   *"},
{"lineNum":"  474","line":"   *  Tip:  Using the back_inserter function to create these iterators can"},
{"lineNum":"  475","line":"   *  save typing."},
{"lineNum":"  476","line":"  */"},
{"lineNum":"  477","line":"  template<typename _Container>"},
{"lineNum":"  478","line":"    class back_insert_iterator"},
{"lineNum":"  479","line":"    : public iterator<output_iterator_tag, void, void, void, void>"},
{"lineNum":"  480","line":"    {"},
{"lineNum":"  481","line":"    protected:"},
{"lineNum":"  482","line":"      _Container* container;"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    public:"},
{"lineNum":"  485","line":"      /// A nested typedef for the type of whatever container you used."},
{"lineNum":"  486","line":"      typedef _Container          container_type;"},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"      /// The only way to create this %iterator is with a container."},
{"lineNum":"  489","line":"      explicit"},
{"lineNum":"  490","line":"      back_insert_iterator(_Container& __x)"},
{"lineNum":"  491","line":"      : container(std::__addressof(__x)) { }"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"      /**"},
{"lineNum":"  494","line":"       *  @param  __value  An instance of whatever type"},
{"lineNum":"  495","line":"       *                 container_type::const_reference is; presumably a"},
{"lineNum":"  496","line":"       *                 reference-to-const T for container<T>."},
{"lineNum":"  497","line":"       *  @return  This %iterator, for chained operations."},
{"lineNum":"  498","line":"       *"},
{"lineNum":"  499","line":"       *  This kind of %iterator doesn\'t really have a @a position in the"},
{"lineNum":"  500","line":"       *  container (you can think of the position as being permanently at"},
{"lineNum":"  501","line":"       *  the end, if you like).  Assigning a value to the %iterator will"},
{"lineNum":"  502","line":"       *  always append the value to the end of the container."},
{"lineNum":"  503","line":"      */"},
{"lineNum":"  504","line":"#if __cplusplus < 201103L"},
{"lineNum":"  505","line":"      back_insert_iterator&"},
{"lineNum":"  506","line":"      operator=(typename _Container::const_reference __value)"},
{"lineNum":"  507","line":"      {"},
{"lineNum":"  508","line":"\tcontainer->push_back(__value);"},
{"lineNum":"  509","line":"\treturn *this;"},
{"lineNum":"  510","line":"      }"},
{"lineNum":"  511","line":"#else"},
{"lineNum":"  512","line":"      back_insert_iterator&"},
{"lineNum":"  513","line":"      operator=(const typename _Container::value_type& __value)"},
{"lineNum":"  514","line":"      {"},
{"lineNum":"  515","line":"\tcontainer->push_back(__value);"},
{"lineNum":"  516","line":"\treturn *this;"},
{"lineNum":"  517","line":"      }"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"      back_insert_iterator&"},
{"lineNum":"  520","line":"      operator=(typename _Container::value_type&& __value)"},
{"lineNum":"  521","line":"      {"},
{"lineNum":"  522","line":"\tcontainer->push_back(std::move(__value));"},
{"lineNum":"  523","line":"\treturn *this;"},
{"lineNum":"  524","line":"      }"},
{"lineNum":"  525","line":"#endif"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"      /// Simply returns *this."},
{"lineNum":"  528","line":"      back_insert_iterator&"},
{"lineNum":"  529","line":"      operator*()"},
{"lineNum":"  530","line":"      { return *this; }"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"      /// Simply returns *this.  (This %iterator does not @a move.)"},
{"lineNum":"  533","line":"      back_insert_iterator&"},
{"lineNum":"  534","line":"      operator++()"},
{"lineNum":"  535","line":"      { return *this; }"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"      /// Simply returns *this.  (This %iterator does not @a move.)"},
{"lineNum":"  538","line":"      back_insert_iterator"},
{"lineNum":"  539","line":"      operator++(int)"},
{"lineNum":"  540","line":"      { return *this; }"},
{"lineNum":"  541","line":"    };"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"  /**"},
{"lineNum":"  544","line":"   *  @param  __x  A container of arbitrary type."},
{"lineNum":"  545","line":"   *  @return  An instance of back_insert_iterator working on @p __x."},
{"lineNum":"  546","line":"   *"},
{"lineNum":"  547","line":"   *  This wrapper function helps in creating back_insert_iterator instances."},
{"lineNum":"  548","line":"   *  Typing the name of the %iterator requires knowing the precise full"},
{"lineNum":"  549","line":"   *  type of the container, which can be tedious and impedes generic"},
{"lineNum":"  550","line":"   *  programming.  Using this function lets you take advantage of automatic"},
{"lineNum":"  551","line":"   *  template parameter deduction, making the compiler match the correct"},
{"lineNum":"  552","line":"   *  types for you."},
{"lineNum":"  553","line":"  */"},
{"lineNum":"  554","line":"  template<typename _Container>"},
{"lineNum":"  555","line":"    inline back_insert_iterator<_Container>"},
{"lineNum":"  556","line":"    back_inserter(_Container& __x)"},
{"lineNum":"  557","line":"    { return back_insert_iterator<_Container>(__x); }"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"  /**"},
{"lineNum":"  560","line":"   *  @brief  Turns assignment into insertion."},
{"lineNum":"  561","line":"   *"},
{"lineNum":"  562","line":"   *  These are output iterators, constructed from a container-of-T."},
{"lineNum":"  563","line":"   *  Assigning a T to the iterator prepends it to the container using"},
{"lineNum":"  564","line":"   *  push_front."},
{"lineNum":"  565","line":"   *"},
{"lineNum":"  566","line":"   *  Tip:  Using the front_inserter function to create these iterators can"},
{"lineNum":"  567","line":"   *  save typing."},
{"lineNum":"  568","line":"  */"},
{"lineNum":"  569","line":"  template<typename _Container>"},
{"lineNum":"  570","line":"    class front_insert_iterator"},
{"lineNum":"  571","line":"    : public iterator<output_iterator_tag, void, void, void, void>"},
{"lineNum":"  572","line":"    {"},
{"lineNum":"  573","line":"    protected:"},
{"lineNum":"  574","line":"      _Container* container;"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"    public:"},
{"lineNum":"  577","line":"      /// A nested typedef for the type of whatever container you used."},
{"lineNum":"  578","line":"      typedef _Container          container_type;"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"      /// The only way to create this %iterator is with a container."},
{"lineNum":"  581","line":"      explicit front_insert_iterator(_Container& __x)"},
{"lineNum":"  582","line":"      : container(std::__addressof(__x)) { }"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"      /**"},
{"lineNum":"  585","line":"       *  @param  __value  An instance of whatever type"},
{"lineNum":"  586","line":"       *                 container_type::const_reference is; presumably a"},
{"lineNum":"  587","line":"       *                 reference-to-const T for container<T>."},
{"lineNum":"  588","line":"       *  @return  This %iterator, for chained operations."},
{"lineNum":"  589","line":"       *"},
{"lineNum":"  590","line":"       *  This kind of %iterator doesn\'t really have a @a position in the"},
{"lineNum":"  591","line":"       *  container (you can think of the position as being permanently at"},
{"lineNum":"  592","line":"       *  the front, if you like).  Assigning a value to the %iterator will"},
{"lineNum":"  593","line":"       *  always prepend the value to the front of the container."},
{"lineNum":"  594","line":"      */"},
{"lineNum":"  595","line":"#if __cplusplus < 201103L"},
{"lineNum":"  596","line":"      front_insert_iterator&"},
{"lineNum":"  597","line":"      operator=(typename _Container::const_reference __value)"},
{"lineNum":"  598","line":"      {"},
{"lineNum":"  599","line":"\tcontainer->push_front(__value);"},
{"lineNum":"  600","line":"\treturn *this;"},
{"lineNum":"  601","line":"      }"},
{"lineNum":"  602","line":"#else"},
{"lineNum":"  603","line":"      front_insert_iterator&"},
{"lineNum":"  604","line":"      operator=(const typename _Container::value_type& __value)"},
{"lineNum":"  605","line":"      {"},
{"lineNum":"  606","line":"\tcontainer->push_front(__value);"},
{"lineNum":"  607","line":"\treturn *this;"},
{"lineNum":"  608","line":"      }"},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"      front_insert_iterator&"},
{"lineNum":"  611","line":"      operator=(typename _Container::value_type&& __value)"},
{"lineNum":"  612","line":"      {"},
{"lineNum":"  613","line":"\tcontainer->push_front(std::move(__value));"},
{"lineNum":"  614","line":"\treturn *this;"},
{"lineNum":"  615","line":"      }"},
{"lineNum":"  616","line":"#endif"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"      /// Simply returns *this."},
{"lineNum":"  619","line":"      front_insert_iterator&"},
{"lineNum":"  620","line":"      operator*()"},
{"lineNum":"  621","line":"      { return *this; }"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"      /// Simply returns *this.  (This %iterator does not @a move.)"},
{"lineNum":"  624","line":"      front_insert_iterator&"},
{"lineNum":"  625","line":"      operator++()"},
{"lineNum":"  626","line":"      { return *this; }"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"      /// Simply returns *this.  (This %iterator does not @a move.)"},
{"lineNum":"  629","line":"      front_insert_iterator"},
{"lineNum":"  630","line":"      operator++(int)"},
{"lineNum":"  631","line":"      { return *this; }"},
{"lineNum":"  632","line":"    };"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"  /**"},
{"lineNum":"  635","line":"   *  @param  __x  A container of arbitrary type."},
{"lineNum":"  636","line":"   *  @return  An instance of front_insert_iterator working on @p x."},
{"lineNum":"  637","line":"   *"},
{"lineNum":"  638","line":"   *  This wrapper function helps in creating front_insert_iterator instances."},
{"lineNum":"  639","line":"   *  Typing the name of the %iterator requires knowing the precise full"},
{"lineNum":"  640","line":"   *  type of the container, which can be tedious and impedes generic"},
{"lineNum":"  641","line":"   *  programming.  Using this function lets you take advantage of automatic"},
{"lineNum":"  642","line":"   *  template parameter deduction, making the compiler match the correct"},
{"lineNum":"  643","line":"   *  types for you."},
{"lineNum":"  644","line":"  */"},
{"lineNum":"  645","line":"  template<typename _Container>"},
{"lineNum":"  646","line":"    inline front_insert_iterator<_Container>"},
{"lineNum":"  647","line":"    front_inserter(_Container& __x)"},
{"lineNum":"  648","line":"    { return front_insert_iterator<_Container>(__x); }"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"  /**"},
{"lineNum":"  651","line":"   *  @brief  Turns assignment into insertion."},
{"lineNum":"  652","line":"   *"},
{"lineNum":"  653","line":"   *  These are output iterators, constructed from a container-of-T."},
{"lineNum":"  654","line":"   *  Assigning a T to the iterator inserts it in the container at the"},
{"lineNum":"  655","line":"   *  %iterator\'s position, rather than overwriting the value at that"},
{"lineNum":"  656","line":"   *  position."},
{"lineNum":"  657","line":"   *"},
{"lineNum":"  658","line":"   *  (Sequences will actually insert a @e copy of the value before the"},
{"lineNum":"  659","line":"   *  %iterator\'s position.)"},
{"lineNum":"  660","line":"   *"},
{"lineNum":"  661","line":"   *  Tip:  Using the inserter function to create these iterators can"},
{"lineNum":"  662","line":"   *  save typing."},
{"lineNum":"  663","line":"  */"},
{"lineNum":"  664","line":"  template<typename _Container>"},
{"lineNum":"  665","line":"    class insert_iterator"},
{"lineNum":"  666","line":"    : public iterator<output_iterator_tag, void, void, void, void>"},
{"lineNum":"  667","line":"    {"},
{"lineNum":"  668","line":"    protected:"},
{"lineNum":"  669","line":"      _Container* container;"},
{"lineNum":"  670","line":"      typename _Container::iterator iter;"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"    public:"},
{"lineNum":"  673","line":"      /// A nested typedef for the type of whatever container you used."},
{"lineNum":"  674","line":"      typedef _Container          container_type;"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"      /**"},
{"lineNum":"  677","line":"       *  The only way to create this %iterator is with a container and an"},
{"lineNum":"  678","line":"       *  initial position (a normal %iterator into the container)."},
{"lineNum":"  679","line":"      */"},
{"lineNum":"  680","line":"      insert_iterator(_Container& __x, typename _Container::iterator __i)"},
{"lineNum":"  681","line":"      : container(std::__addressof(__x)), iter(__i) {}"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"      /**"},
{"lineNum":"  684","line":"       *  @param  __value  An instance of whatever type"},
{"lineNum":"  685","line":"       *                 container_type::const_reference is; presumably a"},
{"lineNum":"  686","line":"       *                 reference-to-const T for container<T>."},
{"lineNum":"  687","line":"       *  @return  This %iterator, for chained operations."},
{"lineNum":"  688","line":"       *"},
{"lineNum":"  689","line":"       *  This kind of %iterator maintains its own position in the"},
{"lineNum":"  690","line":"       *  container.  Assigning a value to the %iterator will insert the"},
{"lineNum":"  691","line":"       *  value into the container at the place before the %iterator."},
{"lineNum":"  692","line":"       *"},
{"lineNum":"  693","line":"       *  The position is maintained such that subsequent assignments will"},
{"lineNum":"  694","line":"       *  insert values immediately after one another.  For example,"},
{"lineNum":"  695","line":"       *  @code"},
{"lineNum":"  696","line":"       *     // vector v contains A and Z"},
{"lineNum":"  697","line":"       *"},
{"lineNum":"  698","line":"       *     insert_iterator i (v, ++v.begin());"},
{"lineNum":"  699","line":"       *     i = 1;"},
{"lineNum":"  700","line":"       *     i = 2;"},
{"lineNum":"  701","line":"       *     i = 3;"},
{"lineNum":"  702","line":"       *"},
{"lineNum":"  703","line":"       *     // vector v contains A, 1, 2, 3, and Z"},
{"lineNum":"  704","line":"       *  @endcode"},
{"lineNum":"  705","line":"      */"},
{"lineNum":"  706","line":"#if __cplusplus < 201103L"},
{"lineNum":"  707","line":"      insert_iterator&"},
{"lineNum":"  708","line":"      operator=(typename _Container::const_reference __value)"},
{"lineNum":"  709","line":"      {"},
{"lineNum":"  710","line":"\titer = container->insert(iter, __value);"},
{"lineNum":"  711","line":"\t++iter;"},
{"lineNum":"  712","line":"\treturn *this;"},
{"lineNum":"  713","line":"      }"},
{"lineNum":"  714","line":"#else"},
{"lineNum":"  715","line":"      insert_iterator&"},
{"lineNum":"  716","line":"      operator=(const typename _Container::value_type& __value)"},
{"lineNum":"  717","line":"      {"},
{"lineNum":"  718","line":"\titer = container->insert(iter, __value);"},
{"lineNum":"  719","line":"\t++iter;"},
{"lineNum":"  720","line":"\treturn *this;"},
{"lineNum":"  721","line":"      }"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"      insert_iterator&"},
{"lineNum":"  724","line":"      operator=(typename _Container::value_type&& __value)"},
{"lineNum":"  725","line":"      {"},
{"lineNum":"  726","line":"\titer = container->insert(iter, std::move(__value));"},
{"lineNum":"  727","line":"\t++iter;"},
{"lineNum":"  728","line":"\treturn *this;"},
{"lineNum":"  729","line":"      }"},
{"lineNum":"  730","line":"#endif"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"      /// Simply returns *this."},
{"lineNum":"  733","line":"      insert_iterator&"},
{"lineNum":"  734","line":"      operator*()"},
{"lineNum":"  735","line":"      { return *this; }"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"      /// Simply returns *this.  (This %iterator does not @a move.)"},
{"lineNum":"  738","line":"      insert_iterator&"},
{"lineNum":"  739","line":"      operator++()"},
{"lineNum":"  740","line":"      { return *this; }"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"      /// Simply returns *this.  (This %iterator does not @a move.)"},
{"lineNum":"  743","line":"      insert_iterator&"},
{"lineNum":"  744","line":"      operator++(int)"},
{"lineNum":"  745","line":"      { return *this; }"},
{"lineNum":"  746","line":"    };"},
{"lineNum":"  747","line":""},
{"lineNum":"  748","line":"  /**"},
{"lineNum":"  749","line":"   *  @param __x  A container of arbitrary type."},
{"lineNum":"  750","line":"   *  @param __i  An iterator into the container."},
{"lineNum":"  751","line":"   *  @return  An instance of insert_iterator working on @p __x."},
{"lineNum":"  752","line":"   *"},
{"lineNum":"  753","line":"   *  This wrapper function helps in creating insert_iterator instances."},
{"lineNum":"  754","line":"   *  Typing the name of the %iterator requires knowing the precise full"},
{"lineNum":"  755","line":"   *  type of the container, which can be tedious and impedes generic"},
{"lineNum":"  756","line":"   *  programming.  Using this function lets you take advantage of automatic"},
{"lineNum":"  757","line":"   *  template parameter deduction, making the compiler match the correct"},
{"lineNum":"  758","line":"   *  types for you."},
{"lineNum":"  759","line":"  */"},
{"lineNum":"  760","line":"  template<typename _Container>"},
{"lineNum":"  761","line":"    inline insert_iterator<_Container>"},
{"lineNum":"  762","line":"    inserter(_Container& __x, typename _Container::iterator __i)"},
{"lineNum":"  763","line":"    { return insert_iterator<_Container>(__x, __i); }"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"  /// @} group iterators"},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  768","line":"} // namespace"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"  771","line":"{"},
{"lineNum":"  772","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"  // This iterator adapter is @a normal in the sense that it does not"},
{"lineNum":"  775","line":"  // change the semantics of any of the operators of its iterator"},
{"lineNum":"  776","line":"  // parameter.  Its primary purpose is to convert an iterator that is"},
{"lineNum":"  777","line":"  // not a class, e.g. a pointer, into an iterator that is a class."},
{"lineNum":"  778","line":"  // The _Container parameter exists solely so that different containers"},
{"lineNum":"  779","line":"  // using this template can instantiate different types, even if the"},
{"lineNum":"  780","line":"  // _Iterator parameter is the same."},
{"lineNum":"  781","line":"  using std::iterator_traits;"},
{"lineNum":"  782","line":"  using std::iterator;"},
{"lineNum":"  783","line":"  template<typename _Iterator, typename _Container>"},
{"lineNum":"  784","line":"    class __normal_iterator"},
{"lineNum":"  785","line":"    {"},
{"lineNum":"  786","line":"    protected:"},
{"lineNum":"  787","line":"      _Iterator _M_current;"},
{"lineNum":"  788","line":""},
{"lineNum":"  789","line":"      typedef iterator_traits<_Iterator>\t\t__traits_type;"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"    public:"},
{"lineNum":"  792","line":"      typedef _Iterator\t\t\t\t\titerator_type;"},
{"lineNum":"  793","line":"      typedef typename __traits_type::iterator_category iterator_category;"},
{"lineNum":"  794","line":"      typedef typename __traits_type::value_type  \tvalue_type;"},
{"lineNum":"  795","line":"      typedef typename __traits_type::difference_type \tdifference_type;"},
{"lineNum":"  796","line":"      typedef typename __traits_type::reference \treference;"},
{"lineNum":"  797","line":"      typedef typename __traits_type::pointer   \tpointer;"},
{"lineNum":"  798","line":""},
{"lineNum":"  799","line":"      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  800","line":"      : _M_current(_Iterator()) { }"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"      explicit"},
{"lineNum":"  803","line":"      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  804","line":"      : _M_current(__i) { }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  805","line":""},
{"lineNum":"  806","line":"      // Allow iterator to const_iterator conversion"},
{"lineNum":"  807","line":"      template<typename _Iter>"},
{"lineNum":"  808","line":"        __normal_iterator(const __normal_iterator<_Iter,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  809","line":"\t\t\t  typename __enable_if<"},
{"lineNum":"  810","line":"      \t       (std::__are_same<_Iter, typename _Container::pointer>::__value),"},
{"lineNum":"  811","line":"\t\t      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  812","line":"        : _M_current(__i.base()) { }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"      // Forward iterator requirements"},
{"lineNum":"  815","line":"      reference"},
{"lineNum":"  816","line":"      operator*() const _GLIBCXX_NOEXCEPT","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  817","line":"      { return *_M_current; }","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"      pointer"},
{"lineNum":"  820","line":"      operator->() const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  821","line":"      { return _M_current; }"},
{"lineNum":"  822","line":""},
{"lineNum":"  823","line":"      __normal_iterator&"},
{"lineNum":"  824","line":"      operator++() _GLIBCXX_NOEXCEPT","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  825","line":"      {"},
{"lineNum":"  826","line":"\t++_M_current;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  827","line":"\treturn *this;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  828","line":"      }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"      __normal_iterator"},
{"lineNum":"  831","line":"      operator++(int) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  832","line":"      { return __normal_iterator(_M_current++); }"},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"      // Bidirectional iterator requirements"},
{"lineNum":"  835","line":"      __normal_iterator&"},
{"lineNum":"  836","line":"      operator--() _GLIBCXX_NOEXCEPT"},
{"lineNum":"  837","line":"      {"},
{"lineNum":"  838","line":"\t--_M_current;"},
{"lineNum":"  839","line":"\treturn *this;"},
{"lineNum":"  840","line":"      }"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"      __normal_iterator"},
{"lineNum":"  843","line":"      operator--(int) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  844","line":"      { return __normal_iterator(_M_current--); }"},
{"lineNum":"  845","line":""},
{"lineNum":"  846","line":"      // Random access iterator requirements"},
{"lineNum":"  847","line":"      reference"},
{"lineNum":"  848","line":"      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT"},
{"lineNum":"  849","line":"      { return _M_current[__n]; }"},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"      __normal_iterator&"},
{"lineNum":"  852","line":"      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  853","line":"      { _M_current += __n; return *this; }","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"      __normal_iterator"},
{"lineNum":"  856","line":"      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  857","line":"      { return __normal_iterator(_M_current + __n); }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"      __normal_iterator&"},
{"lineNum":"  860","line":"      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT"},
{"lineNum":"  861","line":"      { _M_current -= __n; return *this; }"},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"      __normal_iterator"},
{"lineNum":"  864","line":"      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  865","line":"      { return __normal_iterator(_M_current - __n); }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"      const _Iterator&"},
{"lineNum":"  868","line":"      base() const _GLIBCXX_NOEXCEPT","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  869","line":"      { return _M_current; }","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  870","line":"    };"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"  // Note: In what follows, the left- and right-hand-side iterators are"},
{"lineNum":"  873","line":"  // allowed to vary in types (conceptually in cv-qualification) so that"},
{"lineNum":"  874","line":"  // comparison between cv-qualified and non-cv-qualified iterators be"},
{"lineNum":"  875","line":"  // valid.  However, the greedy and unfriendly operators in std::rel_ops"},
{"lineNum":"  876","line":"  // will make overload resolution ambiguous (when in scope) if we don\'t"},
{"lineNum":"  877","line":"  // provide overloads whose operands are of the same type.  Can someone"},
{"lineNum":"  878","line":"  // remind me what generic programming is about? -- Gaby"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"  // Forward iterator requirements"},
{"lineNum":"  881","line":"  template<typename _IteratorL, typename _IteratorR, typename _Container>"},
{"lineNum":"  882","line":"    inline bool"},
{"lineNum":"  883","line":"    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,"},
{"lineNum":"  884","line":"\t       const __normal_iterator<_IteratorR, _Container>& __rhs)"},
{"lineNum":"  885","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  886","line":"    { return __lhs.base() == __rhs.base(); }"},
{"lineNum":"  887","line":""},
{"lineNum":"  888","line":"  template<typename _Iterator, typename _Container>"},
{"lineNum":"  889","line":"    inline bool"},
{"lineNum":"  890","line":"    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  891","line":"\t       const __normal_iterator<_Iterator, _Container>& __rhs)"},
{"lineNum":"  892","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  893","line":"    { return __lhs.base() == __rhs.base(); }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":"  template<typename _IteratorL, typename _IteratorR, typename _Container>"},
{"lineNum":"  896","line":"    inline bool"},
{"lineNum":"  897","line":"    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,"},
{"lineNum":"  898","line":"\t       const __normal_iterator<_IteratorR, _Container>& __rhs)"},
{"lineNum":"  899","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  900","line":"    { return __lhs.base() != __rhs.base(); }"},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"  template<typename _Iterator, typename _Container>"},
{"lineNum":"  903","line":"    inline bool"},
{"lineNum":"  904","line":"    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  905","line":"\t       const __normal_iterator<_Iterator, _Container>& __rhs)"},
{"lineNum":"  906","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  907","line":"    { return __lhs.base() != __rhs.base(); }","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  908","line":""},
{"lineNum":"  909","line":"  // Random access iterator requirements"},
{"lineNum":"  910","line":"  template<typename _IteratorL, typename _IteratorR, typename _Container>"},
{"lineNum":"  911","line":"    inline bool"},
{"lineNum":"  912","line":"    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,"},
{"lineNum":"  913","line":"\t      const __normal_iterator<_IteratorR, _Container>& __rhs)"},
{"lineNum":"  914","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  915","line":"    { return __lhs.base() < __rhs.base(); }"},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"  template<typename _Iterator, typename _Container>"},
{"lineNum":"  918","line":"    inline bool"},
{"lineNum":"  919","line":"    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,"},
{"lineNum":"  920","line":"\t      const __normal_iterator<_Iterator, _Container>& __rhs)"},
{"lineNum":"  921","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  922","line":"    { return __lhs.base() < __rhs.base(); }"},
{"lineNum":"  923","line":""},
{"lineNum":"  924","line":"  template<typename _IteratorL, typename _IteratorR, typename _Container>"},
{"lineNum":"  925","line":"    inline bool"},
{"lineNum":"  926","line":"    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,"},
{"lineNum":"  927","line":"\t      const __normal_iterator<_IteratorR, _Container>& __rhs)"},
{"lineNum":"  928","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  929","line":"    { return __lhs.base() > __rhs.base(); }"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"  template<typename _Iterator, typename _Container>"},
{"lineNum":"  932","line":"    inline bool"},
{"lineNum":"  933","line":"    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,"},
{"lineNum":"  934","line":"\t      const __normal_iterator<_Iterator, _Container>& __rhs)"},
{"lineNum":"  935","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  936","line":"    { return __lhs.base() > __rhs.base(); }"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"  template<typename _IteratorL, typename _IteratorR, typename _Container>"},
{"lineNum":"  939","line":"    inline bool"},
{"lineNum":"  940","line":"    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,"},
{"lineNum":"  941","line":"\t       const __normal_iterator<_IteratorR, _Container>& __rhs)"},
{"lineNum":"  942","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  943","line":"    { return __lhs.base() <= __rhs.base(); }"},
{"lineNum":"  944","line":""},
{"lineNum":"  945","line":"  template<typename _Iterator, typename _Container>"},
{"lineNum":"  946","line":"    inline bool"},
{"lineNum":"  947","line":"    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,"},
{"lineNum":"  948","line":"\t       const __normal_iterator<_Iterator, _Container>& __rhs)"},
{"lineNum":"  949","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  950","line":"    { return __lhs.base() <= __rhs.base(); }"},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"  template<typename _IteratorL, typename _IteratorR, typename _Container>"},
{"lineNum":"  953","line":"    inline bool"},
{"lineNum":"  954","line":"    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,"},
{"lineNum":"  955","line":"\t       const __normal_iterator<_IteratorR, _Container>& __rhs)"},
{"lineNum":"  956","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  957","line":"    { return __lhs.base() >= __rhs.base(); }"},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"  template<typename _Iterator, typename _Container>"},
{"lineNum":"  960","line":"    inline bool"},
{"lineNum":"  961","line":"    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,"},
{"lineNum":"  962","line":"\t       const __normal_iterator<_Iterator, _Container>& __rhs)"},
{"lineNum":"  963","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  964","line":"    { return __lhs.base() >= __rhs.base(); }"},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"  // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  967","line":"  // According to the resolution of DR179 not only the various comparison"},
{"lineNum":"  968","line":"  // operators but also operator- must accept mixed iterator/const_iterator"},
{"lineNum":"  969","line":"  // parameters."},
{"lineNum":"  970","line":"  template<typename _IteratorL, typename _IteratorR, typename _Container>"},
{"lineNum":"  971","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  972","line":"    // DR 685."},
{"lineNum":"  973","line":"    inline auto"},
{"lineNum":"  974","line":"    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,"},
{"lineNum":"  975","line":"\t      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept"},
{"lineNum":"  976","line":"    -> decltype(__lhs.base() - __rhs.base())"},
{"lineNum":"  977","line":"#else"},
{"lineNum":"  978","line":"    inline typename __normal_iterator<_IteratorL, _Container>::difference_type"},
{"lineNum":"  979","line":"    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,"},
{"lineNum":"  980","line":"\t      const __normal_iterator<_IteratorR, _Container>& __rhs)"},
{"lineNum":"  981","line":"#endif"},
{"lineNum":"  982","line":"    { return __lhs.base() - __rhs.base(); }"},
{"lineNum":"  983","line":""},
{"lineNum":"  984","line":"  template<typename _Iterator, typename _Container>"},
{"lineNum":"  985","line":"    inline typename __normal_iterator<_Iterator, _Container>::difference_type"},
{"lineNum":"  986","line":"    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  987","line":"\t      const __normal_iterator<_Iterator, _Container>& __rhs)"},
{"lineNum":"  988","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  989","line":"    { return __lhs.base() - __rhs.base(); }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  990","line":""},
{"lineNum":"  991","line":"  template<typename _Iterator, typename _Container>"},
{"lineNum":"  992","line":"    inline __normal_iterator<_Iterator, _Container>"},
{"lineNum":"  993","line":"    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type"},
{"lineNum":"  994","line":"\t      __n, const __normal_iterator<_Iterator, _Container>& __i)"},
{"lineNum":"  995","line":"    _GLIBCXX_NOEXCEPT"},
{"lineNum":"  996","line":"    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }"},
{"lineNum":"  997","line":""},
{"lineNum":"  998","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  999","line":"} // namespace"},
{"lineNum":" 1000","line":""},
{"lineNum":" 1001","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":" 1002","line":"{"},
{"lineNum":" 1003","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":" 1004","line":""},
{"lineNum":" 1005","line":"  template<typename _Iterator, typename _Container>"},
{"lineNum":" 1006","line":"    _Iterator"},
{"lineNum":" 1007","line":"    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1008","line":"    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)"},
{"lineNum":" 1009","line":"    { return __it.base(); }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1012","line":""},
{"lineNum":" 1013","line":"  /**"},
{"lineNum":" 1014","line":"   * @addtogroup iterators"},
{"lineNum":" 1015","line":"   * @{"},
{"lineNum":" 1016","line":"   */"},
{"lineNum":" 1017","line":""},
{"lineNum":" 1018","line":"  // 24.4.3  Move iterators"},
{"lineNum":" 1019","line":"  /**"},
{"lineNum":" 1020","line":"   *  Class template move_iterator is an iterator adapter with the same"},
{"lineNum":" 1021","line":"   *  behavior as the underlying iterator except that its dereference"},
{"lineNum":" 1022","line":"   *  operator implicitly converts the value returned by the underlying"},
{"lineNum":" 1023","line":"   *  iterator\'s dereference operator to an rvalue reference.  Some"},
{"lineNum":" 1024","line":"   *  generic algorithms can be called with move iterators to replace"},
{"lineNum":" 1025","line":"   *  copying with moving."},
{"lineNum":" 1026","line":"   */"},
{"lineNum":" 1027","line":"  template<typename _Iterator>"},
{"lineNum":" 1028","line":"    class move_iterator"},
{"lineNum":" 1029","line":"    {"},
{"lineNum":" 1030","line":"    protected:"},
{"lineNum":" 1031","line":"      _Iterator _M_current;"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"      typedef iterator_traits<_Iterator>\t\t__traits_type;"},
{"lineNum":" 1034","line":"      typedef typename __traits_type::reference\t\t__base_ref;"},
{"lineNum":" 1035","line":""},
{"lineNum":" 1036","line":"    public:"},
{"lineNum":" 1037","line":"      typedef _Iterator\t\t\t\t\titerator_type;"},
{"lineNum":" 1038","line":"      typedef typename __traits_type::iterator_category iterator_category;"},
{"lineNum":" 1039","line":"      typedef typename __traits_type::value_type  \tvalue_type;"},
{"lineNum":" 1040","line":"      typedef typename __traits_type::difference_type\tdifference_type;"},
{"lineNum":" 1041","line":"      // NB: DR 680."},
{"lineNum":" 1042","line":"      typedef _Iterator\t\t\t\t\tpointer;"},
{"lineNum":" 1043","line":"      // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":" 1044","line":"      // 2106. move_iterator wrapping iterators returning prvalues"},
{"lineNum":" 1045","line":"      typedef typename conditional<is_reference<__base_ref>::value,"},
{"lineNum":" 1046","line":"\t\t\t typename remove_reference<__base_ref>::type&&,"},
{"lineNum":" 1047","line":"\t\t\t __base_ref>::type\t\treference;"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"      _GLIBCXX17_CONSTEXPR"},
{"lineNum":" 1050","line":"      move_iterator()"},
{"lineNum":" 1051","line":"      : _M_current() { }"},
{"lineNum":" 1052","line":""},
{"lineNum":" 1053","line":"      explicit _GLIBCXX17_CONSTEXPR"},
{"lineNum":" 1054","line":"      move_iterator(iterator_type __i)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1055","line":"      : _M_current(__i) { }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1056","line":""},
{"lineNum":" 1057","line":"      template<typename _Iter>"},
{"lineNum":" 1058","line":"\t_GLIBCXX17_CONSTEXPR"},
{"lineNum":" 1059","line":"\tmove_iterator(const move_iterator<_Iter>& __i)"},
{"lineNum":" 1060","line":"\t: _M_current(__i.base()) { }"},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"      _GLIBCXX17_CONSTEXPR iterator_type"},
{"lineNum":" 1063","line":"      base() const","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1064","line":"      { return _M_current; }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"      _GLIBCXX17_CONSTEXPR reference"},
{"lineNum":" 1067","line":"      operator*() const"},
{"lineNum":" 1068","line":"      { return static_cast<reference>(*_M_current); }"},
{"lineNum":" 1069","line":""},
{"lineNum":" 1070","line":"      _GLIBCXX17_CONSTEXPR pointer"},
{"lineNum":" 1071","line":"      operator->() const"},
{"lineNum":" 1072","line":"      { return _M_current; }"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"      _GLIBCXX17_CONSTEXPR move_iterator&"},
{"lineNum":" 1075","line":"      operator++()"},
{"lineNum":" 1076","line":"      {"},
{"lineNum":" 1077","line":"\t++_M_current;"},
{"lineNum":" 1078","line":"\treturn *this;"},
{"lineNum":" 1079","line":"      }"},
{"lineNum":" 1080","line":""},
{"lineNum":" 1081","line":"      _GLIBCXX17_CONSTEXPR move_iterator"},
{"lineNum":" 1082","line":"      operator++(int)"},
{"lineNum":" 1083","line":"      {"},
{"lineNum":" 1084","line":"\tmove_iterator __tmp = *this;"},
{"lineNum":" 1085","line":"\t++_M_current;"},
{"lineNum":" 1086","line":"\treturn __tmp;"},
{"lineNum":" 1087","line":"      }"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"      _GLIBCXX17_CONSTEXPR move_iterator&"},
{"lineNum":" 1090","line":"      operator--()"},
{"lineNum":" 1091","line":"      {"},
{"lineNum":" 1092","line":"\t--_M_current;"},
{"lineNum":" 1093","line":"\treturn *this;"},
{"lineNum":" 1094","line":"      }"},
{"lineNum":" 1095","line":""},
{"lineNum":" 1096","line":"      _GLIBCXX17_CONSTEXPR move_iterator"},
{"lineNum":" 1097","line":"      operator--(int)"},
{"lineNum":" 1098","line":"      {"},
{"lineNum":" 1099","line":"\tmove_iterator __tmp = *this;"},
{"lineNum":" 1100","line":"\t--_M_current;"},
{"lineNum":" 1101","line":"\treturn __tmp;"},
{"lineNum":" 1102","line":"      }"},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"      _GLIBCXX17_CONSTEXPR move_iterator"},
{"lineNum":" 1105","line":"      operator+(difference_type __n) const"},
{"lineNum":" 1106","line":"      { return move_iterator(_M_current + __n); }"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"      _GLIBCXX17_CONSTEXPR move_iterator&"},
{"lineNum":" 1109","line":"      operator+=(difference_type __n)"},
{"lineNum":" 1110","line":"      {"},
{"lineNum":" 1111","line":"\t_M_current += __n;"},
{"lineNum":" 1112","line":"\treturn *this;"},
{"lineNum":" 1113","line":"      }"},
{"lineNum":" 1114","line":""},
{"lineNum":" 1115","line":"      _GLIBCXX17_CONSTEXPR move_iterator"},
{"lineNum":" 1116","line":"      operator-(difference_type __n) const"},
{"lineNum":" 1117","line":"      { return move_iterator(_M_current - __n); }"},
{"lineNum":" 1118","line":""},
{"lineNum":" 1119","line":"      _GLIBCXX17_CONSTEXPR move_iterator&"},
{"lineNum":" 1120","line":"      operator-=(difference_type __n)"},
{"lineNum":" 1121","line":"      {"},
{"lineNum":" 1122","line":"\t_M_current -= __n;"},
{"lineNum":" 1123","line":"\treturn *this;"},
{"lineNum":" 1124","line":"      }"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"      _GLIBCXX17_CONSTEXPR reference"},
{"lineNum":" 1127","line":"      operator[](difference_type __n) const"},
{"lineNum":" 1128","line":"      { return std::move(_M_current[__n]); }"},
{"lineNum":" 1129","line":"    };"},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"  // Note: See __normal_iterator operators note from Gaby to understand"},
{"lineNum":" 1132","line":"  // why there are always 2 versions for most of the move_iterator"},
{"lineNum":" 1133","line":"  // operators."},
{"lineNum":" 1134","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":" 1135","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":" 1136","line":"    operator==(const move_iterator<_IteratorL>& __x,"},
{"lineNum":" 1137","line":"\t       const move_iterator<_IteratorR>& __y)"},
{"lineNum":" 1138","line":"    { return __x.base() == __y.base(); }"},
{"lineNum":" 1139","line":""},
{"lineNum":" 1140","line":"  template<typename _Iterator>"},
{"lineNum":" 1141","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":" 1142","line":"    operator==(const move_iterator<_Iterator>& __x,"},
{"lineNum":" 1143","line":"\t       const move_iterator<_Iterator>& __y)"},
{"lineNum":" 1144","line":"    { return __x.base() == __y.base(); }"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":" 1147","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":" 1148","line":"    operator!=(const move_iterator<_IteratorL>& __x,"},
{"lineNum":" 1149","line":"\t       const move_iterator<_IteratorR>& __y)"},
{"lineNum":" 1150","line":"    { return !(__x == __y); }"},
{"lineNum":" 1151","line":""},
{"lineNum":" 1152","line":"  template<typename _Iterator>"},
{"lineNum":" 1153","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":" 1154","line":"    operator!=(const move_iterator<_Iterator>& __x,"},
{"lineNum":" 1155","line":"\t       const move_iterator<_Iterator>& __y)"},
{"lineNum":" 1156","line":"    { return !(__x == __y); }"},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":" 1159","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":" 1160","line":"    operator<(const move_iterator<_IteratorL>& __x,"},
{"lineNum":" 1161","line":"\t      const move_iterator<_IteratorR>& __y)"},
{"lineNum":" 1162","line":"    { return __x.base() < __y.base(); }"},
{"lineNum":" 1163","line":""},
{"lineNum":" 1164","line":"  template<typename _Iterator>"},
{"lineNum":" 1165","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":" 1166","line":"    operator<(const move_iterator<_Iterator>& __x,"},
{"lineNum":" 1167","line":"\t      const move_iterator<_Iterator>& __y)"},
{"lineNum":" 1168","line":"    { return __x.base() < __y.base(); }"},
{"lineNum":" 1169","line":""},
{"lineNum":" 1170","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":" 1171","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":" 1172","line":"    operator<=(const move_iterator<_IteratorL>& __x,"},
{"lineNum":" 1173","line":"\t       const move_iterator<_IteratorR>& __y)"},
{"lineNum":" 1174","line":"    { return !(__y < __x); }"},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":"  template<typename _Iterator>"},
{"lineNum":" 1177","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":" 1178","line":"    operator<=(const move_iterator<_Iterator>& __x,"},
{"lineNum":" 1179","line":"\t       const move_iterator<_Iterator>& __y)"},
{"lineNum":" 1180","line":"    { return !(__y < __x); }"},
{"lineNum":" 1181","line":""},
{"lineNum":" 1182","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":" 1183","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":" 1184","line":"    operator>(const move_iterator<_IteratorL>& __x,"},
{"lineNum":" 1185","line":"\t      const move_iterator<_IteratorR>& __y)"},
{"lineNum":" 1186","line":"    { return __y < __x; }"},
{"lineNum":" 1187","line":""},
{"lineNum":" 1188","line":"  template<typename _Iterator>"},
{"lineNum":" 1189","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":" 1190","line":"    operator>(const move_iterator<_Iterator>& __x,"},
{"lineNum":" 1191","line":"\t      const move_iterator<_Iterator>& __y)"},
{"lineNum":" 1192","line":"    { return __y < __x; }"},
{"lineNum":" 1193","line":""},
{"lineNum":" 1194","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":" 1195","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":" 1196","line":"    operator>=(const move_iterator<_IteratorL>& __x,"},
{"lineNum":" 1197","line":"\t       const move_iterator<_IteratorR>& __y)"},
{"lineNum":" 1198","line":"    { return !(__x < __y); }"},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"  template<typename _Iterator>"},
{"lineNum":" 1201","line":"    inline _GLIBCXX17_CONSTEXPR bool"},
{"lineNum":" 1202","line":"    operator>=(const move_iterator<_Iterator>& __x,"},
{"lineNum":" 1203","line":"\t       const move_iterator<_Iterator>& __y)"},
{"lineNum":" 1204","line":"    { return !(__x < __y); }"},
{"lineNum":" 1205","line":""},
{"lineNum":" 1206","line":"  // DR 685."},
{"lineNum":" 1207","line":"  template<typename _IteratorL, typename _IteratorR>"},
{"lineNum":" 1208","line":"    inline _GLIBCXX17_CONSTEXPR auto"},
{"lineNum":" 1209","line":"    operator-(const move_iterator<_IteratorL>& __x,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1210","line":"\t      const move_iterator<_IteratorR>& __y)"},
{"lineNum":" 1211","line":"    -> decltype(__x.base() - __y.base())"},
{"lineNum":" 1212","line":"    { return __x.base() - __y.base(); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1213","line":""},
{"lineNum":" 1214","line":"  template<typename _Iterator>"},
{"lineNum":" 1215","line":"    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>"},
{"lineNum":" 1216","line":"    operator+(typename move_iterator<_Iterator>::difference_type __n,"},
{"lineNum":" 1217","line":"\t      const move_iterator<_Iterator>& __x)"},
{"lineNum":" 1218","line":"    { return __x + __n; }"},
{"lineNum":" 1219","line":""},
{"lineNum":" 1220","line":"  template<typename _Iterator>"},
{"lineNum":" 1221","line":"    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>"},
{"lineNum":" 1222","line":"    make_move_iterator(_Iterator __i)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1223","line":"    { return move_iterator<_Iterator>(__i); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1224","line":""},
{"lineNum":" 1225","line":"  template<typename _Iterator, typename _ReturnType"},
{"lineNum":" 1226","line":"    = typename conditional<__move_if_noexcept_cond"},
{"lineNum":" 1227","line":"      <typename iterator_traits<_Iterator>::value_type>::value,"},
{"lineNum":" 1228","line":"                _Iterator, move_iterator<_Iterator>>::type>"},
{"lineNum":" 1229","line":"    inline _GLIBCXX17_CONSTEXPR _ReturnType"},
{"lineNum":" 1230","line":"    __make_move_if_noexcept_iterator(_Iterator __i)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1231","line":"    { return _ReturnType(__i); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1232","line":""},
{"lineNum":" 1233","line":"  // Overload for pointers that matches std::move_if_noexcept more closely,"},
{"lineNum":" 1234","line":"  // returning a constant iterator when we don\'t want to move."},
{"lineNum":" 1235","line":"  template<typename _Tp, typename _ReturnType"},
{"lineNum":" 1236","line":"    = typename conditional<__move_if_noexcept_cond<_Tp>::value,"},
{"lineNum":" 1237","line":"\t\t\t   const _Tp*, move_iterator<_Tp*>>::type>"},
{"lineNum":" 1238","line":"    inline _GLIBCXX17_CONSTEXPR _ReturnType"},
{"lineNum":" 1239","line":"    __make_move_if_noexcept_iterator(_Tp* __i)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1240","line":"    { return _ReturnType(__i); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1241","line":""},
{"lineNum":" 1242","line":"  /// @} group iterators"},
{"lineNum":" 1243","line":""},
{"lineNum":" 1244","line":"  template<typename _Iterator>"},
{"lineNum":" 1245","line":"    auto"},
{"lineNum":" 1246","line":"    __niter_base(move_iterator<_Iterator> __it)"},
{"lineNum":" 1247","line":"    -> decltype(make_move_iterator(__niter_base(__it.base())))"},
{"lineNum":" 1248","line":"    { return make_move_iterator(__niter_base(__it.base())); }"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"  template<typename _Iterator>"},
{"lineNum":" 1251","line":"    struct __is_move_iterator<move_iterator<_Iterator> >"},
{"lineNum":" 1252","line":"    {"},
{"lineNum":" 1253","line":"      enum { __value = 1 };"},
{"lineNum":" 1254","line":"      typedef __true_type __type;"},
{"lineNum":" 1255","line":"    };"},
{"lineNum":" 1256","line":""},
{"lineNum":" 1257","line":"  template<typename _Iterator>"},
{"lineNum":" 1258","line":"    auto"},
{"lineNum":" 1259","line":"    __miter_base(move_iterator<_Iterator> __it)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1260","line":"    -> decltype(__miter_base(__it.base()))"},
{"lineNum":" 1261","line":"    { return __miter_base(__it.base()); }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1262","line":""},
{"lineNum":" 1263","line":"#define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) std::make_move_iterator(_Iter)"},
{"lineNum":" 1264","line":"#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) \\"},
{"lineNum":" 1265","line":"  std::__make_move_if_noexcept_iterator(_Iter)"},
{"lineNum":" 1266","line":"#else"},
{"lineNum":" 1267","line":"#define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) (_Iter)"},
{"lineNum":" 1268","line":"#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) (_Iter)"},
{"lineNum":" 1269","line":"#endif // C++11"},
{"lineNum":" 1270","line":""},
{"lineNum":" 1271","line":"#if __cpp_deduction_guides >= 201606"},
{"lineNum":" 1272","line":"  // These helper traits are used for deduction guides"},
{"lineNum":" 1273","line":"  // of associative containers."},
{"lineNum":" 1274","line":"  template<typename _InputIterator>"},
{"lineNum":" 1275","line":"    using __iter_key_t = remove_const_t<"},
{"lineNum":" 1276","line":"    typename iterator_traits<_InputIterator>::value_type::first_type>;"},
{"lineNum":" 1277","line":""},
{"lineNum":" 1278","line":"  template<typename _InputIterator>"},
{"lineNum":" 1279","line":"    using __iter_val_t ="},
{"lineNum":" 1280","line":"    typename iterator_traits<_InputIterator>::value_type::second_type;"},
{"lineNum":" 1281","line":""},
{"lineNum":" 1282","line":"  template<typename _T1, typename _T2>"},
{"lineNum":" 1283","line":"    struct pair;"},
{"lineNum":" 1284","line":""},
{"lineNum":" 1285","line":"  template<typename _InputIterator>"},
{"lineNum":" 1286","line":"    using __iter_to_alloc_t ="},
{"lineNum":" 1287","line":"    pair<add_const_t<__iter_key_t<_InputIterator>>,"},
{"lineNum":" 1288","line":"\t __iter_val_t<_InputIterator>>;"},
{"lineNum":" 1289","line":""},
{"lineNum":" 1290","line":"#endif"},
{"lineNum":" 1291","line":""},
{"lineNum":" 1292","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":" 1293","line":"} // namespace"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"#ifdef _GLIBCXX_DEBUG"},
{"lineNum":" 1296","line":"# include <debug/stl_iterator.h>"},
{"lineNum":" 1297","line":"#endif"},
{"lineNum":" 1298","line":""},
{"lineNum":" 1299","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "bech32_fuzz_2_gcc_instrumented", "date" : "2023-07-28 14:53:55", "instrumented" : 40, "covered" : 0,};
var merged_data = [];
