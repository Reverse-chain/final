var data = {lines:[
{"lineNum":"    1","line":"// Core algorithmic facilities -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2019 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*"},
{"lineNum":"   26","line":" *"},
{"lineNum":"   27","line":" * Copyright (c) 1994"},
{"lineNum":"   28","line":" * Hewlett-Packard Company"},
{"lineNum":"   29","line":" *"},
{"lineNum":"   30","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   31","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   32","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   33","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   34","line":" * in supporting documentation.  Hewlett-Packard Company makes no"},
{"lineNum":"   35","line":" * representations about the suitability of this software for any"},
{"lineNum":"   36","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   37","line":" *"},
{"lineNum":"   38","line":" *"},
{"lineNum":"   39","line":" * Copyright (c) 1996-1998"},
{"lineNum":"   40","line":" * Silicon Graphics Computer Systems, Inc."},
{"lineNum":"   41","line":" *"},
{"lineNum":"   42","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   43","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   44","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   45","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   46","line":" * in supporting documentation.  Silicon Graphics makes no"},
{"lineNum":"   47","line":" * representations about the suitability of this software for any"},
{"lineNum":"   48","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   49","line":" */"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/** @file bits/stl_algobase.h"},
{"lineNum":"   52","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   53","line":" *  Do not attempt to use it directly. @headername{algorithm}"},
{"lineNum":"   54","line":" */"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#ifndef _STL_ALGOBASE_H"},
{"lineNum":"   57","line":"#define _STL_ALGOBASE_H 1"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"#include <bits/c++config.h>"},
{"lineNum":"   60","line":"#include <bits/functexcept.h>"},
{"lineNum":"   61","line":"#include <bits/cpp_type_traits.h>"},
{"lineNum":"   62","line":"#include <ext/type_traits.h>"},
{"lineNum":"   63","line":"#include <ext/numeric_traits.h>"},
{"lineNum":"   64","line":"#include <bits/stl_pair.h>"},
{"lineNum":"   65","line":"#include <bits/stl_iterator_base_types.h>"},
{"lineNum":"   66","line":"#include <bits/stl_iterator_base_funcs.h>"},
{"lineNum":"   67","line":"#include <bits/stl_iterator.h>"},
{"lineNum":"   68","line":"#include <bits/concept_check.h>"},
{"lineNum":"   69","line":"#include <debug/debug.h>"},
{"lineNum":"   70","line":"#include <bits/move.h> // For std::swap"},
{"lineNum":"   71","line":"#include <bits/predefined_ops.h>"},
{"lineNum":"   72","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   73","line":"# include <type_traits>"},
{"lineNum":"   74","line":"#endif"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   77","line":"{"},
{"lineNum":"   78","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"#if __cplusplus < 201103L"},
{"lineNum":"   81","line":"  // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a"},
{"lineNum":"   82","line":"  // nutshell, we are partially implementing the resolution of DR 187,"},
{"lineNum":"   83","line":"  // when it\'s safe, i.e., the value_types are equal."},
{"lineNum":"   84","line":"  template<bool _BoolType>"},
{"lineNum":"   85","line":"    struct __iter_swap"},
{"lineNum":"   86","line":"    {"},
{"lineNum":"   87","line":"      template<typename _ForwardIterator1, typename _ForwardIterator2>"},
{"lineNum":"   88","line":"\tstatic void"},
{"lineNum":"   89","line":"\titer_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)"},
{"lineNum":"   90","line":"\t{"},
{"lineNum":"   91","line":"\t  typedef typename iterator_traits<_ForwardIterator1>::value_type"},
{"lineNum":"   92","line":"\t    _ValueType1;"},
{"lineNum":"   93","line":"\t  _ValueType1 __tmp = *__a;"},
{"lineNum":"   94","line":"\t  *__a = *__b;"},
{"lineNum":"   95","line":"\t  *__b = __tmp;"},
{"lineNum":"   96","line":"\t}"},
{"lineNum":"   97","line":"    };"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"  template<>"},
{"lineNum":"  100","line":"    struct __iter_swap<true>"},
{"lineNum":"  101","line":"    {"},
{"lineNum":"  102","line":"      template<typename _ForwardIterator1, typename _ForwardIterator2>"},
{"lineNum":"  103","line":"\tstatic void"},
{"lineNum":"  104","line":"\titer_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)"},
{"lineNum":"  105","line":"\t{"},
{"lineNum":"  106","line":"\t  swap(*__a, *__b);"},
{"lineNum":"  107","line":"\t}"},
{"lineNum":"  108","line":"    };"},
{"lineNum":"  109","line":"#endif"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"  /**"},
{"lineNum":"  112","line":"   *  @brief Swaps the contents of two iterators."},
{"lineNum":"  113","line":"   *  @ingroup mutating_algorithms"},
{"lineNum":"  114","line":"   *  @param  __a  An iterator."},
{"lineNum":"  115","line":"   *  @param  __b  Another iterator."},
{"lineNum":"  116","line":"   *  @return   Nothing."},
{"lineNum":"  117","line":"   *"},
{"lineNum":"  118","line":"   *  This function swaps the values pointed to by two iterators, not the"},
{"lineNum":"  119","line":"   *  iterators themselves."},
{"lineNum":"  120","line":"  */"},
{"lineNum":"  121","line":"  template<typename _ForwardIterator1, typename _ForwardIterator2>"},
{"lineNum":"  122","line":"    inline void"},
{"lineNum":"  123","line":"    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)"},
{"lineNum":"  124","line":"    {"},
{"lineNum":"  125","line":"      // concept requirements"},
{"lineNum":"  126","line":"      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<"},
{"lineNum":"  127","line":"\t\t\t\t  _ForwardIterator1>)"},
{"lineNum":"  128","line":"      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<"},
{"lineNum":"  129","line":"\t\t\t\t  _ForwardIterator2>)"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"#if __cplusplus < 201103L"},
{"lineNum":"  132","line":"      typedef typename iterator_traits<_ForwardIterator1>::value_type"},
{"lineNum":"  133","line":"\t_ValueType1;"},
{"lineNum":"  134","line":"      typedef typename iterator_traits<_ForwardIterator2>::value_type"},
{"lineNum":"  135","line":"\t_ValueType2;"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"      __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,"},
{"lineNum":"  138","line":"\t\t\t\t  _ValueType2>)"},
{"lineNum":"  139","line":"      __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,"},
{"lineNum":"  140","line":"\t\t\t\t  _ValueType1>)"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"      typedef typename iterator_traits<_ForwardIterator1>::reference"},
{"lineNum":"  143","line":"\t_ReferenceType1;"},
{"lineNum":"  144","line":"      typedef typename iterator_traits<_ForwardIterator2>::reference"},
{"lineNum":"  145","line":"\t_ReferenceType2;"},
{"lineNum":"  146","line":"      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value"},
{"lineNum":"  147","line":"\t&& __are_same<_ValueType1&, _ReferenceType1>::__value"},
{"lineNum":"  148","line":"\t&& __are_same<_ValueType2&, _ReferenceType2>::__value>::"},
{"lineNum":"  149","line":"\titer_swap(__a, __b);"},
{"lineNum":"  150","line":"#else"},
{"lineNum":"  151","line":"      swap(*__a, *__b);"},
{"lineNum":"  152","line":"#endif"},
{"lineNum":"  153","line":"    }"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"  /**"},
{"lineNum":"  156","line":"   *  @brief Swap the elements of two sequences."},
{"lineNum":"  157","line":"   *  @ingroup mutating_algorithms"},
{"lineNum":"  158","line":"   *  @param  __first1  A forward iterator."},
{"lineNum":"  159","line":"   *  @param  __last1   A forward iterator."},
{"lineNum":"  160","line":"   *  @param  __first2  A forward iterator."},
{"lineNum":"  161","line":"   *  @return   An iterator equal to @p first2+(last1-first1)."},
{"lineNum":"  162","line":"   *"},
{"lineNum":"  163","line":"   *  Swaps each element in the range @p [first1,last1) with the"},
{"lineNum":"  164","line":"   *  corresponding element in the range @p [first2,(last1-first1))."},
{"lineNum":"  165","line":"   *  The ranges must not overlap."},
{"lineNum":"  166","line":"  */"},
{"lineNum":"  167","line":"  template<typename _ForwardIterator1, typename _ForwardIterator2>"},
{"lineNum":"  168","line":"    _ForwardIterator2"},
{"lineNum":"  169","line":"    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,"},
{"lineNum":"  170","line":"\t\t_ForwardIterator2 __first2)"},
{"lineNum":"  171","line":"    {"},
{"lineNum":"  172","line":"      // concept requirements"},
{"lineNum":"  173","line":"      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<"},
{"lineNum":"  174","line":"\t\t\t\t  _ForwardIterator1>)"},
{"lineNum":"  175","line":"      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<"},
{"lineNum":"  176","line":"\t\t\t\t  _ForwardIterator2>)"},
{"lineNum":"  177","line":"      __glibcxx_requires_valid_range(__first1, __last1);"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"      for (; __first1 != __last1; ++__first1, (void)++__first2)"},
{"lineNum":"  180","line":"\tstd::iter_swap(__first1, __first2);"},
{"lineNum":"  181","line":"      return __first2;"},
{"lineNum":"  182","line":"    }"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"  /**"},
{"lineNum":"  185","line":"   *  @brief This does what you think it does."},
{"lineNum":"  186","line":"   *  @ingroup sorting_algorithms"},
{"lineNum":"  187","line":"   *  @param  __a  A thing of arbitrary type."},
{"lineNum":"  188","line":"   *  @param  __b  Another thing of arbitrary type."},
{"lineNum":"  189","line":"   *  @return   The lesser of the parameters."},
{"lineNum":"  190","line":"   *"},
{"lineNum":"  191","line":"   *  This is the simple classic generic implementation.  It will work on"},
{"lineNum":"  192","line":"   *  temporary expressions, since they are only evaluated once, unlike a"},
{"lineNum":"  193","line":"   *  preprocessor macro."},
{"lineNum":"  194","line":"  */"},
{"lineNum":"  195","line":"  template<typename _Tp>"},
{"lineNum":"  196","line":"    _GLIBCXX14_CONSTEXPR"},
{"lineNum":"  197","line":"    inline const _Tp&"},
{"lineNum":"  198","line":"    min(const _Tp& __a, const _Tp& __b)","class":"lineCov","hits":"1","order":"91","possible_hits":"1",},
{"lineNum":"  199","line":"    {"},
{"lineNum":"  200","line":"      // concept requirements"},
{"lineNum":"  201","line":"      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)"},
{"lineNum":"  202","line":"      //return __b < __a ? __b : __a;"},
{"lineNum":"  203","line":"      if (__b < __a)","class":"lineCov","hits":"2","order":"92","possible_hits":"2",},
{"lineNum":"  204","line":"\treturn __b;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":"      return __a;","class":"lineCov","hits":"1","order":"93","possible_hits":"1",},
{"lineNum":"  206","line":"    }","class":"linePartCov","hits":"1","order":"94","possible_hits":"2",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"  /**"},
{"lineNum":"  209","line":"   *  @brief This does what you think it does."},
{"lineNum":"  210","line":"   *  @ingroup sorting_algorithms"},
{"lineNum":"  211","line":"   *  @param  __a  A thing of arbitrary type."},
{"lineNum":"  212","line":"   *  @param  __b  Another thing of arbitrary type."},
{"lineNum":"  213","line":"   *  @return   The greater of the parameters."},
{"lineNum":"  214","line":"   *"},
{"lineNum":"  215","line":"   *  This is the simple classic generic implementation.  It will work on"},
{"lineNum":"  216","line":"   *  temporary expressions, since they are only evaluated once, unlike a"},
{"lineNum":"  217","line":"   *  preprocessor macro."},
{"lineNum":"  218","line":"  */"},
{"lineNum":"  219","line":"  template<typename _Tp>"},
{"lineNum":"  220","line":"    _GLIBCXX14_CONSTEXPR"},
{"lineNum":"  221","line":"    inline const _Tp&"},
{"lineNum":"  222","line":"    max(const _Tp& __a, const _Tp& __b)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":"    {"},
{"lineNum":"  224","line":"      // concept requirements"},
{"lineNum":"  225","line":"      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)"},
{"lineNum":"  226","line":"      //return  __a < __b ? __b : __a;"},
{"lineNum":"  227","line":"      if (__a < __b)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  228","line":"\treturn __b;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  229","line":"      return __a;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"  /**"},
{"lineNum":"  233","line":"   *  @brief This does what you think it does."},
{"lineNum":"  234","line":"   *  @ingroup sorting_algorithms"},
{"lineNum":"  235","line":"   *  @param  __a  A thing of arbitrary type."},
{"lineNum":"  236","line":"   *  @param  __b  Another thing of arbitrary type."},
{"lineNum":"  237","line":"   *  @param  __comp  A @link comparison_functors comparison functor@endlink."},
{"lineNum":"  238","line":"   *  @return   The lesser of the parameters."},
{"lineNum":"  239","line":"   *"},
{"lineNum":"  240","line":"   *  This will work on temporary expressions, since they are only evaluated"},
{"lineNum":"  241","line":"   *  once, unlike a preprocessor macro."},
{"lineNum":"  242","line":"  */"},
{"lineNum":"  243","line":"  template<typename _Tp, typename _Compare>"},
{"lineNum":"  244","line":"    _GLIBCXX14_CONSTEXPR"},
{"lineNum":"  245","line":"    inline const _Tp&"},
{"lineNum":"  246","line":"    min(const _Tp& __a, const _Tp& __b, _Compare __comp)"},
{"lineNum":"  247","line":"    {"},
{"lineNum":"  248","line":"      //return __comp(__b, __a) ? __b : __a;"},
{"lineNum":"  249","line":"      if (__comp(__b, __a))"},
{"lineNum":"  250","line":"\treturn __b;"},
{"lineNum":"  251","line":"      return __a;"},
{"lineNum":"  252","line":"    }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"  /**"},
{"lineNum":"  255","line":"   *  @brief This does what you think it does."},
{"lineNum":"  256","line":"   *  @ingroup sorting_algorithms"},
{"lineNum":"  257","line":"   *  @param  __a  A thing of arbitrary type."},
{"lineNum":"  258","line":"   *  @param  __b  Another thing of arbitrary type."},
{"lineNum":"  259","line":"   *  @param  __comp  A @link comparison_functors comparison functor@endlink."},
{"lineNum":"  260","line":"   *  @return   The greater of the parameters."},
{"lineNum":"  261","line":"   *"},
{"lineNum":"  262","line":"   *  This will work on temporary expressions, since they are only evaluated"},
{"lineNum":"  263","line":"   *  once, unlike a preprocessor macro."},
{"lineNum":"  264","line":"  */"},
{"lineNum":"  265","line":"  template<typename _Tp, typename _Compare>"},
{"lineNum":"  266","line":"    _GLIBCXX14_CONSTEXPR"},
{"lineNum":"  267","line":"    inline const _Tp&"},
{"lineNum":"  268","line":"    max(const _Tp& __a, const _Tp& __b, _Compare __comp)"},
{"lineNum":"  269","line":"    {"},
{"lineNum":"  270","line":"      //return __comp(__a, __b) ? __b : __a;"},
{"lineNum":"  271","line":"      if (__comp(__a, __b))"},
{"lineNum":"  272","line":"\treturn __b;"},
{"lineNum":"  273","line":"      return __a;"},
{"lineNum":"  274","line":"    }"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"  // Fallback implementation of the function in bits/stl_iterator.h used to"},
{"lineNum":"  277","line":"  // remove the __normal_iterator wrapper. See copy, fill, ..."},
{"lineNum":"  278","line":"  template<typename _Iterator>"},
{"lineNum":"  279","line":"    inline _Iterator"},
{"lineNum":"  280","line":"    __niter_base(_Iterator __it)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)"},
{"lineNum":"  282","line":"    { return __it; }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"  // Reverse the __niter_base transformation to get a"},
{"lineNum":"  285","line":"  // __normal_iterator back again (this assumes that __normal_iterator"},
{"lineNum":"  286","line":"  // is only used to wrap random access iterators, like pointers)."},
{"lineNum":"  287","line":"  template<typename _From, typename _To>"},
{"lineNum":"  288","line":"    inline _From"},
{"lineNum":"  289","line":"    __niter_wrap(_From __from, _To __res)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  290","line":"    { return __from + (__res - std::__niter_base(__from)); }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"  // No need to wrap, iterator already has the right type."},
{"lineNum":"  293","line":"  template<typename _Iterator>"},
{"lineNum":"  294","line":"    inline _Iterator"},
{"lineNum":"  295","line":"    __niter_wrap(const _Iterator&, _Iterator __res)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  296","line":"    { return __res; }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"  // All of these auxiliary structs serve two purposes.  (1) Replace"},
{"lineNum":"  299","line":"  // calls to copy with memmove whenever possible.  (Memmove, not memcpy,"},
{"lineNum":"  300","line":"  // because the input and output ranges are permitted to overlap.)"},
{"lineNum":"  301","line":"  // (2) If we\'re using random access iterators, then write the loop as"},
{"lineNum":"  302","line":"  // a for loop with an explicit count."},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"  template<bool _IsMove, bool _IsSimple, typename _Category>"},
{"lineNum":"  305","line":"    struct __copy_move"},
{"lineNum":"  306","line":"    {"},
{"lineNum":"  307","line":"      template<typename _II, typename _OI>"},
{"lineNum":"  308","line":"\tstatic _OI"},
{"lineNum":"  309","line":"\t__copy_m(_II __first, _II __last, _OI __result)"},
{"lineNum":"  310","line":"\t{"},
{"lineNum":"  311","line":"\t  for (; __first != __last; ++__result, (void)++__first)"},
{"lineNum":"  312","line":"\t    *__result = *__first;"},
{"lineNum":"  313","line":"\t  return __result;"},
{"lineNum":"  314","line":"\t}"},
{"lineNum":"  315","line":"    };"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  318","line":"  template<typename _Category>"},
{"lineNum":"  319","line":"    struct __copy_move<true, false, _Category>"},
{"lineNum":"  320","line":"    {"},
{"lineNum":"  321","line":"      template<typename _II, typename _OI>"},
{"lineNum":"  322","line":"\tstatic _OI"},
{"lineNum":"  323","line":"\t__copy_m(_II __first, _II __last, _OI __result)"},
{"lineNum":"  324","line":"\t{"},
{"lineNum":"  325","line":"\t  for (; __first != __last; ++__result, (void)++__first)"},
{"lineNum":"  326","line":"\t    *__result = std::move(*__first);"},
{"lineNum":"  327","line":"\t  return __result;"},
{"lineNum":"  328","line":"\t}"},
{"lineNum":"  329","line":"    };"},
{"lineNum":"  330","line":"#endif"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"  template<>"},
{"lineNum":"  333","line":"    struct __copy_move<false, false, random_access_iterator_tag>"},
{"lineNum":"  334","line":"    {"},
{"lineNum":"  335","line":"      template<typename _II, typename _OI>"},
{"lineNum":"  336","line":"\tstatic _OI"},
{"lineNum":"  337","line":"\t__copy_m(_II __first, _II __last, _OI __result)"},
{"lineNum":"  338","line":"\t{"},
{"lineNum":"  339","line":"\t  typedef typename iterator_traits<_II>::difference_type _Distance;"},
{"lineNum":"  340","line":"\t  for(_Distance __n = __last - __first; __n > 0; --__n)"},
{"lineNum":"  341","line":"\t    {"},
{"lineNum":"  342","line":"\t      *__result = *__first;"},
{"lineNum":"  343","line":"\t      ++__first;"},
{"lineNum":"  344","line":"\t      ++__result;"},
{"lineNum":"  345","line":"\t    }"},
{"lineNum":"  346","line":"\t  return __result;"},
{"lineNum":"  347","line":"\t}"},
{"lineNum":"  348","line":"    };"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  351","line":"  template<>"},
{"lineNum":"  352","line":"    struct __copy_move<true, false, random_access_iterator_tag>"},
{"lineNum":"  353","line":"    {"},
{"lineNum":"  354","line":"      template<typename _II, typename _OI>"},
{"lineNum":"  355","line":"\tstatic _OI"},
{"lineNum":"  356","line":"\t__copy_m(_II __first, _II __last, _OI __result)"},
{"lineNum":"  357","line":"\t{"},
{"lineNum":"  358","line":"\t  typedef typename iterator_traits<_II>::difference_type _Distance;"},
{"lineNum":"  359","line":"\t  for(_Distance __n = __last - __first; __n > 0; --__n)"},
{"lineNum":"  360","line":"\t    {"},
{"lineNum":"  361","line":"\t      *__result = std::move(*__first);"},
{"lineNum":"  362","line":"\t      ++__first;"},
{"lineNum":"  363","line":"\t      ++__result;"},
{"lineNum":"  364","line":"\t    }"},
{"lineNum":"  365","line":"\t  return __result;"},
{"lineNum":"  366","line":"\t}"},
{"lineNum":"  367","line":"    };"},
{"lineNum":"  368","line":"#endif"},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"  template<bool _IsMove>"},
{"lineNum":"  371","line":"    struct __copy_move<_IsMove, true, random_access_iterator_tag>"},
{"lineNum":"  372","line":"    {"},
{"lineNum":"  373","line":"      template<typename _Tp>"},
{"lineNum":"  374","line":"\tstatic _Tp*"},
{"lineNum":"  375","line":"\t__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  376","line":"\t{"},
{"lineNum":"  377","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  378","line":"\t  using __assignable = conditional<_IsMove,"},
{"lineNum":"  379","line":"\t\t\t\t\t   is_move_assignable<_Tp>,"},
{"lineNum":"  380","line":"\t\t\t\t\t   is_copy_assignable<_Tp>>;"},
{"lineNum":"  381","line":"\t  // trivial types can have deleted assignment"},
{"lineNum":"  382","line":"\t  static_assert( __assignable::type::value, \"type is not assignable\" );"},
{"lineNum":"  383","line":"#endif"},
{"lineNum":"  384","line":"\t  const ptrdiff_t _Num = __last - __first;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  385","line":"\t  if (_Num)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  386","line":"\t    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  387","line":"\t  return __result + _Num;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  388","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  389","line":"    };"},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"  template<bool _IsMove, typename _II, typename _OI>"},
{"lineNum":"  392","line":"    inline _OI"},
{"lineNum":"  393","line":"    __copy_move_a(_II __first, _II __last, _OI __result)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  394","line":"    {"},
{"lineNum":"  395","line":"      typedef typename iterator_traits<_II>::value_type _ValueTypeI;"},
{"lineNum":"  396","line":"      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;"},
{"lineNum":"  397","line":"      typedef typename iterator_traits<_II>::iterator_category _Category;"},
{"lineNum":"  398","line":"      const bool __simple = (__is_trivially_copyable(_ValueTypeI)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  399","line":"\t\t\t     && __is_pointer<_II>::__value"},
{"lineNum":"  400","line":"\t\t\t     && __is_pointer<_OI>::__value"},
{"lineNum":"  401","line":"\t\t\t     && __are_same<_ValueTypeI, _ValueTypeO>::__value);"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"      return std::__copy_move<_IsMove, __simple,"},
{"lineNum":"  404","line":"\t\t\t      _Category>::__copy_m(__first, __last, __result);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  405","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"  // Helpers for streambuf iterators (either istream or ostream)."},
{"lineNum":"  408","line":"  // NB: avoid including <iosfwd>, relatively large."},
{"lineNum":"  409","line":"  template<typename _CharT>"},
{"lineNum":"  410","line":"    struct char_traits;"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"  template<typename _CharT, typename _Traits>"},
{"lineNum":"  413","line":"    class istreambuf_iterator;"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"  template<typename _CharT, typename _Traits>"},
{"lineNum":"  416","line":"    class ostreambuf_iterator;"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"  template<bool _IsMove, typename _CharT>"},
{"lineNum":"  419","line":"    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,"},
{"lineNum":"  420","line":"\t     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type"},
{"lineNum":"  421","line":"    __copy_move_a2(_CharT*, _CharT*,"},
{"lineNum":"  422","line":"\t\t   ostreambuf_iterator<_CharT, char_traits<_CharT> >);"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"  template<bool _IsMove, typename _CharT>"},
{"lineNum":"  425","line":"    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,"},
{"lineNum":"  426","line":"\t     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type"},
{"lineNum":"  427","line":"    __copy_move_a2(const _CharT*, const _CharT*,"},
{"lineNum":"  428","line":"\t\t   ostreambuf_iterator<_CharT, char_traits<_CharT> >);"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"  template<bool _IsMove, typename _CharT>"},
{"lineNum":"  431","line":"    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,"},
{"lineNum":"  432","line":"\t\t\t\t    _CharT*>::__type"},
{"lineNum":"  433","line":"    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,"},
{"lineNum":"  434","line":"\t\t   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"  template<bool _IsMove, typename _II, typename _OI>"},
{"lineNum":"  437","line":"    inline _OI"},
{"lineNum":"  438","line":"    __copy_move_a2(_II __first, _II __last, _OI __result)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  439","line":"    {"},
{"lineNum":"  440","line":"      return std::__niter_wrap(__result,","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  441","line":"\t\tstd::__copy_move_a<_IsMove>(std::__niter_base(__first),"},
{"lineNum":"  442","line":"\t\t\t\t\t    std::__niter_base(__last),"},
{"lineNum":"  443","line":"\t\t\t\t\t    std::__niter_base(__result)));"},
{"lineNum":"  444","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"  /**"},
{"lineNum":"  447","line":"   *  @brief Copies the range [first,last) into result."},
{"lineNum":"  448","line":"   *  @ingroup mutating_algorithms"},
{"lineNum":"  449","line":"   *  @param  __first  An input iterator."},
{"lineNum":"  450","line":"   *  @param  __last   An input iterator."},
{"lineNum":"  451","line":"   *  @param  __result An output iterator."},
{"lineNum":"  452","line":"   *  @return   result + (last - first)"},
{"lineNum":"  453","line":"   *"},
{"lineNum":"  454","line":"   *  This inline function will boil down to a call to @c memmove whenever"},
{"lineNum":"  455","line":"   *  possible.  Failing that, if random access iterators are passed, then the"},
{"lineNum":"  456","line":"   *  loop count will be known (and therefore a candidate for compiler"},
{"lineNum":"  457","line":"   *  optimizations such as unrolling).  Result may not be contained within"},
{"lineNum":"  458","line":"   *  [first,last); the copy_backward function should be used instead."},
{"lineNum":"  459","line":"   *"},
{"lineNum":"  460","line":"   *  Note that the end of the output range is permitted to be contained"},
{"lineNum":"  461","line":"   *  within [first,last)."},
{"lineNum":"  462","line":"  */"},
{"lineNum":"  463","line":"  template<typename _II, typename _OI>"},
{"lineNum":"  464","line":"    inline _OI"},
{"lineNum":"  465","line":"    copy(_II __first, _II __last, _OI __result)","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  466","line":"    {"},
{"lineNum":"  467","line":"      // concept requirements"},
{"lineNum":"  468","line":"      __glibcxx_function_requires(_InputIteratorConcept<_II>)"},
{"lineNum":"  469","line":"      __glibcxx_function_requires(_OutputIteratorConcept<_OI,"},
{"lineNum":"  470","line":"\t    typename iterator_traits<_II>::value_type>)"},
{"lineNum":"  471","line":"      __glibcxx_requires_can_increment_range(__first, __last, __result);"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"      return std::__copy_move_a2<__is_move_iterator<_II>::__value>"},
{"lineNum":"  474","line":"\t     (std::__miter_base(__first), std::__miter_base(__last), __result);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  475","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  478","line":"  /**"},
{"lineNum":"  479","line":"   *  @brief Moves the range [first,last) into result."},
{"lineNum":"  480","line":"   *  @ingroup mutating_algorithms"},
{"lineNum":"  481","line":"   *  @param  __first  An input iterator."},
{"lineNum":"  482","line":"   *  @param  __last   An input iterator."},
{"lineNum":"  483","line":"   *  @param  __result An output iterator."},
{"lineNum":"  484","line":"   *  @return   result + (last - first)"},
{"lineNum":"  485","line":"   *"},
{"lineNum":"  486","line":"   *  This inline function will boil down to a call to @c memmove whenever"},
{"lineNum":"  487","line":"   *  possible.  Failing that, if random access iterators are passed, then the"},
{"lineNum":"  488","line":"   *  loop count will be known (and therefore a candidate for compiler"},
{"lineNum":"  489","line":"   *  optimizations such as unrolling).  Result may not be contained within"},
{"lineNum":"  490","line":"   *  [first,last); the move_backward function should be used instead."},
{"lineNum":"  491","line":"   *"},
{"lineNum":"  492","line":"   *  Note that the end of the output range is permitted to be contained"},
{"lineNum":"  493","line":"   *  within [first,last)."},
{"lineNum":"  494","line":"  */"},
{"lineNum":"  495","line":"  template<typename _II, typename _OI>"},
{"lineNum":"  496","line":"    inline _OI"},
{"lineNum":"  497","line":"    move(_II __first, _II __last, _OI __result)"},
{"lineNum":"  498","line":"    {"},
{"lineNum":"  499","line":"      // concept requirements"},
{"lineNum":"  500","line":"      __glibcxx_function_requires(_InputIteratorConcept<_II>)"},
{"lineNum":"  501","line":"      __glibcxx_function_requires(_OutputIteratorConcept<_OI,"},
{"lineNum":"  502","line":"\t    typename iterator_traits<_II>::value_type>)"},
{"lineNum":"  503","line":"      __glibcxx_requires_can_increment_range(__first, __last, __result);"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"      return std::__copy_move_a2<true>(std::__miter_base(__first),"},
{"lineNum":"  506","line":"\t\t\t\t       std::__miter_base(__last), __result);"},
{"lineNum":"  507","line":"    }"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"#define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)"},
{"lineNum":"  510","line":"#else"},
{"lineNum":"  511","line":"#define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)"},
{"lineNum":"  512","line":"#endif"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"  template<bool, bool, typename>"},
{"lineNum":"  515","line":"    struct __copy_move_backward"},
{"lineNum":"  516","line":"    {"},
{"lineNum":"  517","line":"      template<typename _BI1, typename _BI2>"},
{"lineNum":"  518","line":"\tstatic _BI2"},
{"lineNum":"  519","line":"\t__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)"},
{"lineNum":"  520","line":"\t{"},
{"lineNum":"  521","line":"\t  while (__first != __last)"},
{"lineNum":"  522","line":"\t    *--__result = *--__last;"},
{"lineNum":"  523","line":"\t  return __result;"},
{"lineNum":"  524","line":"\t}"},
{"lineNum":"  525","line":"    };"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  528","line":"  template<typename _Category>"},
{"lineNum":"  529","line":"    struct __copy_move_backward<true, false, _Category>"},
{"lineNum":"  530","line":"    {"},
{"lineNum":"  531","line":"      template<typename _BI1, typename _BI2>"},
{"lineNum":"  532","line":"\tstatic _BI2"},
{"lineNum":"  533","line":"\t__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)"},
{"lineNum":"  534","line":"\t{"},
{"lineNum":"  535","line":"\t  while (__first != __last)"},
{"lineNum":"  536","line":"\t    *--__result = std::move(*--__last);"},
{"lineNum":"  537","line":"\t  return __result;"},
{"lineNum":"  538","line":"\t}"},
{"lineNum":"  539","line":"    };"},
{"lineNum":"  540","line":"#endif"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"  template<>"},
{"lineNum":"  543","line":"    struct __copy_move_backward<false, false, random_access_iterator_tag>"},
{"lineNum":"  544","line":"    {"},
{"lineNum":"  545","line":"      template<typename _BI1, typename _BI2>"},
{"lineNum":"  546","line":"\tstatic _BI2"},
{"lineNum":"  547","line":"\t__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)"},
{"lineNum":"  548","line":"\t{"},
{"lineNum":"  549","line":"\t  typename iterator_traits<_BI1>::difference_type __n;"},
{"lineNum":"  550","line":"\t  for (__n = __last - __first; __n > 0; --__n)"},
{"lineNum":"  551","line":"\t    *--__result = *--__last;"},
{"lineNum":"  552","line":"\t  return __result;"},
{"lineNum":"  553","line":"\t}"},
{"lineNum":"  554","line":"    };"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  557","line":"  template<>"},
{"lineNum":"  558","line":"    struct __copy_move_backward<true, false, random_access_iterator_tag>"},
{"lineNum":"  559","line":"    {"},
{"lineNum":"  560","line":"      template<typename _BI1, typename _BI2>"},
{"lineNum":"  561","line":"\tstatic _BI2"},
{"lineNum":"  562","line":"\t__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)"},
{"lineNum":"  563","line":"\t{"},
{"lineNum":"  564","line":"\t  typename iterator_traits<_BI1>::difference_type __n;"},
{"lineNum":"  565","line":"\t  for (__n = __last - __first; __n > 0; --__n)"},
{"lineNum":"  566","line":"\t    *--__result = std::move(*--__last);"},
{"lineNum":"  567","line":"\t  return __result;"},
{"lineNum":"  568","line":"\t}"},
{"lineNum":"  569","line":"    };"},
{"lineNum":"  570","line":"#endif"},
{"lineNum":"  571","line":""},
{"lineNum":"  572","line":"  template<bool _IsMove>"},
{"lineNum":"  573","line":"    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>"},
{"lineNum":"  574","line":"    {"},
{"lineNum":"  575","line":"      template<typename _Tp>"},
{"lineNum":"  576","line":"\tstatic _Tp*"},
{"lineNum":"  577","line":"\t__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  578","line":"\t{"},
{"lineNum":"  579","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  580","line":"\t  using __assignable = conditional<_IsMove,"},
{"lineNum":"  581","line":"\t\t\t\t\t   is_move_assignable<_Tp>,"},
{"lineNum":"  582","line":"\t\t\t\t\t   is_copy_assignable<_Tp>>;"},
{"lineNum":"  583","line":"\t  // trivial types can have deleted assignment"},
{"lineNum":"  584","line":"\t  static_assert( __assignable::type::value, \"type is not assignable\" );"},
{"lineNum":"  585","line":"#endif"},
{"lineNum":"  586","line":"\t  const ptrdiff_t _Num = __last - __first;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  587","line":"\t  if (_Num)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  588","line":"\t    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  589","line":"\t  return __result - _Num;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  590","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  591","line":"    };"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"  template<bool _IsMove, typename _BI1, typename _BI2>"},
{"lineNum":"  594","line":"    inline _BI2"},
{"lineNum":"  595","line":"    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  596","line":"    {"},
{"lineNum":"  597","line":"      typedef typename iterator_traits<_BI1>::value_type _ValueType1;"},
{"lineNum":"  598","line":"      typedef typename iterator_traits<_BI2>::value_type _ValueType2;"},
{"lineNum":"  599","line":"      typedef typename iterator_traits<_BI1>::iterator_category _Category;"},
{"lineNum":"  600","line":"      const bool __simple = (__is_trivially_copyable(_ValueType1)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  601","line":"\t\t\t     && __is_pointer<_BI1>::__value"},
{"lineNum":"  602","line":"\t\t\t     && __is_pointer<_BI2>::__value"},
{"lineNum":"  603","line":"\t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"      return std::__copy_move_backward<_IsMove, __simple,"},
{"lineNum":"  606","line":"\t\t\t\t       _Category>::__copy_move_b(__first,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  607","line":"\t\t\t\t\t\t\t\t __last,"},
{"lineNum":"  608","line":"\t\t\t\t\t\t\t\t __result);"},
{"lineNum":"  609","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"  template<bool _IsMove, typename _BI1, typename _BI2>"},
{"lineNum":"  612","line":"    inline _BI2"},
{"lineNum":"  613","line":"    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  614","line":"    {"},
{"lineNum":"  615","line":"      return std::__niter_wrap(__result,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  616","line":"\t\tstd::__copy_move_backward_a<_IsMove>"},
{"lineNum":"  617","line":"\t\t  (std::__niter_base(__first), std::__niter_base(__last),"},
{"lineNum":"  618","line":"\t\t   std::__niter_base(__result)));"},
{"lineNum":"  619","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"  /**"},
{"lineNum":"  622","line":"   *  @brief Copies the range [first,last) into result."},
{"lineNum":"  623","line":"   *  @ingroup mutating_algorithms"},
{"lineNum":"  624","line":"   *  @param  __first  A bidirectional iterator."},
{"lineNum":"  625","line":"   *  @param  __last   A bidirectional iterator."},
{"lineNum":"  626","line":"   *  @param  __result A bidirectional iterator."},
{"lineNum":"  627","line":"   *  @return   result - (last - first)"},
{"lineNum":"  628","line":"   *"},
{"lineNum":"  629","line":"   *  The function has the same effect as copy, but starts at the end of the"},
{"lineNum":"  630","line":"   *  range and works its way to the start, returning the start of the result."},
{"lineNum":"  631","line":"   *  This inline function will boil down to a call to @c memmove whenever"},
{"lineNum":"  632","line":"   *  possible.  Failing that, if random access iterators are passed, then the"},
{"lineNum":"  633","line":"   *  loop count will be known (and therefore a candidate for compiler"},
{"lineNum":"  634","line":"   *  optimizations such as unrolling)."},
{"lineNum":"  635","line":"   *"},
{"lineNum":"  636","line":"   *  Result may not be in the range (first,last].  Use copy instead.  Note"},
{"lineNum":"  637","line":"   *  that the start of the output range may overlap [first,last)."},
{"lineNum":"  638","line":"  */"},
{"lineNum":"  639","line":"  template<typename _BI1, typename _BI2>"},
{"lineNum":"  640","line":"    inline _BI2"},
{"lineNum":"  641","line":"    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)"},
{"lineNum":"  642","line":"    {"},
{"lineNum":"  643","line":"      // concept requirements"},
{"lineNum":"  644","line":"      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)"},
{"lineNum":"  645","line":"      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)"},
{"lineNum":"  646","line":"      __glibcxx_function_requires(_ConvertibleConcept<"},
{"lineNum":"  647","line":"\t    typename iterator_traits<_BI1>::value_type,"},
{"lineNum":"  648","line":"\t    typename iterator_traits<_BI2>::value_type>)"},
{"lineNum":"  649","line":"      __glibcxx_requires_can_decrement_range(__first, __last, __result);"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>"},
{"lineNum":"  652","line":"\t     (std::__miter_base(__first), std::__miter_base(__last), __result);"},
{"lineNum":"  653","line":"    }"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  656","line":"  /**"},
{"lineNum":"  657","line":"   *  @brief Moves the range [first,last) into result."},
{"lineNum":"  658","line":"   *  @ingroup mutating_algorithms"},
{"lineNum":"  659","line":"   *  @param  __first  A bidirectional iterator."},
{"lineNum":"  660","line":"   *  @param  __last   A bidirectional iterator."},
{"lineNum":"  661","line":"   *  @param  __result A bidirectional iterator."},
{"lineNum":"  662","line":"   *  @return   result - (last - first)"},
{"lineNum":"  663","line":"   *"},
{"lineNum":"  664","line":"   *  The function has the same effect as move, but starts at the end of the"},
{"lineNum":"  665","line":"   *  range and works its way to the start, returning the start of the result."},
{"lineNum":"  666","line":"   *  This inline function will boil down to a call to @c memmove whenever"},
{"lineNum":"  667","line":"   *  possible.  Failing that, if random access iterators are passed, then the"},
{"lineNum":"  668","line":"   *  loop count will be known (and therefore a candidate for compiler"},
{"lineNum":"  669","line":"   *  optimizations such as unrolling)."},
{"lineNum":"  670","line":"   *"},
{"lineNum":"  671","line":"   *  Result may not be in the range (first,last].  Use move instead.  Note"},
{"lineNum":"  672","line":"   *  that the start of the output range may overlap [first,last)."},
{"lineNum":"  673","line":"  */"},
{"lineNum":"  674","line":"  template<typename _BI1, typename _BI2>"},
{"lineNum":"  675","line":"    inline _BI2"},
{"lineNum":"  676","line":"    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  677","line":"    {"},
{"lineNum":"  678","line":"      // concept requirements"},
{"lineNum":"  679","line":"      __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)"},
{"lineNum":"  680","line":"      __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)"},
{"lineNum":"  681","line":"      __glibcxx_function_requires(_ConvertibleConcept<"},
{"lineNum":"  682","line":"\t    typename iterator_traits<_BI1>::value_type,"},
{"lineNum":"  683","line":"\t    typename iterator_traits<_BI2>::value_type>)"},
{"lineNum":"  684","line":"      __glibcxx_requires_can_decrement_range(__first, __last, __result);"},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  687","line":"\t\t\t\t\t\tstd::__miter_base(__last),"},
{"lineNum":"  688","line":"\t\t\t\t\t\t__result);"},
{"lineNum":"  689","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"#define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)"},
{"lineNum":"  692","line":"#else"},
{"lineNum":"  693","line":"#define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)"},
{"lineNum":"  694","line":"#endif"},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"  template<typename _ForwardIterator, typename _Tp>"},
{"lineNum":"  697","line":"    inline typename"},
{"lineNum":"  698","line":"    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type"},
{"lineNum":"  699","line":"    __fill_a(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  700","line":" \t     const _Tp& __value)"},
{"lineNum":"  701","line":"    {"},
{"lineNum":"  702","line":"      for (; __first != __last; ++__first)"},
{"lineNum":"  703","line":"\t*__first = __value;"},
{"lineNum":"  704","line":"    }"},
{"lineNum":"  705","line":""},
{"lineNum":"  706","line":"  template<typename _ForwardIterator, typename _Tp>"},
{"lineNum":"  707","line":"    inline typename"},
{"lineNum":"  708","line":"    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type"},
{"lineNum":"  709","line":"    __fill_a(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  710","line":"\t     const _Tp& __value)"},
{"lineNum":"  711","line":"    {"},
{"lineNum":"  712","line":"      const _Tp __tmp = __value;"},
{"lineNum":"  713","line":"      for (; __first != __last; ++__first)"},
{"lineNum":"  714","line":"\t*__first = __tmp;"},
{"lineNum":"  715","line":"    }"},
{"lineNum":"  716","line":""},
{"lineNum":"  717","line":"  // Specialization: for char types we can use memset."},
{"lineNum":"  718","line":"  template<typename _Tp>"},
{"lineNum":"  719","line":"    inline typename"},
{"lineNum":"  720","line":"    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type"},
{"lineNum":"  721","line":"    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  722","line":"    {"},
{"lineNum":"  723","line":"      const _Tp __tmp = __c;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  724","line":"      if (const size_t __len = __last - __first)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  725","line":"\t__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  726","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":"  /**"},
{"lineNum":"  729","line":"   *  @brief Fills the range [first,last) with copies of value."},
{"lineNum":"  730","line":"   *  @ingroup mutating_algorithms"},
{"lineNum":"  731","line":"   *  @param  __first  A forward iterator."},
{"lineNum":"  732","line":"   *  @param  __last   A forward iterator."},
{"lineNum":"  733","line":"   *  @param  __value  A reference-to-const of arbitrary type."},
{"lineNum":"  734","line":"   *  @return   Nothing."},
{"lineNum":"  735","line":"   *"},
{"lineNum":"  736","line":"   *  This function fills a range with copies of the same value.  For char"},
{"lineNum":"  737","line":"   *  types filling contiguous areas of memory, this becomes an inline call"},
{"lineNum":"  738","line":"   *  to @c memset or @c wmemset."},
{"lineNum":"  739","line":"  */"},
{"lineNum":"  740","line":"  template<typename _ForwardIterator, typename _Tp>"},
{"lineNum":"  741","line":"    inline void"},
{"lineNum":"  742","line":"    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)"},
{"lineNum":"  743","line":"    {"},
{"lineNum":"  744","line":"      // concept requirements"},
{"lineNum":"  745","line":"      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<"},
{"lineNum":"  746","line":"\t\t\t\t  _ForwardIterator>)"},
{"lineNum":"  747","line":"      __glibcxx_requires_valid_range(__first, __last);"},
{"lineNum":"  748","line":""},
{"lineNum":"  749","line":"      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),"},
{"lineNum":"  750","line":"\t\t    __value);"},
{"lineNum":"  751","line":"    }"},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"  template<typename _OutputIterator, typename _Size, typename _Tp>"},
{"lineNum":"  754","line":"    inline typename"},
{"lineNum":"  755","line":"    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type"},
{"lineNum":"  756","line":"    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)"},
{"lineNum":"  757","line":"    {"},
{"lineNum":"  758","line":"      for (__decltype(__n + 0) __niter = __n;"},
{"lineNum":"  759","line":"\t   __niter > 0; --__niter, (void) ++__first)"},
{"lineNum":"  760","line":"\t*__first = __value;"},
{"lineNum":"  761","line":"      return __first;"},
{"lineNum":"  762","line":"    }"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"  template<typename _OutputIterator, typename _Size, typename _Tp>"},
{"lineNum":"  765","line":"    inline typename"},
{"lineNum":"  766","line":"    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type"},
{"lineNum":"  767","line":"    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)"},
{"lineNum":"  768","line":"    {"},
{"lineNum":"  769","line":"      const _Tp __tmp = __value;"},
{"lineNum":"  770","line":"      for (__decltype(__n + 0) __niter = __n;"},
{"lineNum":"  771","line":"\t   __niter > 0; --__niter, (void) ++__first)"},
{"lineNum":"  772","line":"\t*__first = __tmp;"},
{"lineNum":"  773","line":"      return __first;"},
{"lineNum":"  774","line":"    }"},
{"lineNum":"  775","line":""},
{"lineNum":"  776","line":"  template<typename _Size, typename _Tp>"},
{"lineNum":"  777","line":"    inline typename"},
{"lineNum":"  778","line":"    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type"},
{"lineNum":"  779","line":"    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  780","line":"    {"},
{"lineNum":"  781","line":"      std::__fill_a(__first, __first + __n, __c);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  782","line":"      return __first + __n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  783","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"  /**"},
{"lineNum":"  786","line":"   *  @brief Fills the range [first,first+n) with copies of value."},
{"lineNum":"  787","line":"   *  @ingroup mutating_algorithms"},
{"lineNum":"  788","line":"   *  @param  __first  An output iterator."},
{"lineNum":"  789","line":"   *  @param  __n      The count of copies to perform."},
{"lineNum":"  790","line":"   *  @param  __value  A reference-to-const of arbitrary type."},
{"lineNum":"  791","line":"   *  @return   The iterator at first+n."},
{"lineNum":"  792","line":"   *"},
{"lineNum":"  793","line":"   *  This function fills a range with copies of the same value.  For char"},
{"lineNum":"  794","line":"   *  types filling contiguous areas of memory, this becomes an inline call"},
{"lineNum":"  795","line":"   *  to @c memset or @ wmemset."},
{"lineNum":"  796","line":"   *"},
{"lineNum":"  797","line":"   *  _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  798","line":"   *  DR 865. More algorithms that throw away information"},
{"lineNum":"  799","line":"  */"},
{"lineNum":"  800","line":"  template<typename _OI, typename _Size, typename _Tp>"},
{"lineNum":"  801","line":"    inline _OI"},
{"lineNum":"  802","line":"    fill_n(_OI __first, _Size __n, const _Tp& __value)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  803","line":"    {"},
{"lineNum":"  804","line":"      // concept requirements"},
{"lineNum":"  805","line":"      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)"},
{"lineNum":"  806","line":"      __glibcxx_requires_can_increment(__first, __n);"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"      return std::__niter_wrap(__first,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  809","line":"\t\tstd::__fill_n_a(std::__niter_base(__first), __n, __value));"},
{"lineNum":"  810","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"  template<bool _BoolType>"},
{"lineNum":"  813","line":"    struct __equal"},
{"lineNum":"  814","line":"    {"},
{"lineNum":"  815","line":"      template<typename _II1, typename _II2>"},
{"lineNum":"  816","line":"\tstatic bool"},
{"lineNum":"  817","line":"\tequal(_II1 __first1, _II1 __last1, _II2 __first2)"},
{"lineNum":"  818","line":"\t{"},
{"lineNum":"  819","line":"\t  for (; __first1 != __last1; ++__first1, (void) ++__first2)"},
{"lineNum":"  820","line":"\t    if (!(*__first1 == *__first2))"},
{"lineNum":"  821","line":"\t      return false;"},
{"lineNum":"  822","line":"\t  return true;"},
{"lineNum":"  823","line":"\t}"},
{"lineNum":"  824","line":"    };"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"  template<>"},
{"lineNum":"  827","line":"    struct __equal<true>"},
{"lineNum":"  828","line":"    {"},
{"lineNum":"  829","line":"      template<typename _Tp>"},
{"lineNum":"  830","line":"\tstatic bool"},
{"lineNum":"  831","line":"\tequal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  832","line":"\t{"},
{"lineNum":"  833","line":"\t  if (const size_t __len = (__last1 - __first1))","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  834","line":"\t    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  835","line":"\t  return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  836","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  837","line":"    };"},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"  template<typename _II1, typename _II2>"},
{"lineNum":"  840","line":"    inline bool"},
{"lineNum":"  841","line":"    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  842","line":"    {"},
{"lineNum":"  843","line":"      typedef typename iterator_traits<_II1>::value_type _ValueType1;"},
{"lineNum":"  844","line":"      typedef typename iterator_traits<_II2>::value_type _ValueType2;"},
{"lineNum":"  845","line":"      const bool __simple = ((__is_integer<_ValueType1>::__value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  846","line":"\t\t\t      || __is_pointer<_ValueType1>::__value)"},
{"lineNum":"  847","line":"\t\t\t     && __is_pointer<_II1>::__value"},
{"lineNum":"  848","line":"\t\t\t     && __is_pointer<_II2>::__value"},
{"lineNum":"  849","line":"\t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);"},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"      return std::__equal<__simple>::equal(__first1, __last1, __first2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  852","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  853","line":""},
{"lineNum":"  854","line":"  template<typename, typename>"},
{"lineNum":"  855","line":"    struct __lc_rai"},
{"lineNum":"  856","line":"    {"},
{"lineNum":"  857","line":"      template<typename _II1, typename _II2>"},
{"lineNum":"  858","line":"\tstatic _II1"},
{"lineNum":"  859","line":"\t__newlast1(_II1, _II1 __last1, _II2, _II2)"},
{"lineNum":"  860","line":"\t{ return __last1; }"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"      template<typename _II>"},
{"lineNum":"  863","line":"\tstatic bool"},
{"lineNum":"  864","line":"\t__cnd2(_II __first, _II __last)"},
{"lineNum":"  865","line":"\t{ return __first != __last; }"},
{"lineNum":"  866","line":"    };"},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"  template<>"},
{"lineNum":"  869","line":"    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>"},
{"lineNum":"  870","line":"    {"},
{"lineNum":"  871","line":"      template<typename _RAI1, typename _RAI2>"},
{"lineNum":"  872","line":"\tstatic _RAI1"},
{"lineNum":"  873","line":"\t__newlast1(_RAI1 __first1, _RAI1 __last1,"},
{"lineNum":"  874","line":"\t\t   _RAI2 __first2, _RAI2 __last2)"},
{"lineNum":"  875","line":"\t{"},
{"lineNum":"  876","line":"\t  const typename iterator_traits<_RAI1>::difference_type"},
{"lineNum":"  877","line":"\t    __diff1 = __last1 - __first1;"},
{"lineNum":"  878","line":"\t  const typename iterator_traits<_RAI2>::difference_type"},
{"lineNum":"  879","line":"\t    __diff2 = __last2 - __first2;"},
{"lineNum":"  880","line":"\t  return __diff2 < __diff1 ? __first1 + __diff2 : __last1;"},
{"lineNum":"  881","line":"\t}"},
{"lineNum":"  882","line":""},
{"lineNum":"  883","line":"      template<typename _RAI>"},
{"lineNum":"  884","line":"\tstatic bool"},
{"lineNum":"  885","line":"\t__cnd2(_RAI, _RAI)"},
{"lineNum":"  886","line":"\t{ return true; }"},
{"lineNum":"  887","line":"    };"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"  template<typename _II1, typename _II2, typename _Compare>"},
{"lineNum":"  890","line":"    bool"},
{"lineNum":"  891","line":"    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,"},
{"lineNum":"  892","line":"\t\t\t\t   _II2 __first2, _II2 __last2,"},
{"lineNum":"  893","line":"\t\t\t\t   _Compare __comp)"},
{"lineNum":"  894","line":"    {"},
{"lineNum":"  895","line":"      typedef typename iterator_traits<_II1>::iterator_category _Category1;"},
{"lineNum":"  896","line":"      typedef typename iterator_traits<_II2>::iterator_category _Category2;"},
{"lineNum":"  897","line":"      typedef std::__lc_rai<_Category1, _Category2> __rai_type;"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);"},
{"lineNum":"  900","line":"      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);"},
{"lineNum":"  901","line":"\t   ++__first1, (void)++__first2)"},
{"lineNum":"  902","line":"\t{"},
{"lineNum":"  903","line":"\t  if (__comp(__first1, __first2))"},
{"lineNum":"  904","line":"\t    return true;"},
{"lineNum":"  905","line":"\t  if (__comp(__first2, __first1))"},
{"lineNum":"  906","line":"\t    return false;"},
{"lineNum":"  907","line":"\t}"},
{"lineNum":"  908","line":"      return __first1 == __last1 && __first2 != __last2;"},
{"lineNum":"  909","line":"    }"},
{"lineNum":"  910","line":""},
{"lineNum":"  911","line":"  template<bool _BoolType>"},
{"lineNum":"  912","line":"    struct __lexicographical_compare"},
{"lineNum":"  913","line":"    {"},
{"lineNum":"  914","line":"      template<typename _II1, typename _II2>"},
{"lineNum":"  915","line":"\tstatic bool __lc(_II1, _II1, _II2, _II2);"},
{"lineNum":"  916","line":"    };"},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"  template<bool _BoolType>"},
{"lineNum":"  919","line":"    template<typename _II1, typename _II2>"},
{"lineNum":"  920","line":"      bool"},
{"lineNum":"  921","line":"      __lexicographical_compare<_BoolType>::"},
{"lineNum":"  922","line":"      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)"},
{"lineNum":"  923","line":"      {"},
{"lineNum":"  924","line":"\treturn std::__lexicographical_compare_impl(__first1, __last1,"},
{"lineNum":"  925","line":"\t\t\t\t\t\t   __first2, __last2,"},
{"lineNum":"  926","line":"\t\t\t\t\t__gnu_cxx::__ops::__iter_less_iter());"},
{"lineNum":"  927","line":"      }"},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"  template<>"},
{"lineNum":"  930","line":"    struct __lexicographical_compare<true>"},
{"lineNum":"  931","line":"    {"},
{"lineNum":"  932","line":"      template<typename _Tp, typename _Up>"},
{"lineNum":"  933","line":"\tstatic bool"},
{"lineNum":"  934","line":"\t__lc(const _Tp* __first1, const _Tp* __last1,"},
{"lineNum":"  935","line":"\t     const _Up* __first2, const _Up* __last2)"},
{"lineNum":"  936","line":"\t{"},
{"lineNum":"  937","line":"\t  const size_t __len1 = __last1 - __first1;"},
{"lineNum":"  938","line":"\t  const size_t __len2 = __last2 - __first2;"},
{"lineNum":"  939","line":"\t  if (const size_t __len = std::min(__len1, __len2))"},
{"lineNum":"  940","line":"\t    if (int __result = __builtin_memcmp(__first1, __first2, __len))"},
{"lineNum":"  941","line":"\t      return __result < 0;"},
{"lineNum":"  942","line":"\t  return __len1 < __len2;"},
{"lineNum":"  943","line":"\t}"},
{"lineNum":"  944","line":"    };"},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":"  template<typename _II1, typename _II2>"},
{"lineNum":"  947","line":"    inline bool"},
{"lineNum":"  948","line":"    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,"},
{"lineNum":"  949","line":"\t\t\t\t  _II2 __first2, _II2 __last2)"},
{"lineNum":"  950","line":"    {"},
{"lineNum":"  951","line":"      typedef typename iterator_traits<_II1>::value_type _ValueType1;"},
{"lineNum":"  952","line":"      typedef typename iterator_traits<_II2>::value_type _ValueType2;"},
{"lineNum":"  953","line":"      const bool __simple ="},
{"lineNum":"  954","line":"\t(__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value"},
{"lineNum":"  955","line":"\t && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed"},
{"lineNum":"  956","line":"\t && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed"},
{"lineNum":"  957","line":"\t && __is_pointer<_II1>::__value"},
{"lineNum":"  958","line":"\t && __is_pointer<_II2>::__value);"},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,"},
{"lineNum":"  961","line":"\t\t\t\t\t\t\t    __first2, __last2);"},
{"lineNum":"  962","line":"    }"},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"  template<typename _ForwardIterator, typename _Tp, typename _Compare>"},
{"lineNum":"  965","line":"    _ForwardIterator"},
{"lineNum":"  966","line":"    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  967","line":"\t\t  const _Tp& __val, _Compare __comp)"},
{"lineNum":"  968","line":"    {"},
{"lineNum":"  969","line":"      typedef typename iterator_traits<_ForwardIterator>::difference_type"},
{"lineNum":"  970","line":"\t_DistanceType;"},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"      _DistanceType __len = std::distance(__first, __last);"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"      while (__len > 0)"},
{"lineNum":"  975","line":"\t{"},
{"lineNum":"  976","line":"\t  _DistanceType __half = __len >> 1;"},
{"lineNum":"  977","line":"\t  _ForwardIterator __middle = __first;"},
{"lineNum":"  978","line":"\t  std::advance(__middle, __half);"},
{"lineNum":"  979","line":"\t  if (__comp(__middle, __val))"},
{"lineNum":"  980","line":"\t    {"},
{"lineNum":"  981","line":"\t      __first = __middle;"},
{"lineNum":"  982","line":"\t      ++__first;"},
{"lineNum":"  983","line":"\t      __len = __len - __half - 1;"},
{"lineNum":"  984","line":"\t    }"},
{"lineNum":"  985","line":"\t  else"},
{"lineNum":"  986","line":"\t    __len = __half;"},
{"lineNum":"  987","line":"\t}"},
{"lineNum":"  988","line":"      return __first;"},
{"lineNum":"  989","line":"    }"},
{"lineNum":"  990","line":""},
{"lineNum":"  991","line":"  /**"},
{"lineNum":"  992","line":"   *  @brief Finds the first position in which @a val could be inserted"},
{"lineNum":"  993","line":"   *         without changing the ordering."},
{"lineNum":"  994","line":"   *  @param  __first   An iterator."},
{"lineNum":"  995","line":"   *  @param  __last    Another iterator."},
{"lineNum":"  996","line":"   *  @param  __val     The search term."},
{"lineNum":"  997","line":"   *  @return         An iterator pointing to the first element <em>not less"},
{"lineNum":"  998","line":"   *                  than</em> @a val, or end() if every element is less than"},
{"lineNum":"  999","line":"   *                  @a val."},
{"lineNum":" 1000","line":"   *  @ingroup binary_search_algorithms"},
{"lineNum":" 1001","line":"  */"},
{"lineNum":" 1002","line":"  template<typename _ForwardIterator, typename _Tp>"},
{"lineNum":" 1003","line":"    inline _ForwardIterator"},
{"lineNum":" 1004","line":"    lower_bound(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":" 1005","line":"\t\tconst _Tp& __val)"},
{"lineNum":" 1006","line":"    {"},
{"lineNum":" 1007","line":"      // concept requirements"},
{"lineNum":" 1008","line":"      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)"},
{"lineNum":" 1009","line":"      __glibcxx_function_requires(_LessThanOpConcept<"},
{"lineNum":" 1010","line":"\t    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)"},
{"lineNum":" 1011","line":"      __glibcxx_requires_partitioned_lower(__first, __last, __val);"},
{"lineNum":" 1012","line":""},
{"lineNum":" 1013","line":"      return std::__lower_bound(__first, __last, __val,"},
{"lineNum":" 1014","line":"\t\t\t\t__gnu_cxx::__ops::__iter_less_val());"},
{"lineNum":" 1015","line":"    }"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"  /// This is a helper function for the sort routines and for random.tcc."},
{"lineNum":" 1018","line":"  //  Precondition: __n > 0."},
{"lineNum":" 1019","line":"  inline _GLIBCXX_CONSTEXPR int"},
{"lineNum":" 1020","line":"  __lg(int __n)"},
{"lineNum":" 1021","line":"  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"  inline _GLIBCXX_CONSTEXPR unsigned"},
{"lineNum":" 1024","line":"  __lg(unsigned __n)"},
{"lineNum":" 1025","line":"  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }"},
{"lineNum":" 1026","line":""},
{"lineNum":" 1027","line":"  inline _GLIBCXX_CONSTEXPR long"},
{"lineNum":" 1028","line":"  __lg(long __n)"},
{"lineNum":" 1029","line":"  { return (int)sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }"},
{"lineNum":" 1030","line":""},
{"lineNum":" 1031","line":"  inline _GLIBCXX_CONSTEXPR unsigned long"},
{"lineNum":" 1032","line":"  __lg(unsigned long __n)"},
{"lineNum":" 1033","line":"  { return (int)sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"  inline _GLIBCXX_CONSTEXPR long long"},
{"lineNum":" 1036","line":"  __lg(long long __n)"},
{"lineNum":" 1037","line":"  { return (int)sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"  inline _GLIBCXX_CONSTEXPR unsigned long long"},
{"lineNum":" 1040","line":"  __lg(unsigned long long __n)"},
{"lineNum":" 1041","line":"  { return (int)sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }"},
{"lineNum":" 1042","line":""},
{"lineNum":" 1043","line":"_GLIBCXX_BEGIN_NAMESPACE_ALGO"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"  /**"},
{"lineNum":" 1046","line":"   *  @brief Tests a range for element-wise equality."},
{"lineNum":" 1047","line":"   *  @ingroup non_mutating_algorithms"},
{"lineNum":" 1048","line":"   *  @param  __first1  An input iterator."},
{"lineNum":" 1049","line":"   *  @param  __last1   An input iterator."},
{"lineNum":" 1050","line":"   *  @param  __first2  An input iterator."},
{"lineNum":" 1051","line":"   *  @return   A boolean true or false."},
{"lineNum":" 1052","line":"   *"},
{"lineNum":" 1053","line":"   *  This compares the elements of two ranges using @c == and returns true or"},
{"lineNum":" 1054","line":"   *  false depending on whether all of the corresponding elements of the"},
{"lineNum":" 1055","line":"   *  ranges are equal."},
{"lineNum":" 1056","line":"  */"},
{"lineNum":" 1057","line":"  template<typename _II1, typename _II2>"},
{"lineNum":" 1058","line":"    inline bool"},
{"lineNum":" 1059","line":"    equal(_II1 __first1, _II1 __last1, _II2 __first2)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1060","line":"    {"},
{"lineNum":" 1061","line":"      // concept requirements"},
{"lineNum":" 1062","line":"      __glibcxx_function_requires(_InputIteratorConcept<_II1>)"},
{"lineNum":" 1063","line":"      __glibcxx_function_requires(_InputIteratorConcept<_II2>)"},
{"lineNum":" 1064","line":"      __glibcxx_function_requires(_EqualOpConcept<"},
{"lineNum":" 1065","line":"\t    typename iterator_traits<_II1>::value_type,"},
{"lineNum":" 1066","line":"\t    typename iterator_traits<_II2>::value_type>)"},
{"lineNum":" 1067","line":"      __glibcxx_requires_can_increment_range(__first1, __last1, __first2);"},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"      return std::__equal_aux(std::__niter_base(__first1),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1070","line":"\t\t\t      std::__niter_base(__last1),"},
{"lineNum":" 1071","line":"\t\t\t      std::__niter_base(__first2));"},
{"lineNum":" 1072","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"  /**"},
{"lineNum":" 1075","line":"   *  @brief Tests a range for element-wise equality."},
{"lineNum":" 1076","line":"   *  @ingroup non_mutating_algorithms"},
{"lineNum":" 1077","line":"   *  @param  __first1  An input iterator."},
{"lineNum":" 1078","line":"   *  @param  __last1   An input iterator."},
{"lineNum":" 1079","line":"   *  @param  __first2  An input iterator."},
{"lineNum":" 1080","line":"   *  @param __binary_pred A binary predicate @link functors"},
{"lineNum":" 1081","line":"   *                  functor@endlink."},
{"lineNum":" 1082","line":"   *  @return         A boolean true or false."},
{"lineNum":" 1083","line":"   *"},
{"lineNum":" 1084","line":"   *  This compares the elements of two ranges using the binary_pred"},
{"lineNum":" 1085","line":"   *  parameter, and returns true or"},
{"lineNum":" 1086","line":"   *  false depending on whether all of the corresponding elements of the"},
{"lineNum":" 1087","line":"   *  ranges are equal."},
{"lineNum":" 1088","line":"  */"},
{"lineNum":" 1089","line":"  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>"},
{"lineNum":" 1090","line":"    inline bool"},
{"lineNum":" 1091","line":"    equal(_IIter1 __first1, _IIter1 __last1,"},
{"lineNum":" 1092","line":"\t  _IIter2 __first2, _BinaryPredicate __binary_pred)"},
{"lineNum":" 1093","line":"    {"},
{"lineNum":" 1094","line":"      // concept requirements"},
{"lineNum":" 1095","line":"      __glibcxx_function_requires(_InputIteratorConcept<_IIter1>)"},
{"lineNum":" 1096","line":"      __glibcxx_function_requires(_InputIteratorConcept<_IIter2>)"},
{"lineNum":" 1097","line":"      __glibcxx_requires_valid_range(__first1, __last1);"},
{"lineNum":" 1098","line":""},
{"lineNum":" 1099","line":"      for (; __first1 != __last1; ++__first1, (void)++__first2)"},
{"lineNum":" 1100","line":"\tif (!bool(__binary_pred(*__first1, *__first2)))"},
{"lineNum":" 1101","line":"\t  return false;"},
{"lineNum":" 1102","line":"      return true;"},
{"lineNum":" 1103","line":"    }"},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":"#if __cplusplus >= 201103L"},
{"lineNum":" 1106","line":"  // 4-iterator version of std::equal<It1, It2> for use in C++11."},
{"lineNum":" 1107","line":"  template<typename _II1, typename _II2>"},
{"lineNum":" 1108","line":"    inline bool"},
{"lineNum":" 1109","line":"    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)"},
{"lineNum":" 1110","line":"    {"},
{"lineNum":" 1111","line":"      using _RATag = random_access_iterator_tag;"},
{"lineNum":" 1112","line":"      using _Cat1 = typename iterator_traits<_II1>::iterator_category;"},
{"lineNum":" 1113","line":"      using _Cat2 = typename iterator_traits<_II2>::iterator_category;"},
{"lineNum":" 1114","line":"      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;"},
{"lineNum":" 1115","line":"      if (_RAIters())"},
{"lineNum":" 1116","line":"\t{"},
{"lineNum":" 1117","line":"\t  auto __d1 = std::distance(__first1, __last1);"},
{"lineNum":" 1118","line":"\t  auto __d2 = std::distance(__first2, __last2);"},
{"lineNum":" 1119","line":"\t  if (__d1 != __d2)"},
{"lineNum":" 1120","line":"\t    return false;"},
{"lineNum":" 1121","line":"\t  return _GLIBCXX_STD_A::equal(__first1, __last1, __first2);"},
{"lineNum":" 1122","line":"\t}"},
{"lineNum":" 1123","line":""},
{"lineNum":" 1124","line":"      for (; __first1 != __last1 && __first2 != __last2;"},
{"lineNum":" 1125","line":"\t  ++__first1, (void)++__first2)"},
{"lineNum":" 1126","line":"\tif (!(*__first1 == *__first2))"},
{"lineNum":" 1127","line":"\t  return false;"},
{"lineNum":" 1128","line":"      return __first1 == __last1 && __first2 == __last2;"},
{"lineNum":" 1129","line":"    }"},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"  // 4-iterator version of std::equal<It1, It2, BinaryPred> for use in C++11."},
{"lineNum":" 1132","line":"  template<typename _II1, typename _II2, typename _BinaryPredicate>"},
{"lineNum":" 1133","line":"    inline bool"},
{"lineNum":" 1134","line":"    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,"},
{"lineNum":" 1135","line":"\t     _BinaryPredicate __binary_pred)"},
{"lineNum":" 1136","line":"    {"},
{"lineNum":" 1137","line":"      using _RATag = random_access_iterator_tag;"},
{"lineNum":" 1138","line":"      using _Cat1 = typename iterator_traits<_II1>::iterator_category;"},
{"lineNum":" 1139","line":"      using _Cat2 = typename iterator_traits<_II2>::iterator_category;"},
{"lineNum":" 1140","line":"      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;"},
{"lineNum":" 1141","line":"      if (_RAIters())"},
{"lineNum":" 1142","line":"\t{"},
{"lineNum":" 1143","line":"\t  auto __d1 = std::distance(__first1, __last1);"},
{"lineNum":" 1144","line":"\t  auto __d2 = std::distance(__first2, __last2);"},
{"lineNum":" 1145","line":"\t  if (__d1 != __d2)"},
{"lineNum":" 1146","line":"\t    return false;"},
{"lineNum":" 1147","line":"\t  return _GLIBCXX_STD_A::equal(__first1, __last1, __first2,"},
{"lineNum":" 1148","line":"\t\t\t\t       __binary_pred);"},
{"lineNum":" 1149","line":"\t}"},
{"lineNum":" 1150","line":""},
{"lineNum":" 1151","line":"      for (; __first1 != __last1 && __first2 != __last2;"},
{"lineNum":" 1152","line":"\t  ++__first1, (void)++__first2)"},
{"lineNum":" 1153","line":"\tif (!bool(__binary_pred(*__first1, *__first2)))"},
{"lineNum":" 1154","line":"\t  return false;"},
{"lineNum":" 1155","line":"      return __first1 == __last1 && __first2 == __last2;"},
{"lineNum":" 1156","line":"    }"},
{"lineNum":" 1157","line":"#endif // C++11"},
{"lineNum":" 1158","line":""},
{"lineNum":" 1159","line":"#if __cplusplus > 201103L"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"#define __cpp_lib_robust_nonmodifying_seq_ops 201304"},
{"lineNum":" 1162","line":""},
{"lineNum":" 1163","line":"  /**"},
{"lineNum":" 1164","line":"   *  @brief Tests a range for element-wise equality."},
{"lineNum":" 1165","line":"   *  @ingroup non_mutating_algorithms"},
{"lineNum":" 1166","line":"   *  @param  __first1  An input iterator."},
{"lineNum":" 1167","line":"   *  @param  __last1   An input iterator."},
{"lineNum":" 1168","line":"   *  @param  __first2  An input iterator."},
{"lineNum":" 1169","line":"   *  @param  __last2   An input iterator."},
{"lineNum":" 1170","line":"   *  @return   A boolean true or false."},
{"lineNum":" 1171","line":"   *"},
{"lineNum":" 1172","line":"   *  This compares the elements of two ranges using @c == and returns true or"},
{"lineNum":" 1173","line":"   *  false depending on whether all of the corresponding elements of the"},
{"lineNum":" 1174","line":"   *  ranges are equal."},
{"lineNum":" 1175","line":"  */"},
{"lineNum":" 1176","line":"  template<typename _II1, typename _II2>"},
{"lineNum":" 1177","line":"    inline bool"},
{"lineNum":" 1178","line":"    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)"},
{"lineNum":" 1179","line":"    {"},
{"lineNum":" 1180","line":"      // concept requirements"},
{"lineNum":" 1181","line":"      __glibcxx_function_requires(_InputIteratorConcept<_II1>)"},
{"lineNum":" 1182","line":"      __glibcxx_function_requires(_InputIteratorConcept<_II2>)"},
{"lineNum":" 1183","line":"      __glibcxx_function_requires(_EqualOpConcept<"},
{"lineNum":" 1184","line":"\t    typename iterator_traits<_II1>::value_type,"},
{"lineNum":" 1185","line":"\t    typename iterator_traits<_II2>::value_type>)"},
{"lineNum":" 1186","line":"      __glibcxx_requires_valid_range(__first1, __last1);"},
{"lineNum":" 1187","line":"      __glibcxx_requires_valid_range(__first2, __last2);"},
{"lineNum":" 1188","line":""},
{"lineNum":" 1189","line":"      return _GLIBCXX_STD_A::__equal4(__first1, __last1, __first2, __last2);"},
{"lineNum":" 1190","line":"    }"},
{"lineNum":" 1191","line":""},
{"lineNum":" 1192","line":"  /**"},
{"lineNum":" 1193","line":"   *  @brief Tests a range for element-wise equality."},
{"lineNum":" 1194","line":"   *  @ingroup non_mutating_algorithms"},
{"lineNum":" 1195","line":"   *  @param  __first1  An input iterator."},
{"lineNum":" 1196","line":"   *  @param  __last1   An input iterator."},
{"lineNum":" 1197","line":"   *  @param  __first2  An input iterator."},
{"lineNum":" 1198","line":"   *  @param  __last2   An input iterator."},
{"lineNum":" 1199","line":"   *  @param __binary_pred A binary predicate @link functors"},
{"lineNum":" 1200","line":"   *                  functor@endlink."},
{"lineNum":" 1201","line":"   *  @return         A boolean true or false."},
{"lineNum":" 1202","line":"   *"},
{"lineNum":" 1203","line":"   *  This compares the elements of two ranges using the binary_pred"},
{"lineNum":" 1204","line":"   *  parameter, and returns true or"},
{"lineNum":" 1205","line":"   *  false depending on whether all of the corresponding elements of the"},
{"lineNum":" 1206","line":"   *  ranges are equal."},
{"lineNum":" 1207","line":"  */"},
{"lineNum":" 1208","line":"  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>"},
{"lineNum":" 1209","line":"    inline bool"},
{"lineNum":" 1210","line":"    equal(_IIter1 __first1, _IIter1 __last1,"},
{"lineNum":" 1211","line":"\t  _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)"},
{"lineNum":" 1212","line":"    {"},
{"lineNum":" 1213","line":"      // concept requirements"},
{"lineNum":" 1214","line":"      __glibcxx_function_requires(_InputIteratorConcept<_IIter1>)"},
{"lineNum":" 1215","line":"      __glibcxx_function_requires(_InputIteratorConcept<_IIter2>)"},
{"lineNum":" 1216","line":"      __glibcxx_requires_valid_range(__first1, __last1);"},
{"lineNum":" 1217","line":"      __glibcxx_requires_valid_range(__first2, __last2);"},
{"lineNum":" 1218","line":""},
{"lineNum":" 1219","line":"      return _GLIBCXX_STD_A::__equal4(__first1, __last1, __first2, __last2,"},
{"lineNum":" 1220","line":"\t\t\t\t      __binary_pred);"},
{"lineNum":" 1221","line":"    }"},
{"lineNum":" 1222","line":"#endif // C++14"},
{"lineNum":" 1223","line":""},
{"lineNum":" 1224","line":"  /**"},
{"lineNum":" 1225","line":"   *  @brief Performs @b dictionary comparison on ranges."},
{"lineNum":" 1226","line":"   *  @ingroup sorting_algorithms"},
{"lineNum":" 1227","line":"   *  @param  __first1  An input iterator."},
{"lineNum":" 1228","line":"   *  @param  __last1   An input iterator."},
{"lineNum":" 1229","line":"   *  @param  __first2  An input iterator."},
{"lineNum":" 1230","line":"   *  @param  __last2   An input iterator."},
{"lineNum":" 1231","line":"   *  @return   A boolean true or false."},
{"lineNum":" 1232","line":"   *"},
{"lineNum":" 1233","line":"   *  <em>Returns true if the sequence of elements defined by the range"},
{"lineNum":" 1234","line":"   *  [first1,last1) is lexicographically less than the sequence of elements"},
{"lineNum":" 1235","line":"   *  defined by the range [first2,last2).  Returns false otherwise.</em>"},
{"lineNum":" 1236","line":"   *  (Quoted from [25.3.8]/1.)  If the iterators are all character pointers,"},
{"lineNum":" 1237","line":"   *  then this is an inline call to @c memcmp."},
{"lineNum":" 1238","line":"  */"},
{"lineNum":" 1239","line":"  template<typename _II1, typename _II2>"},
{"lineNum":" 1240","line":"    inline bool"},
{"lineNum":" 1241","line":"    lexicographical_compare(_II1 __first1, _II1 __last1,"},
{"lineNum":" 1242","line":"\t\t\t    _II2 __first2, _II2 __last2)"},
{"lineNum":" 1243","line":"    {"},
{"lineNum":" 1244","line":"#ifdef _GLIBCXX_CONCEPT_CHECKS"},
{"lineNum":" 1245","line":"      // concept requirements"},
{"lineNum":" 1246","line":"      typedef typename iterator_traits<_II1>::value_type _ValueType1;"},
{"lineNum":" 1247","line":"      typedef typename iterator_traits<_II2>::value_type _ValueType2;"},
{"lineNum":" 1248","line":"#endif"},
{"lineNum":" 1249","line":"      __glibcxx_function_requires(_InputIteratorConcept<_II1>)"},
{"lineNum":" 1250","line":"      __glibcxx_function_requires(_InputIteratorConcept<_II2>)"},
{"lineNum":" 1251","line":"      __glibcxx_function_requires(_LessThanOpConcept<_ValueType1, _ValueType2>)"},
{"lineNum":" 1252","line":"      __glibcxx_function_requires(_LessThanOpConcept<_ValueType2, _ValueType1>)"},
{"lineNum":" 1253","line":"      __glibcxx_requires_valid_range(__first1, __last1);"},
{"lineNum":" 1254","line":"      __glibcxx_requires_valid_range(__first2, __last2);"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"      return std::__lexicographical_compare_aux(std::__niter_base(__first1),"},
{"lineNum":" 1257","line":"\t\t\t\t\t\tstd::__niter_base(__last1),"},
{"lineNum":" 1258","line":"\t\t\t\t\t\tstd::__niter_base(__first2),"},
{"lineNum":" 1259","line":"\t\t\t\t\t\tstd::__niter_base(__last2));"},
{"lineNum":" 1260","line":"    }"},
{"lineNum":" 1261","line":""},
{"lineNum":" 1262","line":"  /**"},
{"lineNum":" 1263","line":"   *  @brief Performs @b dictionary comparison on ranges."},
{"lineNum":" 1264","line":"   *  @ingroup sorting_algorithms"},
{"lineNum":" 1265","line":"   *  @param  __first1  An input iterator."},
{"lineNum":" 1266","line":"   *  @param  __last1   An input iterator."},
{"lineNum":" 1267","line":"   *  @param  __first2  An input iterator."},
{"lineNum":" 1268","line":"   *  @param  __last2   An input iterator."},
{"lineNum":" 1269","line":"   *  @param  __comp  A @link comparison_functors comparison functor@endlink."},
{"lineNum":" 1270","line":"   *  @return   A boolean true or false."},
{"lineNum":" 1271","line":"   *"},
{"lineNum":" 1272","line":"   *  The same as the four-parameter @c lexicographical_compare, but uses the"},
{"lineNum":" 1273","line":"   *  comp parameter instead of @c <."},
{"lineNum":" 1274","line":"  */"},
{"lineNum":" 1275","line":"  template<typename _II1, typename _II2, typename _Compare>"},
{"lineNum":" 1276","line":"    inline bool"},
{"lineNum":" 1277","line":"    lexicographical_compare(_II1 __first1, _II1 __last1,"},
{"lineNum":" 1278","line":"\t\t\t    _II2 __first2, _II2 __last2, _Compare __comp)"},
{"lineNum":" 1279","line":"    {"},
{"lineNum":" 1280","line":"      // concept requirements"},
{"lineNum":" 1281","line":"      __glibcxx_function_requires(_InputIteratorConcept<_II1>)"},
{"lineNum":" 1282","line":"      __glibcxx_function_requires(_InputIteratorConcept<_II2>)"},
{"lineNum":" 1283","line":"      __glibcxx_requires_valid_range(__first1, __last1);"},
{"lineNum":" 1284","line":"      __glibcxx_requires_valid_range(__first2, __last2);"},
{"lineNum":" 1285","line":""},
{"lineNum":" 1286","line":"      return std::__lexicographical_compare_impl"},
{"lineNum":" 1287","line":"\t(__first1, __last1, __first2, __last2,"},
{"lineNum":" 1288","line":"\t __gnu_cxx::__ops::__iter_comp_iter(__comp));"},
{"lineNum":" 1289","line":"    }"},
{"lineNum":" 1290","line":""},
{"lineNum":" 1291","line":"  template<typename _InputIterator1, typename _InputIterator2,"},
{"lineNum":" 1292","line":"\t   typename _BinaryPredicate>"},
{"lineNum":" 1293","line":"    pair<_InputIterator1, _InputIterator2>"},
{"lineNum":" 1294","line":"    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,"},
{"lineNum":" 1295","line":"\t       _InputIterator2 __first2, _BinaryPredicate __binary_pred)"},
{"lineNum":" 1296","line":"    {"},
{"lineNum":" 1297","line":"      while (__first1 != __last1 && __binary_pred(__first1, __first2))"},
{"lineNum":" 1298","line":"\t{"},
{"lineNum":" 1299","line":"\t  ++__first1;"},
{"lineNum":" 1300","line":"\t  ++__first2;"},
{"lineNum":" 1301","line":"\t}"},
{"lineNum":" 1302","line":"      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);"},
{"lineNum":" 1303","line":"    }"},
{"lineNum":" 1304","line":""},
{"lineNum":" 1305","line":"  /**"},
{"lineNum":" 1306","line":"   *  @brief Finds the places in ranges which don\'t match."},
{"lineNum":" 1307","line":"   *  @ingroup non_mutating_algorithms"},
{"lineNum":" 1308","line":"   *  @param  __first1  An input iterator."},
{"lineNum":" 1309","line":"   *  @param  __last1   An input iterator."},
{"lineNum":" 1310","line":"   *  @param  __first2  An input iterator."},
{"lineNum":" 1311","line":"   *  @return   A pair of iterators pointing to the first mismatch."},
{"lineNum":" 1312","line":"   *"},
{"lineNum":" 1313","line":"   *  This compares the elements of two ranges using @c == and returns a pair"},
{"lineNum":" 1314","line":"   *  of iterators.  The first iterator points into the first range, the"},
{"lineNum":" 1315","line":"   *  second iterator points into the second range, and the elements pointed"},
{"lineNum":" 1316","line":"   *  to by the iterators are not equal."},
{"lineNum":" 1317","line":"  */"},
{"lineNum":" 1318","line":"  template<typename _InputIterator1, typename _InputIterator2>"},
{"lineNum":" 1319","line":"    inline pair<_InputIterator1, _InputIterator2>"},
{"lineNum":" 1320","line":"    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,"},
{"lineNum":" 1321","line":"\t     _InputIterator2 __first2)"},
{"lineNum":" 1322","line":"    {"},
{"lineNum":" 1323","line":"      // concept requirements"},
{"lineNum":" 1324","line":"      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)"},
{"lineNum":" 1325","line":"      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)"},
{"lineNum":" 1326","line":"      __glibcxx_function_requires(_EqualOpConcept<"},
{"lineNum":" 1327","line":"\t    typename iterator_traits<_InputIterator1>::value_type,"},
{"lineNum":" 1328","line":"\t    typename iterator_traits<_InputIterator2>::value_type>)"},
{"lineNum":" 1329","line":"      __glibcxx_requires_valid_range(__first1, __last1);"},
{"lineNum":" 1330","line":""},
{"lineNum":" 1331","line":"      return _GLIBCXX_STD_A::__mismatch(__first1, __last1, __first2,"},
{"lineNum":" 1332","line":"\t\t\t     __gnu_cxx::__ops::__iter_equal_to_iter());"},
{"lineNum":" 1333","line":"    }"},
{"lineNum":" 1334","line":""},
{"lineNum":" 1335","line":"  /**"},
{"lineNum":" 1336","line":"   *  @brief Finds the places in ranges which don\'t match."},
{"lineNum":" 1337","line":"   *  @ingroup non_mutating_algorithms"},
{"lineNum":" 1338","line":"   *  @param  __first1  An input iterator."},
{"lineNum":" 1339","line":"   *  @param  __last1   An input iterator."},
{"lineNum":" 1340","line":"   *  @param  __first2  An input iterator."},
{"lineNum":" 1341","line":"   *  @param __binary_pred A binary predicate @link functors"},
{"lineNum":" 1342","line":"   *         functor@endlink."},
{"lineNum":" 1343","line":"   *  @return   A pair of iterators pointing to the first mismatch."},
{"lineNum":" 1344","line":"   *"},
{"lineNum":" 1345","line":"   *  This compares the elements of two ranges using the binary_pred"},
{"lineNum":" 1346","line":"   *  parameter, and returns a pair"},
{"lineNum":" 1347","line":"   *  of iterators.  The first iterator points into the first range, the"},
{"lineNum":" 1348","line":"   *  second iterator points into the second range, and the elements pointed"},
{"lineNum":" 1349","line":"   *  to by the iterators are not equal."},
{"lineNum":" 1350","line":"  */"},
{"lineNum":" 1351","line":"  template<typename _InputIterator1, typename _InputIterator2,"},
{"lineNum":" 1352","line":"\t   typename _BinaryPredicate>"},
{"lineNum":" 1353","line":"    inline pair<_InputIterator1, _InputIterator2>"},
{"lineNum":" 1354","line":"    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,"},
{"lineNum":" 1355","line":"\t     _InputIterator2 __first2, _BinaryPredicate __binary_pred)"},
{"lineNum":" 1356","line":"    {"},
{"lineNum":" 1357","line":"      // concept requirements"},
{"lineNum":" 1358","line":"      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)"},
{"lineNum":" 1359","line":"      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)"},
{"lineNum":" 1360","line":"      __glibcxx_requires_valid_range(__first1, __last1);"},
{"lineNum":" 1361","line":""},
{"lineNum":" 1362","line":"      return _GLIBCXX_STD_A::__mismatch(__first1, __last1, __first2,"},
{"lineNum":" 1363","line":"\t__gnu_cxx::__ops::__iter_comp_iter(__binary_pred));"},
{"lineNum":" 1364","line":"    }"},
{"lineNum":" 1365","line":""},
{"lineNum":" 1366","line":"#if __cplusplus > 201103L"},
{"lineNum":" 1367","line":""},
{"lineNum":" 1368","line":"  template<typename _InputIterator1, typename _InputIterator2,"},
{"lineNum":" 1369","line":"\t   typename _BinaryPredicate>"},
{"lineNum":" 1370","line":"    pair<_InputIterator1, _InputIterator2>"},
{"lineNum":" 1371","line":"    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,"},
{"lineNum":" 1372","line":"\t       _InputIterator2 __first2, _InputIterator2 __last2,"},
{"lineNum":" 1373","line":"\t       _BinaryPredicate __binary_pred)"},
{"lineNum":" 1374","line":"    {"},
{"lineNum":" 1375","line":"      while (__first1 != __last1 && __first2 != __last2"},
{"lineNum":" 1376","line":"\t     && __binary_pred(__first1, __first2))"},
{"lineNum":" 1377","line":"\t{"},
{"lineNum":" 1378","line":"\t  ++__first1;"},
{"lineNum":" 1379","line":"\t  ++__first2;"},
{"lineNum":" 1380","line":"\t}"},
{"lineNum":" 1381","line":"      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);"},
{"lineNum":" 1382","line":"    }"},
{"lineNum":" 1383","line":""},
{"lineNum":" 1384","line":"  /**"},
{"lineNum":" 1385","line":"   *  @brief Finds the places in ranges which don\'t match."},
{"lineNum":" 1386","line":"   *  @ingroup non_mutating_algorithms"},
{"lineNum":" 1387","line":"   *  @param  __first1  An input iterator."},
{"lineNum":" 1388","line":"   *  @param  __last1   An input iterator."},
{"lineNum":" 1389","line":"   *  @param  __first2  An input iterator."},
{"lineNum":" 1390","line":"   *  @param  __last2   An input iterator."},
{"lineNum":" 1391","line":"   *  @return   A pair of iterators pointing to the first mismatch."},
{"lineNum":" 1392","line":"   *"},
{"lineNum":" 1393","line":"   *  This compares the elements of two ranges using @c == and returns a pair"},
{"lineNum":" 1394","line":"   *  of iterators.  The first iterator points into the first range, the"},
{"lineNum":" 1395","line":"   *  second iterator points into the second range, and the elements pointed"},
{"lineNum":" 1396","line":"   *  to by the iterators are not equal."},
{"lineNum":" 1397","line":"  */"},
{"lineNum":" 1398","line":"  template<typename _InputIterator1, typename _InputIterator2>"},
{"lineNum":" 1399","line":"    inline pair<_InputIterator1, _InputIterator2>"},
{"lineNum":" 1400","line":"    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,"},
{"lineNum":" 1401","line":"\t     _InputIterator2 __first2, _InputIterator2 __last2)"},
{"lineNum":" 1402","line":"    {"},
{"lineNum":" 1403","line":"      // concept requirements"},
{"lineNum":" 1404","line":"      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)"},
{"lineNum":" 1405","line":"      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)"},
{"lineNum":" 1406","line":"      __glibcxx_function_requires(_EqualOpConcept<"},
{"lineNum":" 1407","line":"\t    typename iterator_traits<_InputIterator1>::value_type,"},
{"lineNum":" 1408","line":"\t    typename iterator_traits<_InputIterator2>::value_type>)"},
{"lineNum":" 1409","line":"      __glibcxx_requires_valid_range(__first1, __last1);"},
{"lineNum":" 1410","line":"      __glibcxx_requires_valid_range(__first2, __last2);"},
{"lineNum":" 1411","line":""},
{"lineNum":" 1412","line":"      return _GLIBCXX_STD_A::__mismatch(__first1, __last1, __first2, __last2,"},
{"lineNum":" 1413","line":"\t\t\t     __gnu_cxx::__ops::__iter_equal_to_iter());"},
{"lineNum":" 1414","line":"    }"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"  /**"},
{"lineNum":" 1417","line":"   *  @brief Finds the places in ranges which don\'t match."},
{"lineNum":" 1418","line":"   *  @ingroup non_mutating_algorithms"},
{"lineNum":" 1419","line":"   *  @param  __first1  An input iterator."},
{"lineNum":" 1420","line":"   *  @param  __last1   An input iterator."},
{"lineNum":" 1421","line":"   *  @param  __first2  An input iterator."},
{"lineNum":" 1422","line":"   *  @param  __last2   An input iterator."},
{"lineNum":" 1423","line":"   *  @param __binary_pred A binary predicate @link functors"},
{"lineNum":" 1424","line":"   *         functor@endlink."},
{"lineNum":" 1425","line":"   *  @return   A pair of iterators pointing to the first mismatch."},
{"lineNum":" 1426","line":"   *"},
{"lineNum":" 1427","line":"   *  This compares the elements of two ranges using the binary_pred"},
{"lineNum":" 1428","line":"   *  parameter, and returns a pair"},
{"lineNum":" 1429","line":"   *  of iterators.  The first iterator points into the first range, the"},
{"lineNum":" 1430","line":"   *  second iterator points into the second range, and the elements pointed"},
{"lineNum":" 1431","line":"   *  to by the iterators are not equal."},
{"lineNum":" 1432","line":"  */"},
{"lineNum":" 1433","line":"  template<typename _InputIterator1, typename _InputIterator2,"},
{"lineNum":" 1434","line":"\t   typename _BinaryPredicate>"},
{"lineNum":" 1435","line":"    inline pair<_InputIterator1, _InputIterator2>"},
{"lineNum":" 1436","line":"    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,"},
{"lineNum":" 1437","line":"\t     _InputIterator2 __first2, _InputIterator2 __last2,"},
{"lineNum":" 1438","line":"\t     _BinaryPredicate __binary_pred)"},
{"lineNum":" 1439","line":"    {"},
{"lineNum":" 1440","line":"      // concept requirements"},
{"lineNum":" 1441","line":"      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)"},
{"lineNum":" 1442","line":"      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)"},
{"lineNum":" 1443","line":"      __glibcxx_requires_valid_range(__first1, __last1);"},
{"lineNum":" 1444","line":"      __glibcxx_requires_valid_range(__first2, __last2);"},
{"lineNum":" 1445","line":""},
{"lineNum":" 1446","line":"      return _GLIBCXX_STD_A::__mismatch(__first1, __last1, __first2, __last2,"},
{"lineNum":" 1447","line":"\t\t\t     __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));"},
{"lineNum":" 1448","line":"    }"},
{"lineNum":" 1449","line":"#endif"},
{"lineNum":" 1450","line":""},
{"lineNum":" 1451","line":"_GLIBCXX_END_NAMESPACE_ALGO"},
{"lineNum":" 1452","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":" 1453","line":"} // namespace std"},
{"lineNum":" 1454","line":""},
{"lineNum":" 1455","line":"// NB: This file is included within many other C++ includes, as a way"},
{"lineNum":" 1456","line":"// of getting the base algorithms. So, make sure that parallel bits"},
{"lineNum":" 1457","line":"// come in too if requested."},
{"lineNum":" 1458","line":"#ifdef _GLIBCXX_PARALLEL"},
{"lineNum":" 1459","line":"# include <parallel/algobase.h>"},
{"lineNum":" 1460","line":"#endif"},
{"lineNum":" 1461","line":""},
{"lineNum":" 1462","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "bech32_fuzz_2_gcc_instrumented", "date" : "2023-07-28 14:53:55", "instrumented" : 72, "covered" : 4,};
var merged_data = [];
