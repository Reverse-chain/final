var data = {lines:[
{"lineNum":"    1","line":"// Raw memory manipulators -*- C++ -*-"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"// Copyright (C) 2001-2019 Free Software Foundation, Inc."},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// This file is part of the GNU ISO C++ Library.  This library is free"},
{"lineNum":"    6","line":"// software; you can redistribute it and/or modify it under the"},
{"lineNum":"    7","line":"// terms of the GNU General Public License as published by the"},
{"lineNum":"    8","line":"// Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    9","line":"// any later version."},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// This library is distributed in the hope that it will be useful,"},
{"lineNum":"   12","line":"// but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   13","line":"// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   14","line":"// GNU General Public License for more details."},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"// Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   17","line":"// permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   18","line":"// 3.1, as published by the Free Software Foundation."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"// You should have received a copy of the GNU General Public License and"},
{"lineNum":"   21","line":"// a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   22","line":"// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   23","line":"// <http://www.gnu.org/licenses/>."},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/*"},
{"lineNum":"   26","line":" *"},
{"lineNum":"   27","line":" * Copyright (c) 1994"},
{"lineNum":"   28","line":" * Hewlett-Packard Company"},
{"lineNum":"   29","line":" *"},
{"lineNum":"   30","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   31","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   32","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   33","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   34","line":" * in supporting documentation.  Hewlett-Packard Company makes no"},
{"lineNum":"   35","line":" * representations about the suitability of this software for any"},
{"lineNum":"   36","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   37","line":" *"},
{"lineNum":"   38","line":" *"},
{"lineNum":"   39","line":" * Copyright (c) 1996,1997"},
{"lineNum":"   40","line":" * Silicon Graphics Computer Systems, Inc."},
{"lineNum":"   41","line":" *"},
{"lineNum":"   42","line":" * Permission to use, copy, modify, distribute and sell this software"},
{"lineNum":"   43","line":" * and its documentation for any purpose is hereby granted without fee,"},
{"lineNum":"   44","line":" * provided that the above copyright notice appear in all copies and"},
{"lineNum":"   45","line":" * that both that copyright notice and this permission notice appear"},
{"lineNum":"   46","line":" * in supporting documentation.  Silicon Graphics makes no"},
{"lineNum":"   47","line":" * representations about the suitability of this software for any"},
{"lineNum":"   48","line":" * purpose.  It is provided \"as is\" without express or implied warranty."},
{"lineNum":"   49","line":" */"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"/** @file bits/stl_uninitialized.h"},
{"lineNum":"   52","line":" *  This is an internal header file, included by other library headers."},
{"lineNum":"   53","line":" *  Do not attempt to use it directly. @headername{memory}"},
{"lineNum":"   54","line":" */"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"#ifndef _STL_UNINITIALIZED_H"},
{"lineNum":"   57","line":"#define _STL_UNINITIALIZED_H 1"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"#if __cplusplus > 201402L"},
{"lineNum":"   60","line":"#include <utility>"},
{"lineNum":"   61","line":"#endif"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"#if __cplusplus >= 201103L"},
{"lineNum":"   64","line":"#include <type_traits>"},
{"lineNum":"   65","line":"#endif"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"namespace std _GLIBCXX_VISIBILITY(default)"},
{"lineNum":"   68","line":"{"},
{"lineNum":"   69","line":"_GLIBCXX_BEGIN_NAMESPACE_VERSION"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"  template<bool _TrivialValueTypes>"},
{"lineNum":"   72","line":"    struct __uninitialized_copy"},
{"lineNum":"   73","line":"    {"},
{"lineNum":"   74","line":"      template<typename _InputIterator, typename _ForwardIterator>"},
{"lineNum":"   75","line":"        static _ForwardIterator"},
{"lineNum":"   76","line":"        __uninit_copy(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"   77","line":"\t\t      _ForwardIterator __result)"},
{"lineNum":"   78","line":"        {"},
{"lineNum":"   79","line":"\t  _ForwardIterator __cur = __result;"},
{"lineNum":"   80","line":"\t  __try"},
{"lineNum":"   81","line":"\t    {"},
{"lineNum":"   82","line":"\t      for (; __first != __last; ++__first, (void)++__cur)"},
{"lineNum":"   83","line":"\t\tstd::_Construct(std::__addressof(*__cur), *__first);"},
{"lineNum":"   84","line":"\t      return __cur;"},
{"lineNum":"   85","line":"\t    }"},
{"lineNum":"   86","line":"\t  __catch(...)"},
{"lineNum":"   87","line":"\t    {"},
{"lineNum":"   88","line":"\t      std::_Destroy(__result, __cur);"},
{"lineNum":"   89","line":"\t      __throw_exception_again;"},
{"lineNum":"   90","line":"\t    }"},
{"lineNum":"   91","line":"\t}"},
{"lineNum":"   92","line":"    };"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"  template<>"},
{"lineNum":"   95","line":"    struct __uninitialized_copy<true>"},
{"lineNum":"   96","line":"    {"},
{"lineNum":"   97","line":"      template<typename _InputIterator, typename _ForwardIterator>"},
{"lineNum":"   98","line":"        static _ForwardIterator"},
{"lineNum":"   99","line":"        __uninit_copy(_InputIterator __first, _InputIterator __last,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  100","line":"\t\t      _ForwardIterator __result)"},
{"lineNum":"  101","line":"        { return std::copy(__first, __last, __result); }","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  102","line":"    };"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"  /**"},
{"lineNum":"  105","line":"   *  @brief Copies the range [first,last) into result."},
{"lineNum":"  106","line":"   *  @param  __first  An input iterator."},
{"lineNum":"  107","line":"   *  @param  __last   An input iterator."},
{"lineNum":"  108","line":"   *  @param  __result An output iterator."},
{"lineNum":"  109","line":"   *  @return   __result + (__first - __last)"},
{"lineNum":"  110","line":"   *"},
{"lineNum":"  111","line":"   *  Like copy(), but does not require an initialized output range."},
{"lineNum":"  112","line":"  */"},
{"lineNum":"  113","line":"  template<typename _InputIterator, typename _ForwardIterator>"},
{"lineNum":"  114","line":"    inline _ForwardIterator"},
{"lineNum":"  115","line":"    uninitialized_copy(_InputIterator __first, _InputIterator __last,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  116","line":"\t\t       _ForwardIterator __result)"},
{"lineNum":"  117","line":"    {"},
{"lineNum":"  118","line":"      typedef typename iterator_traits<_InputIterator>::value_type"},
{"lineNum":"  119","line":"\t_ValueType1;"},
{"lineNum":"  120","line":"      typedef typename iterator_traits<_ForwardIterator>::value_type"},
{"lineNum":"  121","line":"\t_ValueType2;"},
{"lineNum":"  122","line":"#if __cplusplus < 201103L"},
{"lineNum":"  123","line":"      const bool __assignable = true;"},
{"lineNum":"  124","line":"#else"},
{"lineNum":"  125","line":"      // Trivial types can have deleted copy constructor, but the std::copy"},
{"lineNum":"  126","line":"      // optimization that uses memmove would happily \"copy\" them anyway."},
{"lineNum":"  127","line":"      static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,"},
{"lineNum":"  128","line":"\t  \"result type must be constructible from value type of input range\");"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"      typedef typename iterator_traits<_InputIterator>::reference _RefType1;"},
{"lineNum":"  131","line":"      typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;"},
{"lineNum":"  132","line":"      // Trivial types can have deleted assignment, so using std::copy"},
{"lineNum":"  133","line":"      // would be ill-formed. Require assignability before using std::copy:"},
{"lineNum":"  134","line":"      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  135","line":"#endif"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"      return std::__uninitialized_copy<__is_trivial(_ValueType1)"},
{"lineNum":"  138","line":"\t\t\t\t       && __is_trivial(_ValueType2)"},
{"lineNum":"  139","line":"\t\t\t\t       && __assignable>::"},
{"lineNum":"  140","line":"\t__uninit_copy(__first, __last, __result);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  141","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"  template<bool _TrivialValueType>"},
{"lineNum":"  145","line":"    struct __uninitialized_fill"},
{"lineNum":"  146","line":"    {"},
{"lineNum":"  147","line":"      template<typename _ForwardIterator, typename _Tp>"},
{"lineNum":"  148","line":"        static void"},
{"lineNum":"  149","line":"        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  150","line":"\t\t      const _Tp& __x)"},
{"lineNum":"  151","line":"        {"},
{"lineNum":"  152","line":"\t  _ForwardIterator __cur = __first;"},
{"lineNum":"  153","line":"\t  __try"},
{"lineNum":"  154","line":"\t    {"},
{"lineNum":"  155","line":"\t      for (; __cur != __last; ++__cur)"},
{"lineNum":"  156","line":"\t\tstd::_Construct(std::__addressof(*__cur), __x);"},
{"lineNum":"  157","line":"\t    }"},
{"lineNum":"  158","line":"\t  __catch(...)"},
{"lineNum":"  159","line":"\t    {"},
{"lineNum":"  160","line":"\t      std::_Destroy(__first, __cur);"},
{"lineNum":"  161","line":"\t      __throw_exception_again;"},
{"lineNum":"  162","line":"\t    }"},
{"lineNum":"  163","line":"\t}"},
{"lineNum":"  164","line":"    };"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"  template<>"},
{"lineNum":"  167","line":"    struct __uninitialized_fill<true>"},
{"lineNum":"  168","line":"    {"},
{"lineNum":"  169","line":"      template<typename _ForwardIterator, typename _Tp>"},
{"lineNum":"  170","line":"        static void"},
{"lineNum":"  171","line":"        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  172","line":"\t\t      const _Tp& __x)"},
{"lineNum":"  173","line":"        { std::fill(__first, __last, __x); }"},
{"lineNum":"  174","line":"    };"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"  /**"},
{"lineNum":"  177","line":"   *  @brief Copies the value x into the range [first,last)."},
{"lineNum":"  178","line":"   *  @param  __first  An input iterator."},
{"lineNum":"  179","line":"   *  @param  __last   An input iterator."},
{"lineNum":"  180","line":"   *  @param  __x      The source value."},
{"lineNum":"  181","line":"   *  @return   Nothing."},
{"lineNum":"  182","line":"   *"},
{"lineNum":"  183","line":"   *  Like fill(), but does not require an initialized output range."},
{"lineNum":"  184","line":"  */"},
{"lineNum":"  185","line":"  template<typename _ForwardIterator, typename _Tp>"},
{"lineNum":"  186","line":"    inline void"},
{"lineNum":"  187","line":"    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  188","line":"\t\t       const _Tp& __x)"},
{"lineNum":"  189","line":"    {"},
{"lineNum":"  190","line":"      typedef typename iterator_traits<_ForwardIterator>::value_type"},
{"lineNum":"  191","line":"\t_ValueType;"},
{"lineNum":"  192","line":"#if __cplusplus < 201103L"},
{"lineNum":"  193","line":"      const bool __assignable = true;"},
{"lineNum":"  194","line":"#else"},
{"lineNum":"  195","line":"      // Trivial types can have deleted copy constructor, but the std::fill"},
{"lineNum":"  196","line":"      // optimization that uses memmove would happily \"copy\" them anyway."},
{"lineNum":"  197","line":"      static_assert(is_constructible<_ValueType, const _Tp&>::value,"},
{"lineNum":"  198","line":"\t  \"result type must be constructible from input type\");"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"      // Trivial types can have deleted assignment, so using std::fill"},
{"lineNum":"  201","line":"      // would be ill-formed. Require assignability before using std::fill:"},
{"lineNum":"  202","line":"      const bool __assignable = is_copy_assignable<_ValueType>::value;"},
{"lineNum":"  203","line":"#endif"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::"},
{"lineNum":"  206","line":"\t__uninit_fill(__first, __last, __x);"},
{"lineNum":"  207","line":"    }"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"  template<bool _TrivialValueType>"},
{"lineNum":"  211","line":"    struct __uninitialized_fill_n"},
{"lineNum":"  212","line":"    {"},
{"lineNum":"  213","line":"      template<typename _ForwardIterator, typename _Size, typename _Tp>"},
{"lineNum":"  214","line":"        static _ForwardIterator"},
{"lineNum":"  215","line":"        __uninit_fill_n(_ForwardIterator __first, _Size __n,"},
{"lineNum":"  216","line":"\t\t\tconst _Tp& __x)"},
{"lineNum":"  217","line":"        {"},
{"lineNum":"  218","line":"\t  _ForwardIterator __cur = __first;"},
{"lineNum":"  219","line":"\t  __try"},
{"lineNum":"  220","line":"\t    {"},
{"lineNum":"  221","line":"\t      for (; __n > 0; --__n, (void) ++__cur)"},
{"lineNum":"  222","line":"\t\tstd::_Construct(std::__addressof(*__cur), __x);"},
{"lineNum":"  223","line":"\t      return __cur;"},
{"lineNum":"  224","line":"\t    }"},
{"lineNum":"  225","line":"\t  __catch(...)"},
{"lineNum":"  226","line":"\t    {"},
{"lineNum":"  227","line":"\t      std::_Destroy(__first, __cur);"},
{"lineNum":"  228","line":"\t      __throw_exception_again;"},
{"lineNum":"  229","line":"\t    }"},
{"lineNum":"  230","line":"\t}"},
{"lineNum":"  231","line":"    };"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"  template<>"},
{"lineNum":"  234","line":"    struct __uninitialized_fill_n<true>"},
{"lineNum":"  235","line":"    {"},
{"lineNum":"  236","line":"      template<typename _ForwardIterator, typename _Size, typename _Tp>"},
{"lineNum":"  237","line":"        static _ForwardIterator"},
{"lineNum":"  238","line":"        __uninit_fill_n(_ForwardIterator __first, _Size __n,"},
{"lineNum":"  239","line":"\t\t\tconst _Tp& __x)"},
{"lineNum":"  240","line":"        { return std::fill_n(__first, __n, __x); }"},
{"lineNum":"  241","line":"    };"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"   // _GLIBCXX_RESOLVE_LIB_DEFECTS"},
{"lineNum":"  244","line":"   // DR 1339. uninitialized_fill_n should return the end of its range"},
{"lineNum":"  245","line":"  /**"},
{"lineNum":"  246","line":"   *  @brief Copies the value x into the range [first,first+n)."},
{"lineNum":"  247","line":"   *  @param  __first  An input iterator."},
{"lineNum":"  248","line":"   *  @param  __n      The number of copies to make."},
{"lineNum":"  249","line":"   *  @param  __x      The source value."},
{"lineNum":"  250","line":"   *  @return   Nothing."},
{"lineNum":"  251","line":"   *"},
{"lineNum":"  252","line":"   *  Like fill_n(), but does not require an initialized output range."},
{"lineNum":"  253","line":"  */"},
{"lineNum":"  254","line":"  template<typename _ForwardIterator, typename _Size, typename _Tp>"},
{"lineNum":"  255","line":"    inline _ForwardIterator"},
{"lineNum":"  256","line":"    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)"},
{"lineNum":"  257","line":"    {"},
{"lineNum":"  258","line":"      typedef typename iterator_traits<_ForwardIterator>::value_type"},
{"lineNum":"  259","line":"\t_ValueType;"},
{"lineNum":"  260","line":"#if __cplusplus < 201103L"},
{"lineNum":"  261","line":"      const bool __assignable = true;"},
{"lineNum":"  262","line":"#else"},
{"lineNum":"  263","line":"      // Trivial types can have deleted copy constructor, but the std::fill"},
{"lineNum":"  264","line":"      // optimization that uses memmove would happily \"copy\" them anyway."},
{"lineNum":"  265","line":"      static_assert(is_constructible<_ValueType, const _Tp&>::value,"},
{"lineNum":"  266","line":"\t  \"result type must be constructible from input type\");"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"      // Trivial types can have deleted assignment, so using std::fill"},
{"lineNum":"  269","line":"      // would be ill-formed. Require assignability before using std::fill:"},
{"lineNum":"  270","line":"      const bool __assignable = is_copy_assignable<_ValueType>::value;"},
{"lineNum":"  271","line":"#endif"},
{"lineNum":"  272","line":"      return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::"},
{"lineNum":"  273","line":"\t__uninit_fill_n(__first, __n, __x);"},
{"lineNum":"  274","line":"    }"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"  // Extensions: versions of uninitialized_copy, uninitialized_fill,"},
{"lineNum":"  277","line":"  //  and uninitialized_fill_n that take an allocator parameter."},
{"lineNum":"  278","line":"  //  We dispatch back to the standard versions when we\'re given the"},
{"lineNum":"  279","line":"  //  default allocator.  For nondefault allocators we do not use"},
{"lineNum":"  280","line":"  //  any of the POD optimizations."},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"  template<typename _InputIterator, typename _ForwardIterator,"},
{"lineNum":"  283","line":"\t   typename _Allocator>"},
{"lineNum":"  284","line":"    _ForwardIterator"},
{"lineNum":"  285","line":"    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  286","line":"\t\t\t   _ForwardIterator __result, _Allocator& __alloc)"},
{"lineNum":"  287","line":"    {"},
{"lineNum":"  288","line":"      _ForwardIterator __cur = __result;"},
{"lineNum":"  289","line":"      __try"},
{"lineNum":"  290","line":"\t{"},
{"lineNum":"  291","line":"\t  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;"},
{"lineNum":"  292","line":"\t  for (; __first != __last; ++__first, (void)++__cur)"},
{"lineNum":"  293","line":"\t    __traits::construct(__alloc, std::__addressof(*__cur), *__first);"},
{"lineNum":"  294","line":"\t  return __cur;"},
{"lineNum":"  295","line":"\t}"},
{"lineNum":"  296","line":"      __catch(...)"},
{"lineNum":"  297","line":"\t{"},
{"lineNum":"  298","line":"\t  std::_Destroy(__result, __cur, __alloc);"},
{"lineNum":"  299","line":"\t  __throw_exception_again;"},
{"lineNum":"  300","line":"\t}"},
{"lineNum":"  301","line":"    }"},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>"},
{"lineNum":"  304","line":"    inline _ForwardIterator"},
{"lineNum":"  305","line":"    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  306","line":"\t\t\t   _ForwardIterator __result, allocator<_Tp>&)"},
{"lineNum":"  307","line":"    { return std::uninitialized_copy(__first, __last, __result); }","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"  template<typename _InputIterator, typename _ForwardIterator,"},
{"lineNum":"  310","line":"\t   typename _Allocator>"},
{"lineNum":"  311","line":"    inline _ForwardIterator"},
{"lineNum":"  312","line":"    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":"\t\t\t   _ForwardIterator __result, _Allocator& __alloc)"},
{"lineNum":"  314","line":"    {"},
{"lineNum":"  315","line":"      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":"\t\t\t\t\t _GLIBCXX_MAKE_MOVE_ITERATOR(__last),"},
{"lineNum":"  317","line":"\t\t\t\t\t __result, __alloc);"},
{"lineNum":"  318","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"  template<typename _InputIterator, typename _ForwardIterator,"},
{"lineNum":"  321","line":"\t   typename _Allocator>"},
{"lineNum":"  322","line":"    inline _ForwardIterator"},
{"lineNum":"  323","line":"    __uninitialized_move_if_noexcept_a(_InputIterator __first,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"\t\t\t\t       _InputIterator __last,"},
{"lineNum":"  325","line":"\t\t\t\t       _ForwardIterator __result,"},
{"lineNum":"  326","line":"\t\t\t\t       _Allocator& __alloc)"},
{"lineNum":"  327","line":"    {"},
{"lineNum":"  328","line":"      return std::__uninitialized_copy_a"},
{"lineNum":"  329","line":"\t(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  330","line":"\t _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);"},
{"lineNum":"  331","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"  template<typename _ForwardIterator, typename _Tp, typename _Allocator>"},
{"lineNum":"  334","line":"    void"},
{"lineNum":"  335","line":"    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  336","line":"\t\t\t   const _Tp& __x, _Allocator& __alloc)"},
{"lineNum":"  337","line":"    {"},
{"lineNum":"  338","line":"      _ForwardIterator __cur = __first;"},
{"lineNum":"  339","line":"      __try"},
{"lineNum":"  340","line":"\t{"},
{"lineNum":"  341","line":"\t  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;"},
{"lineNum":"  342","line":"\t  for (; __cur != __last; ++__cur)"},
{"lineNum":"  343","line":"\t    __traits::construct(__alloc, std::__addressof(*__cur), __x);"},
{"lineNum":"  344","line":"\t}"},
{"lineNum":"  345","line":"      __catch(...)"},
{"lineNum":"  346","line":"\t{"},
{"lineNum":"  347","line":"\t  std::_Destroy(__first, __cur, __alloc);"},
{"lineNum":"  348","line":"\t  __throw_exception_again;"},
{"lineNum":"  349","line":"\t}"},
{"lineNum":"  350","line":"    }"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"  template<typename _ForwardIterator, typename _Tp, typename _Tp2>"},
{"lineNum":"  353","line":"    inline void"},
{"lineNum":"  354","line":"    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,"},
{"lineNum":"  355","line":"\t\t\t   const _Tp& __x, allocator<_Tp2>&)"},
{"lineNum":"  356","line":"    { std::uninitialized_fill(__first, __last, __x); }"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"  template<typename _ForwardIterator, typename _Size, typename _Tp,"},
{"lineNum":"  359","line":"\t   typename _Allocator>"},
{"lineNum":"  360","line":"    _ForwardIterator"},
{"lineNum":"  361","line":"    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,"},
{"lineNum":"  362","line":"\t\t\t     const _Tp& __x, _Allocator& __alloc)"},
{"lineNum":"  363","line":"    {"},
{"lineNum":"  364","line":"      _ForwardIterator __cur = __first;"},
{"lineNum":"  365","line":"      __try"},
{"lineNum":"  366","line":"\t{"},
{"lineNum":"  367","line":"\t  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;"},
{"lineNum":"  368","line":"\t  for (; __n > 0; --__n, (void) ++__cur)"},
{"lineNum":"  369","line":"\t    __traits::construct(__alloc, std::__addressof(*__cur), __x);"},
{"lineNum":"  370","line":"\t  return __cur;"},
{"lineNum":"  371","line":"\t}"},
{"lineNum":"  372","line":"      __catch(...)"},
{"lineNum":"  373","line":"\t{"},
{"lineNum":"  374","line":"\t  std::_Destroy(__first, __cur, __alloc);"},
{"lineNum":"  375","line":"\t  __throw_exception_again;"},
{"lineNum":"  376","line":"\t}"},
{"lineNum":"  377","line":"    }"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"  template<typename _ForwardIterator, typename _Size, typename _Tp,"},
{"lineNum":"  380","line":"\t   typename _Tp2>"},
{"lineNum":"  381","line":"    inline _ForwardIterator"},
{"lineNum":"  382","line":"    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,"},
{"lineNum":"  383","line":"\t\t\t     const _Tp& __x, allocator<_Tp2>&)"},
{"lineNum":"  384","line":"    { return std::uninitialized_fill_n(__first, __n, __x); }"},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"  // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,"},
{"lineNum":"  388","line":"  // __uninitialized_fill_move, __uninitialized_move_fill."},
{"lineNum":"  389","line":"  // All of these algorithms take a user-supplied allocator, which is used"},
{"lineNum":"  390","line":"  // for construction and destruction."},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"  // __uninitialized_copy_move"},
{"lineNum":"  393","line":"  // Copies [first1, last1) into [result, result + (last1 - first1)), and"},
{"lineNum":"  394","line":"  //  move [first2, last2) into"},
{"lineNum":"  395","line":"  //  [result, result + (last1 - first1) + (last2 - first2))."},
{"lineNum":"  396","line":"  template<typename _InputIterator1, typename _InputIterator2,"},
{"lineNum":"  397","line":"\t   typename _ForwardIterator, typename _Allocator>"},
{"lineNum":"  398","line":"    inline _ForwardIterator"},
{"lineNum":"  399","line":"    __uninitialized_copy_move(_InputIterator1 __first1,"},
{"lineNum":"  400","line":"\t\t\t      _InputIterator1 __last1,"},
{"lineNum":"  401","line":"\t\t\t      _InputIterator2 __first2,"},
{"lineNum":"  402","line":"\t\t\t      _InputIterator2 __last2,"},
{"lineNum":"  403","line":"\t\t\t      _ForwardIterator __result,"},
{"lineNum":"  404","line":"\t\t\t      _Allocator& __alloc)"},
{"lineNum":"  405","line":"    {"},
{"lineNum":"  406","line":"      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,"},
{"lineNum":"  407","line":"\t\t\t\t\t\t\t   __result,"},
{"lineNum":"  408","line":"\t\t\t\t\t\t\t   __alloc);"},
{"lineNum":"  409","line":"      __try"},
{"lineNum":"  410","line":"\t{"},
{"lineNum":"  411","line":"\t  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);"},
{"lineNum":"  412","line":"\t}"},
{"lineNum":"  413","line":"      __catch(...)"},
{"lineNum":"  414","line":"\t{"},
{"lineNum":"  415","line":"\t  std::_Destroy(__result, __mid, __alloc);"},
{"lineNum":"  416","line":"\t  __throw_exception_again;"},
{"lineNum":"  417","line":"\t}"},
{"lineNum":"  418","line":"    }"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"  // __uninitialized_move_copy"},
{"lineNum":"  421","line":"  // Moves [first1, last1) into [result, result + (last1 - first1)), and"},
{"lineNum":"  422","line":"  //  copies [first2, last2) into"},
{"lineNum":"  423","line":"  //  [result, result + (last1 - first1) + (last2 - first2))."},
{"lineNum":"  424","line":"  template<typename _InputIterator1, typename _InputIterator2,"},
{"lineNum":"  425","line":"\t   typename _ForwardIterator, typename _Allocator>"},
{"lineNum":"  426","line":"    inline _ForwardIterator"},
{"lineNum":"  427","line":"    __uninitialized_move_copy(_InputIterator1 __first1,"},
{"lineNum":"  428","line":"\t\t\t      _InputIterator1 __last1,"},
{"lineNum":"  429","line":"\t\t\t      _InputIterator2 __first2,"},
{"lineNum":"  430","line":"\t\t\t      _InputIterator2 __last2,"},
{"lineNum":"  431","line":"\t\t\t      _ForwardIterator __result,"},
{"lineNum":"  432","line":"\t\t\t      _Allocator& __alloc)"},
{"lineNum":"  433","line":"    {"},
{"lineNum":"  434","line":"      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,"},
{"lineNum":"  435","line":"\t\t\t\t\t\t\t   __result,"},
{"lineNum":"  436","line":"\t\t\t\t\t\t\t   __alloc);"},
{"lineNum":"  437","line":"      __try"},
{"lineNum":"  438","line":"\t{"},
{"lineNum":"  439","line":"\t  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);"},
{"lineNum":"  440","line":"\t}"},
{"lineNum":"  441","line":"      __catch(...)"},
{"lineNum":"  442","line":"\t{"},
{"lineNum":"  443","line":"\t  std::_Destroy(__result, __mid, __alloc);"},
{"lineNum":"  444","line":"\t  __throw_exception_again;"},
{"lineNum":"  445","line":"\t}"},
{"lineNum":"  446","line":"    }"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"  // __uninitialized_fill_move"},
{"lineNum":"  449","line":"  // Fills [result, mid) with x, and moves [first, last) into"},
{"lineNum":"  450","line":"  //  [mid, mid + (last - first))."},
{"lineNum":"  451","line":"  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,"},
{"lineNum":"  452","line":"\t   typename _Allocator>"},
{"lineNum":"  453","line":"    inline _ForwardIterator"},
{"lineNum":"  454","line":"    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,"},
{"lineNum":"  455","line":"\t\t\t      const _Tp& __x, _InputIterator __first,"},
{"lineNum":"  456","line":"\t\t\t      _InputIterator __last, _Allocator& __alloc)"},
{"lineNum":"  457","line":"    {"},
{"lineNum":"  458","line":"      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);"},
{"lineNum":"  459","line":"      __try"},
{"lineNum":"  460","line":"\t{"},
{"lineNum":"  461","line":"\t  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);"},
{"lineNum":"  462","line":"\t}"},
{"lineNum":"  463","line":"      __catch(...)"},
{"lineNum":"  464","line":"\t{"},
{"lineNum":"  465","line":"\t  std::_Destroy(__result, __mid, __alloc);"},
{"lineNum":"  466","line":"\t  __throw_exception_again;"},
{"lineNum":"  467","line":"\t}"},
{"lineNum":"  468","line":"    }"},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"  // __uninitialized_move_fill"},
{"lineNum":"  471","line":"  // Moves [first1, last1) into [first2, first2 + (last1 - first1)), and"},
{"lineNum":"  472","line":"  //  fills [first2 + (last1 - first1), last2) with x."},
{"lineNum":"  473","line":"  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,"},
{"lineNum":"  474","line":"\t   typename _Allocator>"},
{"lineNum":"  475","line":"    inline void"},
{"lineNum":"  476","line":"    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,"},
{"lineNum":"  477","line":"\t\t\t      _ForwardIterator __first2,"},
{"lineNum":"  478","line":"\t\t\t      _ForwardIterator __last2, const _Tp& __x,"},
{"lineNum":"  479","line":"\t\t\t      _Allocator& __alloc)"},
{"lineNum":"  480","line":"    {"},
{"lineNum":"  481","line":"      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,"},
{"lineNum":"  482","line":"\t\t\t\t\t\t\t    __first2,"},
{"lineNum":"  483","line":"\t\t\t\t\t\t\t    __alloc);"},
{"lineNum":"  484","line":"      __try"},
{"lineNum":"  485","line":"\t{"},
{"lineNum":"  486","line":"\t  std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);"},
{"lineNum":"  487","line":"\t}"},
{"lineNum":"  488","line":"      __catch(...)"},
{"lineNum":"  489","line":"\t{"},
{"lineNum":"  490","line":"\t  std::_Destroy(__first2, __mid2, __alloc);"},
{"lineNum":"  491","line":"\t  __throw_exception_again;"},
{"lineNum":"  492","line":"\t}"},
{"lineNum":"  493","line":"    }"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  496","line":"  // Extensions: __uninitialized_default, __uninitialized_default_n,"},
{"lineNum":"  497","line":"  // __uninitialized_default_a, __uninitialized_default_n_a."},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"  template<bool _TrivialValueType>"},
{"lineNum":"  500","line":"    struct __uninitialized_default_1"},
{"lineNum":"  501","line":"    {"},
{"lineNum":"  502","line":"      template<typename _ForwardIterator>"},
{"lineNum":"  503","line":"        static void"},
{"lineNum":"  504","line":"        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":"  505","line":"        {"},
{"lineNum":"  506","line":"\t  _ForwardIterator __cur = __first;"},
{"lineNum":"  507","line":"\t  __try"},
{"lineNum":"  508","line":"\t    {"},
{"lineNum":"  509","line":"\t      for (; __cur != __last; ++__cur)"},
{"lineNum":"  510","line":"\t\tstd::_Construct(std::__addressof(*__cur));"},
{"lineNum":"  511","line":"\t    }"},
{"lineNum":"  512","line":"\t  __catch(...)"},
{"lineNum":"  513","line":"\t    {"},
{"lineNum":"  514","line":"\t      std::_Destroy(__first, __cur);"},
{"lineNum":"  515","line":"\t      __throw_exception_again;"},
{"lineNum":"  516","line":"\t    }"},
{"lineNum":"  517","line":"\t}"},
{"lineNum":"  518","line":"    };"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"  template<>"},
{"lineNum":"  521","line":"    struct __uninitialized_default_1<true>"},
{"lineNum":"  522","line":"    {"},
{"lineNum":"  523","line":"      template<typename _ForwardIterator>"},
{"lineNum":"  524","line":"        static void"},
{"lineNum":"  525","line":"        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)"},
{"lineNum":"  526","line":"        {"},
{"lineNum":"  527","line":"\t  typedef typename iterator_traits<_ForwardIterator>::value_type"},
{"lineNum":"  528","line":"\t    _ValueType;"},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"\t  std::fill(__first, __last, _ValueType());"},
{"lineNum":"  531","line":"\t}"},
{"lineNum":"  532","line":"    };"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"  template<bool _TrivialValueType>"},
{"lineNum":"  535","line":"    struct __uninitialized_default_n_1"},
{"lineNum":"  536","line":"    {"},
{"lineNum":"  537","line":"      template<typename _ForwardIterator, typename _Size>"},
{"lineNum":"  538","line":"        static _ForwardIterator"},
{"lineNum":"  539","line":"        __uninit_default_n(_ForwardIterator __first, _Size __n)"},
{"lineNum":"  540","line":"        {"},
{"lineNum":"  541","line":"\t  _ForwardIterator __cur = __first;"},
{"lineNum":"  542","line":"\t  __try"},
{"lineNum":"  543","line":"\t    {"},
{"lineNum":"  544","line":"\t      for (; __n > 0; --__n, (void) ++__cur)"},
{"lineNum":"  545","line":"\t\tstd::_Construct(std::__addressof(*__cur));"},
{"lineNum":"  546","line":"\t      return __cur;"},
{"lineNum":"  547","line":"\t    }"},
{"lineNum":"  548","line":"\t  __catch(...)"},
{"lineNum":"  549","line":"\t    {"},
{"lineNum":"  550","line":"\t      std::_Destroy(__first, __cur);"},
{"lineNum":"  551","line":"\t      __throw_exception_again;"},
{"lineNum":"  552","line":"\t    }"},
{"lineNum":"  553","line":"\t}"},
{"lineNum":"  554","line":"    };"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"  template<>"},
{"lineNum":"  557","line":"    struct __uninitialized_default_n_1<true>"},
{"lineNum":"  558","line":"    {"},
{"lineNum":"  559","line":"      template<typename _ForwardIterator, typename _Size>"},
{"lineNum":"  560","line":"        static _ForwardIterator"},
{"lineNum":"  561","line":"        __uninit_default_n(_ForwardIterator __first, _Size __n)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  562","line":"        {"},
{"lineNum":"  563","line":"\t  typedef typename iterator_traits<_ForwardIterator>::value_type"},
{"lineNum":"  564","line":"\t    _ValueType;"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"\t  return std::fill_n(__first, __n, _ValueType());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  567","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  568","line":"    };"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"  // __uninitialized_default"},
{"lineNum":"  571","line":"  // Fills [first, last) with std::distance(first, last) default"},
{"lineNum":"  572","line":"  // constructed value_types(s)."},
{"lineNum":"  573","line":"  template<typename _ForwardIterator>"},
{"lineNum":"  574","line":"    inline void"},
{"lineNum":"  575","line":"    __uninitialized_default(_ForwardIterator __first,"},
{"lineNum":"  576","line":"\t\t\t    _ForwardIterator __last)"},
{"lineNum":"  577","line":"    {"},
{"lineNum":"  578","line":"      typedef typename iterator_traits<_ForwardIterator>::value_type"},
{"lineNum":"  579","line":"\t_ValueType;"},
{"lineNum":"  580","line":"      // trivial types can have deleted assignment"},
{"lineNum":"  581","line":"      const bool __assignable = is_copy_assignable<_ValueType>::value;"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"      std::__uninitialized_default_1<__is_trivial(_ValueType)"},
{"lineNum":"  584","line":"\t\t\t\t     && __assignable>::"},
{"lineNum":"  585","line":"\t__uninit_default(__first, __last);"},
{"lineNum":"  586","line":"    }"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"  // __uninitialized_default_n"},
{"lineNum":"  589","line":"  // Fills [first, first + n) with n default constructed value_type(s)."},
{"lineNum":"  590","line":"  template<typename _ForwardIterator, typename _Size>"},
{"lineNum":"  591","line":"    inline _ForwardIterator"},
{"lineNum":"  592","line":"    __uninitialized_default_n(_ForwardIterator __first, _Size __n)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"    {"},
{"lineNum":"  594","line":"      typedef typename iterator_traits<_ForwardIterator>::value_type"},
{"lineNum":"  595","line":"\t_ValueType;"},
{"lineNum":"  596","line":"      // trivial types can have deleted assignment"},
{"lineNum":"  597","line":"      const bool __assignable = is_copy_assignable<_ValueType>::value;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"      return __uninitialized_default_n_1<__is_trivial(_ValueType)"},
{"lineNum":"  600","line":"\t\t\t\t       && __assignable>::"},
{"lineNum":"  601","line":"\t__uninit_default_n(__first, __n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  602","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"  // __uninitialized_default_a"},
{"lineNum":"  606","line":"  // Fills [first, last) with std::distance(first, last) default"},
{"lineNum":"  607","line":"  // constructed value_types(s), constructed with the allocator alloc."},
{"lineNum":"  608","line":"  template<typename _ForwardIterator, typename _Allocator>"},
{"lineNum":"  609","line":"    void"},
{"lineNum":"  610","line":"    __uninitialized_default_a(_ForwardIterator __first,"},
{"lineNum":"  611","line":"\t\t\t      _ForwardIterator __last,"},
{"lineNum":"  612","line":"\t\t\t      _Allocator& __alloc)"},
{"lineNum":"  613","line":"    {"},
{"lineNum":"  614","line":"      _ForwardIterator __cur = __first;"},
{"lineNum":"  615","line":"      __try"},
{"lineNum":"  616","line":"\t{"},
{"lineNum":"  617","line":"\t  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;"},
{"lineNum":"  618","line":"\t  for (; __cur != __last; ++__cur)"},
{"lineNum":"  619","line":"\t    __traits::construct(__alloc, std::__addressof(*__cur));"},
{"lineNum":"  620","line":"\t}"},
{"lineNum":"  621","line":"      __catch(...)"},
{"lineNum":"  622","line":"\t{"},
{"lineNum":"  623","line":"\t  std::_Destroy(__first, __cur, __alloc);"},
{"lineNum":"  624","line":"\t  __throw_exception_again;"},
{"lineNum":"  625","line":"\t}"},
{"lineNum":"  626","line":"    }"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"  template<typename _ForwardIterator, typename _Tp>"},
{"lineNum":"  629","line":"    inline void"},
{"lineNum":"  630","line":"    __uninitialized_default_a(_ForwardIterator __first,"},
{"lineNum":"  631","line":"\t\t\t      _ForwardIterator __last,"},
{"lineNum":"  632","line":"\t\t\t      allocator<_Tp>&)"},
{"lineNum":"  633","line":"    { std::__uninitialized_default(__first, __last); }"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"  // __uninitialized_default_n_a"},
{"lineNum":"  637","line":"  // Fills [first, first + n) with n default constructed value_types(s),"},
{"lineNum":"  638","line":"  // constructed with the allocator alloc."},
{"lineNum":"  639","line":"  template<typename _ForwardIterator, typename _Size, typename _Allocator>"},
{"lineNum":"  640","line":"    _ForwardIterator"},
{"lineNum":"  641","line":"    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,"},
{"lineNum":"  642","line":"\t\t\t\t_Allocator& __alloc)"},
{"lineNum":"  643","line":"    {"},
{"lineNum":"  644","line":"      _ForwardIterator __cur = __first;"},
{"lineNum":"  645","line":"      __try"},
{"lineNum":"  646","line":"\t{"},
{"lineNum":"  647","line":"\t  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;"},
{"lineNum":"  648","line":"\t  for (; __n > 0; --__n, (void) ++__cur)"},
{"lineNum":"  649","line":"\t    __traits::construct(__alloc, std::__addressof(*__cur));"},
{"lineNum":"  650","line":"\t  return __cur;"},
{"lineNum":"  651","line":"\t}"},
{"lineNum":"  652","line":"      __catch(...)"},
{"lineNum":"  653","line":"\t{"},
{"lineNum":"  654","line":"\t  std::_Destroy(__first, __cur, __alloc);"},
{"lineNum":"  655","line":"\t  __throw_exception_again;"},
{"lineNum":"  656","line":"\t}"},
{"lineNum":"  657","line":"    }"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"  template<typename _ForwardIterator, typename _Size, typename _Tp>"},
{"lineNum":"  660","line":"    inline _ForwardIterator"},
{"lineNum":"  661","line":"    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  662","line":"\t\t\t\tallocator<_Tp>&)"},
{"lineNum":"  663","line":"    { return std::__uninitialized_default_n(__first, __n); }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":"  template<bool _TrivialValueType>"},
{"lineNum":"  666","line":"    struct __uninitialized_default_novalue_1"},
{"lineNum":"  667","line":"    {"},
{"lineNum":"  668","line":"      template<typename _ForwardIterator>"},
{"lineNum":"  669","line":"\tstatic void"},
{"lineNum":"  670","line":"\t__uninit_default_novalue(_ForwardIterator __first,"},
{"lineNum":"  671","line":"\t\t\t\t _ForwardIterator __last)"},
{"lineNum":"  672","line":"\t{"},
{"lineNum":"  673","line":"\t  _ForwardIterator __cur = __first;"},
{"lineNum":"  674","line":"\t  __try"},
{"lineNum":"  675","line":"\t    {"},
{"lineNum":"  676","line":"\t      for (; __cur != __last; ++__cur)"},
{"lineNum":"  677","line":"\t\tstd::_Construct_novalue(std::__addressof(*__cur));"},
{"lineNum":"  678","line":"\t    }"},
{"lineNum":"  679","line":"\t  __catch(...)"},
{"lineNum":"  680","line":"\t    {"},
{"lineNum":"  681","line":"\t      std::_Destroy(__first, __cur);"},
{"lineNum":"  682","line":"\t      __throw_exception_again;"},
{"lineNum":"  683","line":"\t    }"},
{"lineNum":"  684","line":"\t}"},
{"lineNum":"  685","line":"    };"},
{"lineNum":"  686","line":""},
{"lineNum":"  687","line":"  template<>"},
{"lineNum":"  688","line":"    struct __uninitialized_default_novalue_1<true>"},
{"lineNum":"  689","line":"    {"},
{"lineNum":"  690","line":"      template<typename _ForwardIterator>"},
{"lineNum":"  691","line":"        static void"},
{"lineNum":"  692","line":"        __uninit_default_novalue(_ForwardIterator __first,"},
{"lineNum":"  693","line":"\t\t\t\t _ForwardIterator __last)"},
{"lineNum":"  694","line":"\t{"},
{"lineNum":"  695","line":"\t}"},
{"lineNum":"  696","line":"    };"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"  template<bool _TrivialValueType>"},
{"lineNum":"  699","line":"    struct __uninitialized_default_novalue_n_1"},
{"lineNum":"  700","line":"    {"},
{"lineNum":"  701","line":"      template<typename _ForwardIterator, typename _Size>"},
{"lineNum":"  702","line":"\tstatic _ForwardIterator"},
{"lineNum":"  703","line":"\t__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)"},
{"lineNum":"  704","line":"\t{"},
{"lineNum":"  705","line":"\t  _ForwardIterator __cur = __first;"},
{"lineNum":"  706","line":"\t  __try"},
{"lineNum":"  707","line":"\t    {"},
{"lineNum":"  708","line":"\t      for (; __n > 0; --__n, (void) ++__cur)"},
{"lineNum":"  709","line":"\t\tstd::_Construct_novalue(std::__addressof(*__cur));"},
{"lineNum":"  710","line":"\t      return __cur;"},
{"lineNum":"  711","line":"\t    }"},
{"lineNum":"  712","line":"\t  __catch(...)"},
{"lineNum":"  713","line":"\t    {"},
{"lineNum":"  714","line":"\t      std::_Destroy(__first, __cur);"},
{"lineNum":"  715","line":"\t      __throw_exception_again;"},
{"lineNum":"  716","line":"\t    }"},
{"lineNum":"  717","line":"\t}"},
{"lineNum":"  718","line":"    };"},
{"lineNum":"  719","line":""},
{"lineNum":"  720","line":"  template<>"},
{"lineNum":"  721","line":"    struct __uninitialized_default_novalue_n_1<true>"},
{"lineNum":"  722","line":"    {"},
{"lineNum":"  723","line":"      template<typename _ForwardIterator, typename _Size>"},
{"lineNum":"  724","line":"\tstatic _ForwardIterator"},
{"lineNum":"  725","line":"\t__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)"},
{"lineNum":"  726","line":"\t{ return std::next(__first, __n); }"},
{"lineNum":"  727","line":"    };"},
{"lineNum":"  728","line":""},
{"lineNum":"  729","line":"  // __uninitialized_default_novalue"},
{"lineNum":"  730","line":"  // Fills [first, last) with std::distance(first, last) default-initialized"},
{"lineNum":"  731","line":"  // value_types(s)."},
{"lineNum":"  732","line":"  template<typename _ForwardIterator>"},
{"lineNum":"  733","line":"    inline void"},
{"lineNum":"  734","line":"    __uninitialized_default_novalue(_ForwardIterator __first,"},
{"lineNum":"  735","line":"\t\t\t\t    _ForwardIterator __last)"},
{"lineNum":"  736","line":"    {"},
{"lineNum":"  737","line":"      typedef typename iterator_traits<_ForwardIterator>::value_type"},
{"lineNum":"  738","line":"\t_ValueType;"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"      std::__uninitialized_default_novalue_1<"},
{"lineNum":"  741","line":"\tis_trivially_default_constructible<_ValueType>::value>::"},
{"lineNum":"  742","line":"\t__uninit_default_novalue(__first, __last);"},
{"lineNum":"  743","line":"    }"},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"  // __uninitialized_default_n"},
{"lineNum":"  746","line":"  // Fills [first, first + n) with n default-initialized value_type(s)."},
{"lineNum":"  747","line":"  template<typename _ForwardIterator, typename _Size>"},
{"lineNum":"  748","line":"    inline _ForwardIterator"},
{"lineNum":"  749","line":"    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)"},
{"lineNum":"  750","line":"    {"},
{"lineNum":"  751","line":"      typedef typename iterator_traits<_ForwardIterator>::value_type"},
{"lineNum":"  752","line":"\t_ValueType;"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"      return __uninitialized_default_novalue_n_1<"},
{"lineNum":"  755","line":"\tis_trivially_default_constructible<_ValueType>::value>::"},
{"lineNum":"  756","line":"\t__uninit_default_novalue_n(__first, __n);"},
{"lineNum":"  757","line":"    }"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"  template<typename _InputIterator, typename _Size,"},
{"lineNum":"  760","line":"\t   typename _ForwardIterator>"},
{"lineNum":"  761","line":"    _ForwardIterator"},
{"lineNum":"  762","line":"    __uninitialized_copy_n(_InputIterator __first, _Size __n,"},
{"lineNum":"  763","line":"\t\t\t   _ForwardIterator __result, input_iterator_tag)"},
{"lineNum":"  764","line":"    {"},
{"lineNum":"  765","line":"      _ForwardIterator __cur = __result;"},
{"lineNum":"  766","line":"      __try"},
{"lineNum":"  767","line":"\t{"},
{"lineNum":"  768","line":"\t  for (; __n > 0; --__n, (void) ++__first, ++__cur)"},
{"lineNum":"  769","line":"\t    std::_Construct(std::__addressof(*__cur), *__first);"},
{"lineNum":"  770","line":"\t  return __cur;"},
{"lineNum":"  771","line":"\t}"},
{"lineNum":"  772","line":"      __catch(...)"},
{"lineNum":"  773","line":"\t{"},
{"lineNum":"  774","line":"\t  std::_Destroy(__result, __cur);"},
{"lineNum":"  775","line":"\t  __throw_exception_again;"},
{"lineNum":"  776","line":"\t}"},
{"lineNum":"  777","line":"    }"},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"  template<typename _RandomAccessIterator, typename _Size,"},
{"lineNum":"  780","line":"\t   typename _ForwardIterator>"},
{"lineNum":"  781","line":"    inline _ForwardIterator"},
{"lineNum":"  782","line":"    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,"},
{"lineNum":"  783","line":"\t\t\t   _ForwardIterator __result,"},
{"lineNum":"  784","line":"\t\t\t   random_access_iterator_tag)"},
{"lineNum":"  785","line":"    { return std::uninitialized_copy(__first, __first + __n, __result); }"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"  template<typename _InputIterator, typename _Size,"},
{"lineNum":"  788","line":"\t   typename _ForwardIterator>"},
{"lineNum":"  789","line":"    pair<_InputIterator, _ForwardIterator>"},
{"lineNum":"  790","line":"    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,"},
{"lineNum":"  791","line":"\t\t\t   _ForwardIterator __result, input_iterator_tag)"},
{"lineNum":"  792","line":"    {"},
{"lineNum":"  793","line":"      _ForwardIterator __cur = __result;"},
{"lineNum":"  794","line":"      __try"},
{"lineNum":"  795","line":"\t{"},
{"lineNum":"  796","line":"\t  for (; __n > 0; --__n, (void) ++__first, ++__cur)"},
{"lineNum":"  797","line":"\t    std::_Construct(std::__addressof(*__cur), *__first);"},
{"lineNum":"  798","line":"\t  return {__first, __cur};"},
{"lineNum":"  799","line":"\t}"},
{"lineNum":"  800","line":"      __catch(...)"},
{"lineNum":"  801","line":"\t{"},
{"lineNum":"  802","line":"\t  std::_Destroy(__result, __cur);"},
{"lineNum":"  803","line":"\t  __throw_exception_again;"},
{"lineNum":"  804","line":"\t}"},
{"lineNum":"  805","line":"    }"},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"  template<typename _RandomAccessIterator, typename _Size,"},
{"lineNum":"  808","line":"\t   typename _ForwardIterator>"},
{"lineNum":"  809","line":"    inline pair<_RandomAccessIterator, _ForwardIterator>"},
{"lineNum":"  810","line":"    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,"},
{"lineNum":"  811","line":"\t\t\t   _ForwardIterator __result,"},
{"lineNum":"  812","line":"\t\t\t   random_access_iterator_tag)"},
{"lineNum":"  813","line":"    {"},
{"lineNum":"  814","line":"      auto __second_res = uninitialized_copy(__first, __first + __n, __result);"},
{"lineNum":"  815","line":"      auto __first_res = std::next(__first, __n);"},
{"lineNum":"  816","line":"      return {__first_res, __second_res};"},
{"lineNum":"  817","line":"    }"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"  /**"},
{"lineNum":"  820","line":"   *  @brief Copies the range [first,first+n) into result."},
{"lineNum":"  821","line":"   *  @param  __first  An input iterator."},
{"lineNum":"  822","line":"   *  @param  __n      The number of elements to copy."},
{"lineNum":"  823","line":"   *  @param  __result An output iterator."},
{"lineNum":"  824","line":"   *  @return  __result + __n"},
{"lineNum":"  825","line":"   *"},
{"lineNum":"  826","line":"   *  Like copy_n(), but does not require an initialized output range."},
{"lineNum":"  827","line":"  */"},
{"lineNum":"  828","line":"  template<typename _InputIterator, typename _Size, typename _ForwardIterator>"},
{"lineNum":"  829","line":"    inline _ForwardIterator"},
{"lineNum":"  830","line":"    uninitialized_copy_n(_InputIterator __first, _Size __n,"},
{"lineNum":"  831","line":"\t\t\t _ForwardIterator __result)"},
{"lineNum":"  832","line":"    { return std::__uninitialized_copy_n(__first, __n, __result,"},
{"lineNum":"  833","line":"\t\t\t\t\t std::__iterator_category(__first)); }"},
{"lineNum":"  834","line":""},
{"lineNum":"  835","line":"  template<typename _InputIterator, typename _Size, typename _ForwardIterator>"},
{"lineNum":"  836","line":"    inline pair<_InputIterator, _ForwardIterator>"},
{"lineNum":"  837","line":"    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,"},
{"lineNum":"  838","line":"\t\t\t      _ForwardIterator __result)"},
{"lineNum":"  839","line":"    {"},
{"lineNum":"  840","line":"      return"},
{"lineNum":"  841","line":"\tstd::__uninitialized_copy_n_pair(__first, __n, __result,"},
{"lineNum":"  842","line":"\t\t\t\t\t std::__iterator_category(__first));"},
{"lineNum":"  843","line":"    }"},
{"lineNum":"  844","line":""},
{"lineNum":"  845","line":"#endif"},
{"lineNum":"  846","line":""},
{"lineNum":"  847","line":"#if __cplusplus >= 201703L"},
{"lineNum":"  848","line":"# define __cpp_lib_raw_memory_algorithms 201606L"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"  template <typename _ForwardIterator>"},
{"lineNum":"  851","line":"    inline void"},
{"lineNum":"  852","line":"    uninitialized_default_construct(_ForwardIterator __first,"},
{"lineNum":"  853","line":"\t\t\t\t    _ForwardIterator __last)"},
{"lineNum":"  854","line":"    {"},
{"lineNum":"  855","line":"      __uninitialized_default_novalue(__first, __last);"},
{"lineNum":"  856","line":"    }"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"  template <typename _ForwardIterator, typename _Size>"},
{"lineNum":"  859","line":"    inline _ForwardIterator"},
{"lineNum":"  860","line":"    uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)"},
{"lineNum":"  861","line":"    {"},
{"lineNum":"  862","line":"      return __uninitialized_default_novalue_n(__first, __count);"},
{"lineNum":"  863","line":"    }"},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"  template <typename _ForwardIterator>"},
{"lineNum":"  866","line":"    inline void"},
{"lineNum":"  867","line":"    uninitialized_value_construct(_ForwardIterator __first,"},
{"lineNum":"  868","line":"\t\t\t\t  _ForwardIterator __last)"},
{"lineNum":"  869","line":"    {"},
{"lineNum":"  870","line":"      return __uninitialized_default(__first, __last);"},
{"lineNum":"  871","line":"    }"},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"  template <typename _ForwardIterator, typename _Size>"},
{"lineNum":"  874","line":"    inline _ForwardIterator"},
{"lineNum":"  875","line":"    uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)"},
{"lineNum":"  876","line":"    {"},
{"lineNum":"  877","line":"      return __uninitialized_default_n(__first, __count);"},
{"lineNum":"  878","line":"    }"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"  template <typename _InputIterator, typename _ForwardIterator>"},
{"lineNum":"  881","line":"    inline _ForwardIterator"},
{"lineNum":"  882","line":"    uninitialized_move(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  883","line":"\t\t       _ForwardIterator __result)"},
{"lineNum":"  884","line":"    {"},
{"lineNum":"  885","line":"      return std::uninitialized_copy"},
{"lineNum":"  886","line":"\t(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),"},
{"lineNum":"  887","line":"\t _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);"},
{"lineNum":"  888","line":"    }"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"  template <typename _InputIterator, typename _Size, typename _ForwardIterator>"},
{"lineNum":"  891","line":"    inline pair<_InputIterator, _ForwardIterator>"},
{"lineNum":"  892","line":"    uninitialized_move_n(_InputIterator __first, _Size __count,"},
{"lineNum":"  893","line":"\t\t\t _ForwardIterator __result)"},
{"lineNum":"  894","line":"    {"},
{"lineNum":"  895","line":"      auto __res = std::__uninitialized_copy_n_pair"},
{"lineNum":"  896","line":"\t(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),"},
{"lineNum":"  897","line":"\t __count, __result);"},
{"lineNum":"  898","line":"      return {__res.first.base(), __res.second};"},
{"lineNum":"  899","line":"    }"},
{"lineNum":"  900","line":"#endif // C++17"},
{"lineNum":"  901","line":""},
{"lineNum":"  902","line":"#if __cplusplus >= 201103L"},
{"lineNum":"  903","line":"  template<typename _Tp, typename _Up, typename _Allocator>"},
{"lineNum":"  904","line":"    inline void"},
{"lineNum":"  905","line":"    __relocate_object_a(_Tp* __dest, _Up* __orig, _Allocator& __alloc)"},
{"lineNum":"  906","line":"    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,"},
{"lineNum":"  907","line":"\t\t\t __dest, std::move(*__orig)))"},
{"lineNum":"  908","line":"\t     && noexcept(std::allocator_traits<_Allocator>::destroy("},
{"lineNum":"  909","line":"\t\t\t    __alloc, std::__addressof(*__orig))))"},
{"lineNum":"  910","line":"    {"},
{"lineNum":"  911","line":"      typedef std::allocator_traits<_Allocator> __traits;"},
{"lineNum":"  912","line":"      __traits::construct(__alloc, __dest, std::move(*__orig));"},
{"lineNum":"  913","line":"      __traits::destroy(__alloc, std::__addressof(*__orig));"},
{"lineNum":"  914","line":"    }"},
{"lineNum":"  915","line":""},
{"lineNum":"  916","line":"  // This class may be specialized for specific types."},
{"lineNum":"  917","line":"  // Also known as is_trivially_relocatable."},
{"lineNum":"  918","line":"  template<typename _Tp, typename = void>"},
{"lineNum":"  919","line":"    struct __is_bitwise_relocatable"},
{"lineNum":"  920","line":"    : is_trivial<_Tp> { };"},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"  template <typename _Tp, typename _Up>"},
{"lineNum":"  923","line":"    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>"},
{"lineNum":"  924","line":"    __relocate_a_1(_Tp* __first, _Tp* __last,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  925","line":"\t\t   _Tp* __result, allocator<_Up>&) noexcept"},
{"lineNum":"  926","line":"    {"},
{"lineNum":"  927","line":"      ptrdiff_t __count = __last - __first;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  928","line":"      if (__count > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  929","line":"\t__builtin_memmove(__result, __first, __count * sizeof(_Tp));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  930","line":"      return __result + __count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  931","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"  template <typename _InputIterator, typename _ForwardIterator,"},
{"lineNum":"  934","line":"\t    typename _Allocator>"},
{"lineNum":"  935","line":"    inline _ForwardIterator"},
{"lineNum":"  936","line":"    __relocate_a_1(_InputIterator __first, _InputIterator __last,"},
{"lineNum":"  937","line":"\t\t   _ForwardIterator __result, _Allocator& __alloc)"},
{"lineNum":"  938","line":"    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),"},
{"lineNum":"  939","line":"\t\t\t\t\t       std::addressof(*__first),"},
{"lineNum":"  940","line":"\t\t\t\t\t       __alloc)))"},
{"lineNum":"  941","line":"    {"},
{"lineNum":"  942","line":"      typedef typename iterator_traits<_InputIterator>::value_type"},
{"lineNum":"  943","line":"\t_ValueType;"},
{"lineNum":"  944","line":"      typedef typename iterator_traits<_ForwardIterator>::value_type"},
{"lineNum":"  945","line":"\t_ValueType2;"},
{"lineNum":"  946","line":"      static_assert(std::is_same<_ValueType, _ValueType2>::value,"},
{"lineNum":"  947","line":"\t  \"relocation is only possible for values of the same type\");"},
{"lineNum":"  948","line":"      _ForwardIterator __cur = __result;"},
{"lineNum":"  949","line":"      for (; __first != __last; ++__first, (void)++__cur)"},
{"lineNum":"  950","line":"\tstd::__relocate_object_a(std::__addressof(*__cur),"},
{"lineNum":"  951","line":"\t\t\t\t std::__addressof(*__first), __alloc);"},
{"lineNum":"  952","line":"      return __cur;"},
{"lineNum":"  953","line":"    }"},
{"lineNum":"  954","line":""},
{"lineNum":"  955","line":"  template <typename _InputIterator, typename _ForwardIterator,"},
{"lineNum":"  956","line":"\t    typename _Allocator>"},
{"lineNum":"  957","line":"    inline _ForwardIterator"},
{"lineNum":"  958","line":"    __relocate_a(_InputIterator __first, _InputIterator __last,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  959","line":"\t\t _ForwardIterator __result, _Allocator& __alloc)"},
{"lineNum":"  960","line":"    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),"},
{"lineNum":"  961","line":"\t\t\t\t     std::__niter_base(__last),"},
{"lineNum":"  962","line":"\t\t\t\t     std::__niter_base(__result), __alloc)))"},
{"lineNum":"  963","line":"    {"},
{"lineNum":"  964","line":"      return __relocate_a_1(std::__niter_base(__first),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  965","line":"\t\t\t    std::__niter_base(__last),"},
{"lineNum":"  966","line":"\t\t\t    std::__niter_base(__result), __alloc);"},
{"lineNum":"  967","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  968","line":"#endif"},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"_GLIBCXX_END_NAMESPACE_VERSION"},
{"lineNum":"  971","line":"} // namespace"},
{"lineNum":"  972","line":""},
{"lineNum":"  973","line":"#endif /* _STL_UNINITIALIZED_H */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "bech32_fuzz_2_gcc_instrumented", "date" : "2023-07-28 14:53:55", "instrumented" : 32, "covered" : 0,};
var merged_data = [];
