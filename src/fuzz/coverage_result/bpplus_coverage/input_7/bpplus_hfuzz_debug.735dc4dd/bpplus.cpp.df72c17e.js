var data = {lines:[
{"lineNum":"    1","line":"#include \"bpplus.h\""},
{"lineNum":"    2","line":"#include \"transcript.h\""},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"namespace spark {"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"// Useful scalar constants"},
{"lineNum":"    7","line":"const Scalar ZERO = Scalar((uint64_t) 0);","class":"lineCov","hits":"2","order":"26","possible_hits":"2",},
{"lineNum":"    8","line":"const Scalar ONE = Scalar((uint64_t) 1);","class":"lineCov","hits":"2","order":"69","possible_hits":"2",},
{"lineNum":"    9","line":"const Scalar TWO = Scalar((uint64_t) 2);","class":"lineCov","hits":"2","order":"70","possible_hits":"2",},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"BPPlus::BPPlus(","class":"lineCov","hits":"1","order":"765","possible_hits":"1",},
{"lineNum":"   12","line":"        const GroupElement& G_,"},
{"lineNum":"   13","line":"        const GroupElement& H_,"},
{"lineNum":"   14","line":"        const std::vector<GroupElement>& Gi_,"},
{"lineNum":"   15","line":"        const std::vector<GroupElement>& Hi_,"},
{"lineNum":"   16","line":"        const std::size_t N_)"},
{"lineNum":"   17","line":"        : G (G_)","class":"lineCov","hits":"1","order":"757","possible_hits":"1",},
{"lineNum":"   18","line":"        , H (H_)","class":"lineCov","hits":"1","order":"761","possible_hits":"1",},
{"lineNum":"   19","line":"        , Gi (Gi_)","class":"lineCov","hits":"1","order":"762","possible_hits":"1",},
{"lineNum":"   20","line":"        , Hi (Hi_)","class":"lineCov","hits":"1","order":"763","possible_hits":"1",},
{"lineNum":"   21","line":"        , N (N_)","class":"lineCov","hits":"1","order":"764","possible_hits":"1",},
{"lineNum":"   22","line":"{","class":"lineCov","hits":"2","order":"756","possible_hits":"2",},
{"lineNum":"   23","line":"    if (Gi.size() != Hi.size()) {","class":"lineCov","hits":"1","order":"775","possible_hits":"1",},
{"lineNum":"   24","line":"        throw std::invalid_argument(\"Bad BPPlus generator sizes!\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   25","line":"    }"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    // Bit length must be a nonzero power of two"},
{"lineNum":"   28","line":"    if (!is_nonzero_power_of_2(N)) {","class":"lineCov","hits":"1","order":"776","possible_hits":"1",},
{"lineNum":"   29","line":"        throw std::invalid_argument(\"Bad BPPlus bit length!\");","class":"linePartCov","hits":"1","order":"777","possible_hits":"2",},
{"lineNum":"   30","line":"    }"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    // Compute 2**N-1 for optimized verification"},
{"lineNum":"   33","line":"    TWO_N_MINUS_ONE = TWO;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"    for (int i = 0; i < log2(N); i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":"        TWO_N_MINUS_ONE *= TWO_N_MINUS_ONE;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"    TWO_N_MINUS_ONE -= ONE;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   38","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"// The floor function of log2"},
{"lineNum":"   41","line":"std::size_t log2(std::size_t n) {","class":"lineCov","hits":"2","order":"722","possible_hits":"2",},
{"lineNum":"   42","line":"    std::size_t l = 0;","class":"lineCov","hits":"1","order":"723","possible_hits":"1",},
{"lineNum":"   43","line":"    while ((n >>= 1) != 0) {","class":"linePartCov","hits":"1","order":"724","possible_hits":"2",},
{"lineNum":"   44","line":"        l++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"    }"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    return l;","class":"lineCov","hits":"1","order":"725","possible_hits":"1",},
{"lineNum":"   48","line":"}"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"// Is this value a nonzero power of 2?"},
{"lineNum":"   51","line":"bool is_nonzero_power_of_2(std::size_t n) {","class":"lineCov","hits":"2","order":"719","possible_hits":"2",},
{"lineNum":"   52","line":"    return n > 0 && (n & (n - 1)) == 0;","class":"lineCov","hits":"1","order":"720","possible_hits":"1",},
{"lineNum":"   53","line":"}"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"void BPPlus::prove("},
{"lineNum":"   56","line":"        const std::vector<Scalar>& unpadded_v,"},
{"lineNum":"   57","line":"        const std::vector<Scalar>& unpadded_r,"},
{"lineNum":"   58","line":"        const std::vector<GroupElement>& unpadded_C,"},
{"lineNum":"   59","line":"        BPPlusProof& proof) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   60","line":"    // Bulletproofs+ are only defined when the input set size is a nonzero power of two"},
{"lineNum":"   61","line":"    // To get around this, we can trivially pad the input set with zero commitments"},
{"lineNum":"   62","line":"    // We make sure this is done canonically in a way that\'s transparent to the caller"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"    // Define the original and padded sizes"},
{"lineNum":"   65","line":"    std::size_t unpadded_M = unpadded_C.size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"    if (unpadded_M == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"        throw std::invalid_argument(\"Bad BPPlus statement!1\");","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   68","line":"    }"},
{"lineNum":"   69","line":"    std::size_t M = unpadded_M;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"    if (!is_nonzero_power_of_2(M)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"        M = 1 << (log2(unpadded_M) + 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"    }"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    // Set up transcript, using the unpadded values"},
{"lineNum":"   75","line":"    // This is fine since the verifier canonically generates the same transcript"},
{"lineNum":"   76","line":"    Transcript transcript(LABEL_TRANSCRIPT_BPPLUS);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   77","line":"    transcript.add(\"G\", G);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   78","line":"    transcript.add(\"H\", H);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   79","line":"    transcript.add(\"Gi\", Gi);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   80","line":"    transcript.add(\"Hi\", Hi);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   81","line":"    transcript.add(\"N\", Scalar(N));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":"    transcript.add(\"C\", unpadded_C);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    // Now pad the input set to produce a valid statement"},
{"lineNum":"   85","line":"    std::vector<Scalar> v(unpadded_v);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"    std::vector<Scalar> r(unpadded_r);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"    std::vector<GroupElement> C(unpadded_C);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"    for (std::size_t i = unpadded_M; i < M; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   89","line":"        v.emplace_back(); // zero scalar","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"        r.emplace_back(); // zero scalar","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"        C.emplace_back(); // identity group element, a valid commitment using the corresponding scalars","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    // Check statement validity"},
{"lineNum":"   95","line":"    if (C.size() != M) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"        throw std::invalid_argument(\"Bad BPPlus statement!2\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":"    if (!is_nonzero_power_of_2(M)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"        throw std::invalid_argument(\"Unexpected bad padding!3\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":"    if (N*M > Gi.size()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"        throw std::invalid_argument(\"Bad BPPlus statement!4\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  103","line":"    }"},
{"lineNum":"  104","line":"    if (!(v.size() == M && r.size() == M)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"        throw std::invalid_argument(\"Bad BPPlus statement!5\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  106","line":"    }"},
{"lineNum":"  107","line":"    for (std::size_t j = 0; j < M; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":"        if (!(G*v[j] + H*r[j] == C[j])) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":"            throw std::invalid_argument(\"Bad BPPlus statement!6\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  110","line":"        }"},
{"lineNum":"  111","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    // Decompose bits"},
{"lineNum":"  114","line":"    std::vector<std::vector<bool>> bits;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"    bits.resize(M);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"    for (std::size_t j = 0; j < M; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  117","line":"        v[j].get_bits(bits[j]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    // Compute aL, aR"},
{"lineNum":"  121","line":"    std::vector<Scalar> aL, aR;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"    aL.reserve(N*M);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"    aR.reserve(N*M);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"    for (std::size_t j = 0; j < M; ++j)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  125","line":"    {"},
{"lineNum":"  126","line":"        for (std::size_t i = 1; i <= N; ++i)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"        {"},
{"lineNum":"  128","line":"            aL.emplace_back(uint64_t(bits[j][bits[j].size() - i]));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"            aR.emplace_back(Scalar(uint64_t(bits[j][bits[j].size() - i])) - ONE);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  130","line":"        }"},
{"lineNum":"  131","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    // Compute A"},
{"lineNum":"  134","line":"    Scalar alpha;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"    alpha.randomize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    std::vector<GroupElement> A_points;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  138","line":"    std::vector<Scalar> A_scalars;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"    A_points.reserve(2*N*M + 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":"    A_points.reserve(2*N*M + 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    A_points.emplace_back(H);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"    A_scalars.emplace_back(alpha);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"    for (std::size_t i = 0; i < N*M; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  145","line":"        A_points.emplace_back(Gi[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":"        A_scalars.emplace_back(aL[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"        A_points.emplace_back(Hi[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"        A_scalars.emplace_back(aR[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"    secp_primitives::MultiExponent A_multiexp(A_points, A_scalars);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":"    proof.A = A_multiexp.get_multiple();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  152","line":"    transcript.add(\"A\", proof.A);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    // Challenges"},
{"lineNum":"  155","line":"    Scalar y = transcript.challenge(\"y\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  156","line":"    Scalar z = transcript.challenge(\"z\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  157","line":"    Scalar z_square = z.square();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    // Challenge powers"},
{"lineNum":"  160","line":"    std::vector<Scalar> y_powers;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"    y_powers.resize(M*N + 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"    y_powers[0] = ZERO;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":"    y_powers[1] = y;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"    for (std::size_t i = 2; i < M*N + 2; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  165","line":"        y_powers[i] = y_powers[i-1]*y;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  166","line":"    }"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    // Compute d"},
{"lineNum":"  169","line":"    std::vector<Scalar> d;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"    d.resize(M*N);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"    d[0] = z_square;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"    for (std::size_t i = 1; i < N; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  173","line":"        d[i] = TWO*d[i-1];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  174","line":"    }"},
{"lineNum":"  175","line":"    for (std::size_t j = 1; j < M; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  176","line":"        for (std::size_t i = 0; i < N; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  177","line":"            d[j*N+i] = d[(j-1)*N+i]*z_square;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  178","line":"        }"},
{"lineNum":"  179","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    // Compute aL1, aR1"},
{"lineNum":"  182","line":"    std::vector<Scalar> aL1, aR1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"    for (std::size_t i = 0; i < N*M; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  184","line":"        aL1.emplace_back(aL[i] - z);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  185","line":"        aR1.emplace_back(aR[i] + d[i]*y_powers[N*M - i] + z);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  186","line":"    }"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"    // Compute alpha1"},
{"lineNum":"  189","line":"    Scalar alpha1 = alpha;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"    Scalar z_even_powers = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":"    for (std::size_t j = 0; j < M; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  192","line":"        z_even_powers *= z_square;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"        alpha1 += z_even_powers*r[j]*y_powers[N*M+1];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  194","line":"    }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"    // Run the inner product rounds"},
{"lineNum":"  197","line":"    std::vector<GroupElement> Gi1(Gi);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"    std::vector<GroupElement> Hi1(Hi);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"    std::vector<Scalar> a1(aL1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"    std::vector<Scalar> b1(aR1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  201","line":"    std::size_t N1 = N*M;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"    while (N1 > 1) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  204","line":"        N1 /= 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"        Scalar dL, dR;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"        dL.randomize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":"        dR.randomize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"        // Compute cL, cR"},
{"lineNum":"  211","line":"        Scalar cL, cR;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  212","line":"        for (std::size_t i = 0; i < N1; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  213","line":"            cL += a1[i]*y_powers[i+1]*b1[i+N1];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  214","line":"            cR += a1[i+N1]*y_powers[N1]*y_powers[i+1]*b1[i];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  215","line":"        }"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"        // Compute L, R"},
{"lineNum":"  218","line":"        GroupElement L_, R_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"        std::vector<GroupElement> L_points, R_points;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":"        std::vector<Scalar> L_scalars, R_scalars;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  221","line":"        L_points.reserve(2*N1 + 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  222","line":"        R_points.reserve(2*N1 + 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":"        L_scalars.reserve(2*N1 + 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":"        R_scalars.reserve(2*N1 + 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  225","line":"        Scalar y_N1_inverse = y_powers[N1].inverse();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  226","line":"        for (std::size_t i = 0; i < N1; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  227","line":"            L_points.emplace_back(Gi1[i+N1]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  228","line":"            L_scalars.emplace_back(a1[i]*y_N1_inverse);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  229","line":"            L_points.emplace_back(Hi1[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":"            L_scalars.emplace_back(b1[i+N1]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"            R_points.emplace_back(Gi1[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"            R_scalars.emplace_back(a1[i+N1]*y_powers[N1]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  234","line":"            R_points.emplace_back(Hi1[i+N1]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"            R_scalars.emplace_back(b1[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":"        L_points.emplace_back(G);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  238","line":"        L_scalars.emplace_back(cL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"        L_points.emplace_back(H);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":"        L_scalars.emplace_back(dL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  241","line":"        R_points.emplace_back(G);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"        R_scalars.emplace_back(cR);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"        R_points.emplace_back(H);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":"        R_scalars.emplace_back(dR);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"        secp_primitives::MultiExponent L_multiexp(L_points, L_scalars);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":"        secp_primitives::MultiExponent R_multiexp(R_points, R_scalars);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":"        L_ = L_multiexp.get_multiple();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  249","line":"        R_ = R_multiexp.get_multiple();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  250","line":"        proof.L.emplace_back(L_);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"        proof.R.emplace_back(R_);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"        transcript.add(\"L\", L_);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":"        transcript.add(\"R\", R_);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  255","line":"        Scalar e = transcript.challenge(\"e\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  256","line":"        Scalar e_inverse = e.inverse();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"        // Compress round elements"},
{"lineNum":"  259","line":"        for (std::size_t i = 0; i < N1; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  260","line":"            Gi1[i] = Gi1[i]*e_inverse + Gi1[i+N1]*(e*y_N1_inverse);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  261","line":"            Hi1[i] = Hi1[i]*e + Hi1[i+N1]*e_inverse;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  262","line":"            a1[i] = a1[i]*e + a1[i+N1]*y_powers[N1]*e_inverse;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  263","line":"            b1[i] = b1[i]*e_inverse + b1[i+N1]*e;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  264","line":"        }"},
{"lineNum":"  265","line":"        Gi1.resize(N1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"        Hi1.resize(N1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"        a1.resize(N1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"        b1.resize(N1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"        // Update alpha1"},
{"lineNum":"  271","line":"        alpha1 = dL*e.square() + alpha1 + dR*e_inverse.square();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  272","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    // Final proof elements"},
{"lineNum":"  275","line":"    Scalar r_, s_, d_, eta_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":"    r_.randomize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  277","line":"    s_.randomize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  278","line":"    d_.randomize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":"    eta_.randomize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"    proof.A1 = Gi1[0]*r_ + Hi1[0]*s_ + G*(r_*y*b1[0] + s_*y*a1[0]) + H*d_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  282","line":"    proof.B = G*(r_*y*s_) + H*eta_;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"    transcript.add(\"A1\", proof.A1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  285","line":"    transcript.add(\"B\", proof.B);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  286","line":"    Scalar e1 = transcript.challenge(\"e1\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"    proof.r1 = r_ + a1[0]*e1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  289","line":"    proof.s1 = s_ + b1[0]*e1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  290","line":"    proof.d1 = eta_ + d_*e1 + alpha1*e1.square();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  291","line":"}","class":"lineNoCov","hits":"0","possible_hits":"51",},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"bool BPPlus::verify(const std::vector<GroupElement>& unpadded_C, const BPPlusProof& proof) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  294","line":"    std::vector<std::vector<GroupElement>> unpadded_C_batch = {unpadded_C};","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  295","line":"    std::vector<BPPlusProof> proof_batch = {proof};","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"    return verify(unpadded_C_batch, proof_batch);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"}","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"bool BPPlus::verify(const std::vector<std::vector<GroupElement>>& unpadded_C, const std::vector<BPPlusProof>& proofs) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  301","line":"    // Preprocess all proofs"},
{"lineNum":"  302","line":"    if (!(unpadded_C.size() == proofs.size())) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"    }"},
{"lineNum":"  305","line":"    std::size_t N_proofs = proofs.size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  306","line":"    std::size_t max_M = 0; // maximum number of padded aggregated values across all proofs","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"    // Check aggregated input consistency"},
{"lineNum":"  309","line":"    for (std::size_t k = 0; k < N_proofs; k++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  310","line":"        std::size_t unpadded_M = unpadded_C[k].size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"        std::size_t M = unpadded_M;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"        // Require a power of two"},
{"lineNum":"  314","line":"        if (M == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":"        }"},
{"lineNum":"  317","line":"        if (!is_nonzero_power_of_2(M)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  318","line":"            M = 1 << log2(unpadded_M) + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":"        }"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"        // Track the maximum value"},
{"lineNum":"  322","line":"        if (M > max_M) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  323","line":"            max_M = M;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"        }"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"        // Check inner product round consistency"},
{"lineNum":"  327","line":"        std::size_t rounds = proofs[k].L.size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":"        if (proofs[k].R.size() != rounds) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  330","line":"        }"},
{"lineNum":"  331","line":"        if (log2(N*M) != rounds) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  332","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  333","line":"        }"},
{"lineNum":"  334","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"    // Check the bounds on the batch"},
{"lineNum":"  337","line":"    if (max_M*N > Gi.size() || max_M*N > Hi.size()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  338","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  339","line":"    }"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    // Set up final multiscalar multiplication and common scalars"},
{"lineNum":"  342","line":"    std::vector<GroupElement> points;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  343","line":"    std::vector<Scalar> scalars;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  344","line":"    Scalar G_scalar, H_scalar;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"    // Interleave the Gi and Hi scalars"},
{"lineNum":"  347","line":"    for (std::size_t i = 0; i < max_M*N; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  348","line":"        points.emplace_back(Gi[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  349","line":"        scalars.emplace_back(ZERO);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  350","line":"        points.emplace_back(Hi[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  351","line":"        scalars.emplace_back(ZERO);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  352","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"    // Process each proof and add to the batch"},
{"lineNum":"  355","line":"    for (std::size_t k_proofs = 0; k_proofs < N_proofs; k_proofs++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  356","line":"        const BPPlusProof proof = proofs[k_proofs];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":"        const std::size_t unpadded_M = unpadded_C[k_proofs].size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  358","line":"        const std::size_t rounds = proof.L.size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"        // Weight this proof in the batch"},
{"lineNum":"  361","line":"        Scalar w = ZERO;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  362","line":"        while (w == ZERO) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  363","line":"            w.randomize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":"        }"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"        // Set up transcript"},
{"lineNum":"  367","line":"        Transcript transcript(LABEL_TRANSCRIPT_BPPLUS);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  368","line":"        transcript.add(\"G\", G);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  369","line":"        transcript.add(\"H\", H);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  370","line":"        transcript.add(\"Gi\", Gi);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  371","line":"        transcript.add(\"Hi\", Hi);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  372","line":"        transcript.add(\"N\", Scalar(N));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  373","line":"        transcript.add(\"C\", unpadded_C[k_proofs]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  374","line":"        transcript.add(\"A\", proof.A);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"        // Pad to a valid statement if needed"},
{"lineNum":"  377","line":"        std::size_t M = unpadded_M;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  378","line":"        if (!is_nonzero_power_of_2(M)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  379","line":"            M = 1 << (log2(unpadded_M) + 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  380","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  381","line":"        std::vector<GroupElement> C(unpadded_C[k_proofs]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  382","line":"        for (std::size_t i = unpadded_M; i < M; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  383","line":"            C.emplace_back();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  384","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"        // Get challenges"},
{"lineNum":"  387","line":"        Scalar y = transcript.challenge(\"y\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  388","line":"        Scalar y_inverse = y.inverse();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  389","line":"        Scalar y_NM = y;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  390","line":"        for (std::size_t i = 0; i < rounds; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  391","line":"            y_NM = y_NM.square();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  392","line":"        }"},
{"lineNum":"  393","line":"        Scalar y_NM_1 = y_NM*y;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"        Scalar z = transcript.challenge(\"z\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  396","line":"        Scalar z_square = z.square();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"        std::vector<Scalar> e;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  399","line":"        std::vector<Scalar> e_inverse;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":"        for (std::size_t j = 0; j < rounds; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  401","line":"            transcript.add(\"L\", proof.L[j]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  402","line":"            transcript.add(\"R\", proof.R[j]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  403","line":"            e.emplace_back(transcript.challenge(\"e\"));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  404","line":"            e_inverse.emplace_back(e[j].inverse());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  405","line":"        }"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"        transcript.add(\"A1\", proof.A1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  408","line":"        transcript.add(\"B\", proof.B);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  409","line":"        Scalar e1 = transcript.challenge(\"e1\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  410","line":"        Scalar e1_square = e1.square();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"        // C_j: -e1**2 * z**(2*(j + 1)) * y**(N*M + 1) * w"},
{"lineNum":"  413","line":"        Scalar C_scalar = e1_square.negate()*z_square*y_NM_1*w;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  414","line":"        for (std::size_t j = 0; j < M; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  415","line":"            points.emplace_back(C[j]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  416","line":"            scalars.emplace_back(C_scalar);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"            C_scalar *= z.square();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  419","line":"        }"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"        // B: -w"},
{"lineNum":"  422","line":"        points.emplace_back(proof.B);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":"        scalars.emplace_back(w.negate());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"        // A1: -w*e1"},
{"lineNum":"  426","line":"        points.emplace_back(proof.A1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":"        scalars.emplace_back(w.negate()*e1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"        // A: -w*e1**2"},
{"lineNum":"  430","line":"        points.emplace_back(proof.A);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  431","line":"        scalars.emplace_back(w.negate()*e1_square);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"        // H: w*d1"},
{"lineNum":"  434","line":"        H_scalar += w*proof.d1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"        // Compute d"},
{"lineNum":"  437","line":"        std::vector<Scalar> d;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  438","line":"        d.resize(N*M);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":"        d[0] = z_square;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  440","line":"        for (std::size_t i = 1; i < N; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  441","line":"            d[i] = d[i-1] + d[i-1];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  442","line":"        }"},
{"lineNum":"  443","line":"        for (std::size_t j = 1; j < M; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  444","line":"            for (std::size_t i = 0; i < N; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  445","line":"                d[j*N + i] = d[(j - 1)*N + i]*z_square;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  446","line":"            }"},
{"lineNum":"  447","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  448","line":""},
{"lineNum":"  449","line":"        // Sum the elements of d"},
{"lineNum":"  450","line":"        Scalar sum_d = z_square;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  451","line":"        Scalar temp_z = sum_d;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  452","line":"        std::size_t temp_2M = 2*M;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  453","line":"        while (temp_2M > 2) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  454","line":"            sum_d += sum_d*temp_z;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  455","line":"            temp_z = temp_z.square();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  456","line":"            temp_2M /= 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  457","line":"        }"},
{"lineNum":"  458","line":"        sum_d *= TWO_N_MINUS_ONE;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"        // Sum the powers of y"},
{"lineNum":"  461","line":"        Scalar sum_y;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  462","line":"        Scalar track = y;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  463","line":"        for (std::size_t i = 0; i < N*M; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  464","line":"            sum_y += track;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  465","line":"            track *= y;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  466","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"        // G: w*(r1*y*s1 + e1**2*(y**(N*M + 1)*z*sum_d + (z**2-z)*sum_y))"},
{"lineNum":"  469","line":"        G_scalar += w*(proof.r1*y*proof.s1 + e1_square*(y_NM_1*z*sum_d + (z_square - z)*sum_y));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"        // Track some iterated exponential terms"},
{"lineNum":"  472","line":"        Scalar iter_y_inv = ONE; // y.inverse()**i","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  473","line":"        Scalar iter_y_NM = y_NM; // y**(N*M - i)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"        // Gi, Hi"},
{"lineNum":"  476","line":"        for (std::size_t i = 0; i < N*M; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  477","line":"            Scalar g = proof.r1*e1*iter_y_inv;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  478","line":"            Scalar h = proof.s1*e1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  479","line":"            for (std::size_t j = 0; j < rounds; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  480","line":"                if ((i >> j) & 1) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  481","line":"                    g *= e[rounds-j-1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":"                    h *= e_inverse[rounds-j-1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  483","line":"                } else {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  484","line":"                    h *= e[rounds-j-1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  485","line":"                    g *= e_inverse[rounds-j-1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  486","line":"                }"},
{"lineNum":"  487","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"            // Gi"},
{"lineNum":"  490","line":"            scalars[2*i] += w*(g + e1_square*z);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"            // Hi"},
{"lineNum":"  493","line":"            scalars[2*i+1] += w*(h - e1_square*(d[i]*iter_y_NM+z));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"            // Update the iterated values"},
{"lineNum":"  496","line":"            iter_y_inv *= y_inverse;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  497","line":"            iter_y_NM *= y_inverse;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  498","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"        // L, R"},
{"lineNum":"  501","line":"        for (std::size_t j = 0; j < rounds; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  502","line":"            points.emplace_back(proof.L[j]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  503","line":"            scalars.emplace_back(w*(e1_square.negate()*e[j].square()));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  504","line":"            points.emplace_back(proof.R[j]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  505","line":"            scalars.emplace_back(w*(e1_square.negate()*e_inverse[j].square()));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  506","line":"        }"},
{"lineNum":"  507","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"    // Add the common generators"},
{"lineNum":"  510","line":"    points.emplace_back(G);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  511","line":"    scalars.emplace_back(G_scalar);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  512","line":"    points.emplace_back(H);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  513","line":"    scalars.emplace_back(H_scalar);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"    // Test the batch"},
{"lineNum":"  516","line":"    secp_primitives::MultiExponent multiexp(points, scalars);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  517","line":"    return multiexp.get_multiple().isInfinity();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  518","line":"}","class":"lineNoCov","hits":"0","possible_hits":"42",},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "bpplus_hfuzz_debug", "date" : "2023-08-17 17:14:35", "instrumented" : 338, "covered" : 19,};
var merged_data = [];
