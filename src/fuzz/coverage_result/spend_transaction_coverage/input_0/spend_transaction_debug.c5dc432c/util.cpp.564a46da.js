var data = {lines:[
{"lineNum":"    1","line":"// Copyright (c) 2009-2010 Satoshi Nakamoto"},
{"lineNum":"    2","line":"// Copyright (c) 2009-2016 The Bitcoin Core developers"},
{"lineNum":"    3","line":"// Distributed under the MIT software license, see the accompanying"},
{"lineNum":"    4","line":"// file COPYING or http://www.opensource.org/licenses/mit-license.php."},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#if defined(HAVE_CONFIG_H)"},
{"lineNum":"    7","line":"#include \"config/bitcoin-config.h\""},
{"lineNum":"    8","line":"#endif"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#include \"util.h\""},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#include \"support/allocators/secure.h\""},
{"lineNum":"   13","line":"#include \"chainparamsbase.h\""},
{"lineNum":"   14","line":"#include \"ctpl.h\""},
{"lineNum":"   15","line":"#include \"random.h\""},
{"lineNum":"   16","line":"#include \"serialize.h\""},
{"lineNum":"   17","line":"#include \"stacktraces.h\""},
{"lineNum":"   18","line":"#include \"sync.h\""},
{"lineNum":"   19","line":"#include \"utilstrencodings.h\""},
{"lineNum":"   20","line":"#include \"utiltime.h\""},
{"lineNum":"   21","line":"#include \"warnings.h\""},
{"lineNum":"   22","line":"#include <stdarg.h>"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))"},
{"lineNum":"   25","line":"#include <pthread.h>"},
{"lineNum":"   26","line":"#include <pthread_np.h>"},
{"lineNum":"   27","line":"#endif"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"#ifndef WIN32"},
{"lineNum":"   30","line":"// for posix_fallocate"},
{"lineNum":"   31","line":"#ifdef __linux__"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"#ifdef _POSIX_C_SOURCE"},
{"lineNum":"   34","line":"#undef _POSIX_C_SOURCE"},
{"lineNum":"   35","line":"#endif"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"#define _POSIX_C_SOURCE 200112L"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"#endif // __linux__"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"#include <algorithm>"},
{"lineNum":"   42","line":"#include <fcntl.h>"},
{"lineNum":"   43","line":"#include <sys/resource.h>"},
{"lineNum":"   44","line":"#include <sys/stat.h>"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"#else"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#ifdef _MSC_VER"},
{"lineNum":"   49","line":"#pragma warning(disable:4786)"},
{"lineNum":"   50","line":"#pragma warning(disable:4804)"},
{"lineNum":"   51","line":"#pragma warning(disable:4805)"},
{"lineNum":"   52","line":"#pragma warning(disable:4717)"},
{"lineNum":"   53","line":"#endif"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"#ifdef _WIN32_WINNT"},
{"lineNum":"   56","line":"#undef _WIN32_WINNT"},
{"lineNum":"   57","line":"#endif"},
{"lineNum":"   58","line":"#define _WIN32_WINNT 0x0501"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"#ifdef _WIN32_IE"},
{"lineNum":"   61","line":"#undef _WIN32_IE"},
{"lineNum":"   62","line":"#endif"},
{"lineNum":"   63","line":"#define _WIN32_IE 0x0501"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"#define WIN32_LEAN_AND_MEAN 1"},
{"lineNum":"   66","line":"#ifndef NOMINMAX"},
{"lineNum":"   67","line":"#define NOMINMAX"},
{"lineNum":"   68","line":"#endif"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"#include <io.h> /* for _commit */"},
{"lineNum":"   71","line":"#include <shlobj.h>"},
{"lineNum":"   72","line":"#endif"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"#ifdef HAVE_SYS_PRCTL_H"},
{"lineNum":"   75","line":"#include <sys/prctl.h>"},
{"lineNum":"   76","line":"#endif"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"#ifdef HAVE_MALLOPT_ARENA_MAX"},
{"lineNum":"   79","line":"#include <malloc.h>"},
{"lineNum":"   80","line":"#endif"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"#include <boost/algorithm/string/case_conv.hpp> // for to_lower()"},
{"lineNum":"   83","line":"#include <boost/algorithm/string/join.hpp>"},
{"lineNum":"   84","line":"#include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()"},
{"lineNum":"   85","line":"#include <boost/filesystem.hpp>"},
{"lineNum":"   86","line":"#include <boost/filesystem/fstream.hpp>"},
{"lineNum":"   87","line":"#include <boost/foreach.hpp>"},
{"lineNum":"   88","line":"#include <boost/program_options/detail/config_file.hpp>"},
{"lineNum":"   89","line":"#include <boost/program_options/parsers.hpp>"},
{"lineNum":"   90","line":"#include <boost/thread.hpp>"},
{"lineNum":"   91","line":"#include <openssl/crypto.h>"},
{"lineNum":"   92","line":"#include <openssl/rand.h>"},
{"lineNum":"   93","line":"#include <openssl/conf.h>"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"// Work around clang compilation problem in Boost 1.46:"},
{"lineNum":"   96","line":"// /usr/include/boost/program_options/detail/config_file.hpp:163:17: error: call to function \'to_internal\' that is neither visible in the template definition nor found by argument-dependent lookup"},
{"lineNum":"   97","line":"// See also: http://stackoverflow.com/questions/10020179/compilation-fail-in-boost-librairies-program-options"},
{"lineNum":"   98","line":"//           http://clang.debian.net/status.php?version=3.0&key=CANNOT_FIND_FUNCTION"},
{"lineNum":"   99","line":"namespace boost {"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    namespace program_options {"},
{"lineNum":"  102","line":"        std::string to_internal(const std::string&);"},
{"lineNum":"  103","line":"    }"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"} // namespace boost"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"// znode fZnode"},
{"lineNum":"  108","line":"bool fMasternodeMode = false;"},
{"lineNum":"  109","line":"bool fLiteMode = false;"},
{"lineNum":"  110","line":"int nWalletBackups = 10;"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"const char * const BITCOIN_CONF_FILENAME = \"firo.conf\";"},
{"lineNum":"  113","line":"const char * const BITCOIN_PID_FILENAME = \"firod.pid\";"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"CCriticalSection cs_args;","class":"lineCov","hits":"2","order":"83","possible_hits":"2",},
{"lineNum":"  116","line":"std::map<std::string, std::string> mapArgs;","class":"lineCov","hits":"2","order":"84","possible_hits":"2",},
{"lineNum":"  117","line":"static std::map<std::string, std::vector<std::string> > _mapMultiArgs;","class":"lineCov","hits":"2","order":"85","possible_hits":"2",},
{"lineNum":"  118","line":"const std::map<std::string, std::vector<std::string> >& mapMultiArgs = _mapMultiArgs;"},
{"lineNum":"  119","line":"bool fDebug = false;"},
{"lineNum":"  120","line":"bool fPrintToConsole = false;"},
{"lineNum":"  121","line":"bool fPrintToDebugLog = true;"},
{"lineNum":"  122","line":"bool fNoDebug = false; //A temporary fix for https://github.com/firoorg/firo/issues/1011"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"bool fLogTimestamps = DEFAULT_LOGTIMESTAMPS;"},
{"lineNum":"  125","line":"bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;"},
{"lineNum":"  126","line":"bool fLogIPs = DEFAULT_LOGIPS;"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"bool fSkipMnpayoutCheck = false;"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"std::atomic<bool> fReopenDebugLog(false);"},
{"lineNum":"  131","line":"CTranslationInterface translationInterface;","class":"lineCov","hits":"2","order":"86","possible_hits":"2",},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"/** Flag to indicate, whether the Elysium log file should be reopened. */"},
{"lineNum":"  134","line":"std::atomic<bool> fReopenElysiumLog(false);"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"/** Init OpenSSL library multithreading support */"},
{"lineNum":"  137","line":"static CCriticalSection** ppmutexOpenSSL;"},
{"lineNum":"  138","line":"void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS"},
{"lineNum":"  139","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  140","line":"    if (mode & CRYPTO_LOCK) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"        ENTER_CRITICAL_SECTION(*ppmutexOpenSSL[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  142","line":"    } else {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"        LEAVE_CRITICAL_SECTION(*ppmutexOpenSSL[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"    }"},
{"lineNum":"  145","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"// Init"},
{"lineNum":"  148","line":"class CInit"},
{"lineNum":"  149","line":"{"},
{"lineNum":"  150","line":"public:"},
{"lineNum":"  151","line":"    CInit()"},
{"lineNum":"  152","line":"    {","class":"lineCov","hits":"2","order":"89","possible_hits":"2",},
{"lineNum":"  153","line":"        // Init OpenSSL library multithreading support"},
{"lineNum":"  154","line":"        ppmutexOpenSSL = (CCriticalSection**)OPENSSL_malloc(CRYPTO_num_locks() * sizeof(CCriticalSection*));","class":"lineCov","hits":"1","order":"90","possible_hits":"1",},
{"lineNum":"  155","line":"        for (int i = 0; i < CRYPTO_num_locks(); i++)","class":"lineCov","hits":"2","order":"91","possible_hits":"2",},
{"lineNum":"  156","line":"            ppmutexOpenSSL[i] = new CCriticalSection();","class":"linePartCov","hits":"1","order":"92","possible_hits":"4",},
{"lineNum":"  157","line":"        CRYPTO_set_locking_callback(locking_callback);"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"        // OpenSSL can optionally load a config file which lists optional loadable modules and engines."},
{"lineNum":"  160","line":"        // We don\'t use them so we don\'t require the config. However some of our libs may call functions"},
{"lineNum":"  161","line":"        // which attempt to load the config file, possibly resulting in an exit() or crash if it is missing"},
{"lineNum":"  162","line":"        // or corrupt. Explicitly tell OpenSSL not to try to load the file. The result for our libs will be"},
{"lineNum":"  163","line":"        // that the config appears to have been loaded and there are no modules/engines available."},
{"lineNum":"  164","line":"        OPENSSL_no_config();","class":"lineCov","hits":"1","order":"93","possible_hits":"1",},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"#ifdef WIN32"},
{"lineNum":"  167","line":"        // Seed OpenSSL PRNG with current contents of the screen"},
{"lineNum":"  168","line":"        RAND_screen();"},
{"lineNum":"  169","line":"#endif"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        // Seed OpenSSL PRNG with performance counter"},
{"lineNum":"  172","line":"        RandAddSeed();","class":"lineCov","hits":"1","order":"94","possible_hits":"1",},
{"lineNum":"  173","line":"    }","class":"linePartCov","hits":"1","order":"108","possible_hits":"2",},
{"lineNum":"  174","line":"    ~CInit()"},
{"lineNum":"  175","line":"    {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  176","line":"        // Securely erase the memory used by the PRNG"},
{"lineNum":"  177","line":"        RAND_cleanup();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"        // Shutdown OpenSSL library multithreading support"},
{"lineNum":"  179","line":"        CRYPTO_set_locking_callback(NULL);"},
{"lineNum":"  180","line":"        for (int i = 0; i < CRYPTO_num_locks(); i++)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  181","line":"            delete ppmutexOpenSSL[i];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"        OPENSSL_free(ppmutexOpenSSL);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  183","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"}"},
{"lineNum":"  185","line":"instance_of_cinit;","class":"lineCov","hits":"2","order":"88","possible_hits":"2",},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"/**"},
{"lineNum":"  188","line":" * LogPrintf() has been broken a couple of times now"},
{"lineNum":"  189","line":" * by well-meaning people adding mutexes in the most straightforward way."},
{"lineNum":"  190","line":" * It breaks because it may be called by global destructors during shutdown."},
{"lineNum":"  191","line":" * Since the order of destruction of static/global objects is undefined,"},
{"lineNum":"  192","line":" * defining a mutex as a global object doesn\'t work (the mutex gets"},
{"lineNum":"  193","line":" * destroyed, and then some later destructor calls OutputDebugStringF,"},
{"lineNum":"  194","line":" * maybe indirectly, and you get a core dump at shutdown trying to lock"},
{"lineNum":"  195","line":" * the mutex)."},
{"lineNum":"  196","line":" */"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"static boost::once_flag debugPrintInitFlag = BOOST_ONCE_INIT;"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"/**"},
{"lineNum":"  201","line":" * We use boost::call_once() to make sure mutexDebugLog and"},
{"lineNum":"  202","line":" * vMsgsBeforeOpenLog are initialized in a thread-safe manner."},
{"lineNum":"  203","line":" *"},
{"lineNum":"  204","line":" * NOTE: fileout, mutexDebugLog and sometimes vMsgsBeforeOpenLog"},
{"lineNum":"  205","line":" * are leaked on exit. This is ugly, but will be cleaned up by"},
{"lineNum":"  206","line":" * the OS/libc. When the shutdown sequence is fully audited and"},
{"lineNum":"  207","line":" * tested, explicit destruction of these objects can be implemented."},
{"lineNum":"  208","line":" */"},
{"lineNum":"  209","line":"static FILE* fileout = NULL;"},
{"lineNum":"  210","line":"static boost::mutex* mutexDebugLog = NULL;"},
{"lineNum":"  211","line":"static std::list<std::string> *vMsgsBeforeOpenLog;"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"static int FileWriteStr(const std::string &str, FILE *fp)"},
{"lineNum":"  214","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  215","line":"    return fwrite(str.data(), 1, str.size(), fp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":"}"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"static void DebugPrintInit()"},
{"lineNum":"  219","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  220","line":"    assert(mutexDebugLog == NULL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  221","line":"    mutexDebugLog = new boost::mutex();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  222","line":"    vMsgsBeforeOpenLog = new std::list<std::string>;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  223","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"void OpenDebugLog()"},
{"lineNum":"  226","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  227","line":"    boost::call_once(&DebugPrintInit, debugPrintInitFlag);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  228","line":"    boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    assert(fileout == NULL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":"    assert(vMsgsBeforeOpenLog);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"    boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  233","line":"    fileout = fopen(pathDebug.string().c_str(), \"a\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":"    if (fileout) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"        setbuf(fileout, NULL); // unbuffered","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"        // dump buffered messages from before we opened the log"},
{"lineNum":"  237","line":"        while (!vMsgsBeforeOpenLog->empty()) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  238","line":"            FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"            vMsgsBeforeOpenLog->pop_front();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":"        }"},
{"lineNum":"  241","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"    delete vMsgsBeforeOpenLog;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":"    vMsgsBeforeOpenLog = NULL;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  245","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"bool LogAcceptCategory(const char* category)"},
{"lineNum":"  248","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  249","line":"    if (category != NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  250","line":"    {"},
{"lineNum":"  251","line":"        if (!fDebug)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"        // Give each thread quick access to -debug settings."},
{"lineNum":"  255","line":"        // This helps prevent issues debugging global destructors,"},
{"lineNum":"  256","line":"        // where mapMultiArgs might be deleted before another"},
{"lineNum":"  257","line":"        // global destructor calls LogPrint()"},
{"lineNum":"  258","line":"        static boost::thread_specific_ptr<std::set<std::string> > ptrCategory;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  259","line":"        if (ptrCategory.get() == NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"        {"},
{"lineNum":"  261","line":"            if (mapMultiArgs.count(\"-debug\")) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  262","line":"                const std::vector<std::string>& categories = mapMultiArgs.at(\"-debug\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  263","line":"                ptrCategory.reset(new std::set<std::string>(categories.begin(), categories.end()));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  264","line":"                // thread_specific_ptr automatically deletes the set when the thread ends."},
{"lineNum":"  265","line":"            } else","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"                ptrCategory.reset(new std::set<std::string>());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"        const std::set<std::string>& setCategories = *ptrCategory.get();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"        // if not debugging everything and not debugging specific category, LogPrint does nothing."},
{"lineNum":"  271","line":"        if (setCategories.count(std::string(\"\")) == 0 &&","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  272","line":"            setCategories.count(std::string(\"1\")) == 0 &&","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"            setCategories.count(std::string(category)) == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  275","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":"    return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  277","line":"}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"/**"},
{"lineNum":"  280","line":" * fStartedNewLine is a state variable held by the calling context that will"},
{"lineNum":"  281","line":" * suppress printing of the timestamp when multiple calls are made that don\'t"},
{"lineNum":"  282","line":" * end in a newline. Initialize it to true, and hold it, in the calling context."},
{"lineNum":"  283","line":" */"},
{"lineNum":"  284","line":"static std::string LogTimestampStr(const std::string &str, std::atomic_bool *fStartedNewLine)"},
{"lineNum":"  285","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  286","line":"    std::string strStamped;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"    if (!fLogTimestamps)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":"        return str;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    if (*fStartedNewLine) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"        int64_t nTimeMicros = GetLogTimeMicros();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  293","line":"        strStamped = DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", nTimeMicros/1000000);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  294","line":"        if (fLogTimeMicros)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":"            strStamped += strprintf(\".%06d\", nTimeMicros%1000000);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  296","line":"        strStamped += \' \' + str;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  297","line":"    } else","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"        strStamped = str;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    if (!str.empty() && str[str.size()-1] == \'\\n\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  301","line":"        *fStartedNewLine = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"    else"},
{"lineNum":"  303","line":"        *fStartedNewLine = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    return strStamped;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  306","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"int LogPrintStr(const std::string &str)"},
{"lineNum":"  309","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  310","line":"    //A temporary fix for https://github.com/firoorg/firo/issues/1011"},
{"lineNum":"  311","line":"    if (fNoDebug && str.compare(0, 6, \"ERROR:\", 0, 6) != 0)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  312","line":"        return 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"    int ret = 0; // Returns total number of characters written","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"    static std::atomic_bool fStartedNewLine(true);"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"    std::string strTimestamped = LogTimestampStr(str, &fStartedNewLine);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"    if (fPrintToConsole)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":"    {"},
{"lineNum":"  321","line":"        // print to console"},
{"lineNum":"  322","line":"        ret = fwrite(strTimestamped.data(), 1, strTimestamped.size(), stdout);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  323","line":"        fflush(stdout);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"    else if (fPrintToDebugLog)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"    {"},
{"lineNum":"  327","line":"        boost::call_once(&DebugPrintInit, debugPrintInitFlag);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":"        boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"        // buffer if we haven\'t opened the log yet"},
{"lineNum":"  331","line":"        if (fileout == NULL) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  332","line":"            assert(vMsgsBeforeOpenLog);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  333","line":"            ret = strTimestamped.length();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  334","line":"            vMsgsBeforeOpenLog->push_back(strTimestamped);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  336","line":"        else"},
{"lineNum":"  337","line":"        {"},
{"lineNum":"  338","line":"            // reopen the log file, if requested"},
{"lineNum":"  339","line":"            if (fReopenDebugLog) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  340","line":"                fReopenDebugLog = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  341","line":"                boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  342","line":"                if (freopen(pathDebug.string().c_str(),\"a\",fileout) != NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  343","line":"                    setbuf(fileout, NULL); // unbuffered","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  344","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"            ret = FileWriteStr(strTimestamped, fileout);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  347","line":"        }"},
{"lineNum":"  348","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  349","line":"    return ret;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  350","line":"}","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"/** Interpret string as boolean, for argument parsing */"},
{"lineNum":"  353","line":"static bool InterpretBool(const std::string& strValue)"},
{"lineNum":"  354","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  355","line":"    if (strValue.empty())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  356","line":"        return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":"    return (atoi(strValue) != 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  358","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"/** Turn -noX into -X=0 */"},
{"lineNum":"  361","line":"static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)"},
{"lineNum":"  362","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  363","line":"    if (strKey.length()>3 && strKey[0]==\'-\' && strKey[1]==\'n\' && strKey[2]==\'o\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":"    {"},
{"lineNum":"  365","line":"        strKey = \"-\" + strKey.substr(3);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  366","line":"        strValue = InterpretBool(strValue) ? \"0\" : \"1\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  367","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"void ParseParameters(int argc, const char* const argv[])"},
{"lineNum":"  371","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  372","line":"    LOCK(cs_args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  373","line":"    mapArgs.clear();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":"    _mapMultiArgs.clear();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    for (int i = 1; i < argc; i++)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  377","line":"    {"},
{"lineNum":"  378","line":"        std::string str(argv[i]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  379","line":"        std::string strValue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  380","line":"        size_t is_index = str.find(\'=\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  381","line":"        if (is_index != std::string::npos)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  382","line":"        {"},
{"lineNum":"  383","line":"            strValue = str.substr(is_index+1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  384","line":"            str = str.substr(0, is_index);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  385","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  386","line":"#ifdef WIN32"},
{"lineNum":"  387","line":"        boost::to_lower(str);"},
{"lineNum":"  388","line":"        if (boost::algorithm::starts_with(str, \"/\"))"},
{"lineNum":"  389","line":"            str = \"-\" + str.substr(1);"},
{"lineNum":"  390","line":"#endif"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"        if (str[0] != \'-\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":"            break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"        // Interpret --foo as -foo."},
{"lineNum":"  396","line":"        // If both --foo and -foo are set, the last takes effect."},
{"lineNum":"  397","line":"        if (str.length() > 1 && str[1] == \'-\')","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  398","line":"            str = str.substr(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  399","line":"        InterpretNegativeSetting(str, strValue);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"        mapArgs[str] = strValue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  402","line":"        _mapMultiArgs[str].push_back(strValue);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  404","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"bool IsArgSet(const std::string& strArg)"},
{"lineNum":"  407","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  408","line":"    LOCK(cs_args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  409","line":"    return mapArgs.count(strArg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  410","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"std::string GetArg(const std::string& strArg, const std::string& strDefault)"},
{"lineNum":"  413","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  414","line":"    LOCK(cs_args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  415","line":"    if (mapArgs.count(strArg))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  416","line":"        return mapArgs[strArg];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":"    return strDefault;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  418","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"int64_t GetArg(const std::string& strArg, int64_t nDefault)"},
{"lineNum":"  421","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  422","line":"    LOCK(cs_args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":"    if (mapArgs.count(strArg))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  424","line":"        return atoi64(mapArgs[strArg]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  425","line":"    return nDefault;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  426","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"bool GetBoolArg(const std::string& strArg, bool fDefault)"},
{"lineNum":"  429","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  430","line":"    LOCK(cs_args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  431","line":"    if (mapArgs.count(strArg))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  432","line":"        return InterpretBool(mapArgs[strArg]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  433","line":"    return fDefault;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  434","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"boost::optional<bool> GetOptBoolArg(const std::string& strArg)"},
{"lineNum":"  437","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  438","line":"    auto const iter = mapArgs.find(strArg);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":"    if(iter != mapArgs.end()){","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  440","line":"        if(iter->second.empty())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  441","line":"            return boost::optional<bool>(true);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":"        return boost::optional<bool>(InterpretBool(iter->second));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  443","line":"    }"},
{"lineNum":"  444","line":"    return boost::optional<bool>();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  445","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"bool SoftSetArg(const std::string& strArg, const std::string& strValue)"},
{"lineNum":"  448","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  449","line":"    LOCK(cs_args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  450","line":"    if (mapArgs.count(strArg))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  451","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  452","line":"    mapArgs[strArg] = strValue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  453","line":"    return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  454","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"bool SoftSetBoolArg(const std::string& strArg, bool fValue)"},
{"lineNum":"  457","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  458","line":"    if (fValue)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  459","line":"        return SoftSetArg(strArg, std::string(\"1\"));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  460","line":"    else"},
{"lineNum":"  461","line":"        return SoftSetArg(strArg, std::string(\"0\"));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  462","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"void ForceSetArg(const std::string& strArg, const std::string& strValue)"},
{"lineNum":"  465","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  466","line":"    LOCK(cs_args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  467","line":"    mapArgs[strArg] = strValue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  468","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"static const int screenWidth = 79;"},
{"lineNum":"  473","line":"static const int optIndent = 2;"},
{"lineNum":"  474","line":"static const int msgIndent = 7;"},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"std::string HelpMessageGroup(const std::string &message) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  477","line":"    return std::string(message) + std::string(\"\\n\\n\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  478","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"std::string HelpMessageOpt(const std::string &option, const std::string &message) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  481","line":"    return std::string(optIndent,\' \') + std::string(option) +","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  482","line":"           std::string(\"\\n\") + std::string(msgIndent,\' \') +","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  483","line":"           FormatParagraph(message, screenWidth - msgIndent, msgIndent) +","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  484","line":"           std::string(\"\\n\\n\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  485","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"#ifdef ENABLE_CRASH_HOOKS"},
{"lineNum":"  488","line":"static std::string FormatException(const std::exception_ptr pex, const char* pszThread)"},
{"lineNum":"  489","line":"{"},
{"lineNum":"  490","line":"    return strprintf(\"EXCEPTION: %s\", GetPrettyExceptionStr(pex));"},
{"lineNum":"  491","line":"}"},
{"lineNum":"  492","line":"#endif"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"void PrintExceptionContinue(const std::exception_ptr pex, const char* pszThread)"},
{"lineNum":"  495","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  496","line":"#ifdef ENABLE_CRASH_HOOKS"},
{"lineNum":"  497","line":"    std::string message = FormatException(pex, pszThread);"},
{"lineNum":"  498","line":"    LogPrintf(\"\\n\\n************************\\n%s\\n\", message);"},
{"lineNum":"  499","line":"    fprintf(stderr, \"\\n\\n************************\\n%s\\n\", message.c_str());"},
{"lineNum":"  500","line":"#endif"},
{"lineNum":"  501","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"boost::filesystem::path GetDefaultDataDirForCoinName(const std::string &coinName)"},
{"lineNum":"  504","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  505","line":"    namespace fs = boost::filesystem;"},
{"lineNum":"  506","line":"    // Windows < Vista: C:\\Documents and Settings\\Username\\Application Data\\firo"},
{"lineNum":"  507","line":"    // Windows >= Vista: C:\\Users\\Username\\AppData\\Roaming\\firo"},
{"lineNum":"  508","line":"    // Mac: ~/Library/Application Support/firo"},
{"lineNum":"  509","line":"    // Unix: ~/.firo"},
{"lineNum":"  510","line":"#ifdef WIN32"},
{"lineNum":"  511","line":"    // Windows"},
{"lineNum":"  512","line":"    return GetSpecialFolderPath(CSIDL_APPDATA) / coinName;"},
{"lineNum":"  513","line":"#else"},
{"lineNum":"  514","line":"    fs::path pathRet;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  515","line":"    char* pszHome = getenv(\"HOME\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  516","line":"    if (pszHome == NULL || strlen(pszHome) == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  517","line":"        pathRet = fs::path(\"/\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  518","line":"    else"},
{"lineNum":"  519","line":"        pathRet = fs::path(pszHome);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  520","line":"#ifdef MAC_OSX"},
{"lineNum":"  521","line":"    // Mac"},
{"lineNum":"  522","line":"    return pathRet / \"Library/Application Support\" / coinName;"},
{"lineNum":"  523","line":"#else"},
{"lineNum":"  524","line":"    // Unix"},
{"lineNum":"  525","line":"    return pathRet / (\".\" + coinName);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  526","line":"#endif"},
{"lineNum":"  527","line":"#endif"},
{"lineNum":"  528","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  529","line":""},
{"lineNum":"  530","line":"boost::filesystem::path GetDefaultDataDir()"},
{"lineNum":"  531","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  532","line":"    namespace fs = boost::filesystem;"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"    fs::path firoDefaultDir = GetDefaultDataDirForCoinName(\"firo\");","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  535","line":"    if (!fs::is_directory(firoDefaultDir)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  536","line":"        // try \"zcoin\" in case we\'re upgrading from pre-firo version"},
{"lineNum":"  537","line":"        fs::path zcoinDefaultDir = GetDefaultDataDirForCoinName(\"zcoin\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  538","line":"        if (fs::is_directory(zcoinDefaultDir))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  539","line":"            return zcoinDefaultDir;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  540","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"    return firoDefaultDir;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  543","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"static boost::filesystem::path pathCached;","class":"lineCov","hits":"2","order":"109","possible_hits":"2",},
{"lineNum":"  546","line":"static boost::filesystem::path pathCachedNetSpecific;","class":"lineCov","hits":"2","order":"110","possible_hits":"2",},
{"lineNum":"  547","line":"static CCriticalSection csPathCached;","class":"lineCov","hits":"2","order":"111","possible_hits":"2",},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"static boost::filesystem::path backupsDirCached;","class":"lineCov","hits":"2","order":"112","possible_hits":"2",},
{"lineNum":"  550","line":"static CCriticalSection csBackupsDirCached;","class":"lineCov","hits":"2","order":"113","possible_hits":"2",},
{"lineNum":"  551","line":""},
{"lineNum":"  552","line":"const boost::filesystem::path &GetBackupsDir()"},
{"lineNum":"  553","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  554","line":"    namespace fs = boost::filesystem;"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"    LOCK(csBackupsDirCached);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"    fs::path &backupsDir = backupsDirCached;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"    if (!backupsDir.empty())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  561","line":"        return backupsDir;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"    if (mapArgs.count(\"-walletbackupsdir\")) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  564","line":"        backupsDir = fs::absolute(mapArgs[\"-walletbackupsdir\"]);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  565","line":"        // Path must exist"},
{"lineNum":"  566","line":"        if (fs::is_directory(backupsDir)) return backupsDir;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  567","line":"        // Fallback to default path if it doesn\'t"},
{"lineNum":"  568","line":"        LogPrintf(\"%s: Warning: incorrect parameter -walletbackupsdir, path must exist! Using default path.\\n\", __func__);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  569","line":"        //SetMiscWarning(_(\"Warning: incorrect parameter -walletbackupsdir, path must exist! Using default path.\"));"},
{"lineNum":"  570","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  571","line":"    // Default path"},
{"lineNum":"  572","line":"    backupsDir = GetDataDir() / \"backups\";","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"    return backupsDir;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  575","line":"}","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"const boost::filesystem::path &GetDataDir(bool fNetSpecific)"},
{"lineNum":"  578","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  579","line":"    namespace fs = boost::filesystem;"},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    LOCK(csPathCached);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"    fs::path &path = fNetSpecific ? pathCachedNetSpecific : pathCached;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":"    // This can be called during exceptions by LogPrintf(), so we cache the"},
{"lineNum":"  586","line":"    // value so we don\'t have to do memory allocations after that."},
{"lineNum":"  587","line":"    if (!path.empty())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  588","line":"        return path;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"    if (IsArgSet(\"-datadir\")) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  591","line":"        path = fs::system_complete(GetArg(\"-datadir\", \"\"));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  592","line":"        if (!fs::is_directory(path)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"            path = \"\";","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  594","line":"            return path;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  595","line":"        }"},
{"lineNum":"  596","line":"    } else {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  597","line":"        path = GetDefaultDataDir();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  598","line":"    }"},
{"lineNum":"  599","line":"    if (fNetSpecific)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  600","line":"        path /= BaseParams().DataDir();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"    fs::create_directories(path);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  603","line":""},
{"lineNum":"  604","line":"    return path;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  605","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"void ClearDatadirCache()"},
{"lineNum":"  608","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  609","line":"    LOCK(csPathCached);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"    pathCached = boost::filesystem::path();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  612","line":"    pathCachedNetSpecific = boost::filesystem::path();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  613","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"boost::filesystem::path GetConfigFile(const std::string& confPath)"},
{"lineNum":"  616","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  617","line":"    boost::filesystem::path pathConfigFile(confPath);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  618","line":"    if (!pathConfigFile.is_complete()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  619","line":"        boost::filesystem::path dataDir = GetDataDir(false);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"        // upgrade heuristics: if dataDir ends with either \"zcoin\" or \".zcoin\" and confPath is set"},
{"lineNum":"  622","line":"        // to default value we use \"zcoin.conf\" as config file name"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"        if (confPath == BITCOIN_CONF_FILENAME && (dataDir.filename() == \"zcoin\" || dataDir.filename() == \".zcoin\"))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  625","line":"            pathConfigFile = dataDir / \"zcoin.conf\";","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  626","line":"        else"},
{"lineNum":"  627","line":"            pathConfigFile = dataDir / pathConfigFile;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  628","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"    return pathConfigFile;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  631","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"void ReadConfigFile(const std::string& confPath)"},
{"lineNum":"  634","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  635","line":"    boost::filesystem::ifstream streamConfig(GetConfigFile(confPath));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  636","line":"    if (!streamConfig.good())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  637","line":"        return; // No firo.conf file is OK","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"    {"},
{"lineNum":"  640","line":"        LOCK(cs_args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  641","line":"        std::set<std::string> setOptions;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  642","line":"        setOptions.insert(\"*\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"        for (boost::program_options::detail::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  645","line":"        {"},
{"lineNum":"  646","line":"            // Don\'t overwrite existing settings so command line settings override bitcoin.conf"},
{"lineNum":"  647","line":"            std::string strKey = std::string(\"-\") + it->string_key;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  648","line":"            std::string strValue = it->value[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  649","line":"            InterpretNegativeSetting(strKey, strValue);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  650","line":"            if (mapArgs.count(strKey) == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  651","line":"                mapArgs[strKey] = strValue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  652","line":"            _mapMultiArgs[strKey].push_back(strValue);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  653","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  654","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  655","line":"    // If datadir is changed in .conf file:"},
{"lineNum":"  656","line":"    ClearDatadirCache();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  657","line":"}","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"bool RenameDirectoriesFromZcoinToFiro()"},
{"lineNum":"  660","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  661","line":"    namespace fs = boost::filesystem;"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"    fs::path zcoinPath = GetDefaultDataDirForCoinName(\"zcoin\");","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  664","line":"    fs::path firoPath = GetDefaultDataDirForCoinName(\"firo\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"    // rename is possible only if zcoin directory exists and firo doesn\'t"},
{"lineNum":"  667","line":"    if (fs::exists(firoPath) || !fs::is_directory(zcoinPath))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  668","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  669","line":""},
{"lineNum":"  670","line":"    fs::path zcoinConfFileName = zcoinPath / \"zcoin.conf\";","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  671","line":"    fs::path firoConfFileName = zcoinPath / \"firo.conf\";","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  672","line":"    if (fs::exists(firoConfFileName))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  673","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"    try {"},
{"lineNum":"  676","line":"        if (fs::is_regular_file(zcoinConfFileName))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  677","line":"            fs::rename(zcoinConfFileName, firoConfFileName);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  678","line":""},
{"lineNum":"  679","line":"        try {"},
{"lineNum":"  680","line":"            fs::rename(zcoinPath, firoPath);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  681","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  682","line":"        catch (const fs::filesystem_error &) {"},
{"lineNum":"  683","line":"            // rename config file back"},
{"lineNum":"  684","line":"            fs::rename(firoConfFileName, zcoinConfFileName);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  685","line":"            throw;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  686","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  687","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  688","line":"    catch (const fs::filesystem_error &) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  689","line":"        return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  690","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  691","line":""},
{"lineNum":"  692","line":"    ClearDatadirCache();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  693","line":"    return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  694","line":"}","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  695","line":""},
{"lineNum":"  696","line":"#ifndef WIN32"},
{"lineNum":"  697","line":"boost::filesystem::path GetPidFile()"},
{"lineNum":"  698","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  699","line":"    boost::filesystem::path pathPidFile(GetArg(\"-pid\", BITCOIN_PID_FILENAME));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  700","line":"    if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  701","line":"    return pathPidFile;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  702","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"void CreatePidFile(const boost::filesystem::path &path, pid_t pid)"},
{"lineNum":"  705","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  706","line":"    FILE* file = fopen(path.string().c_str(), \"w\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  707","line":"    if (file)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  708","line":"    {"},
{"lineNum":"  709","line":"        fprintf(file, \"%d\\n\", pid);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  710","line":"        fclose(file);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  711","line":"    }"},
{"lineNum":"  712","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  713","line":"#endif"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)"},
{"lineNum":"  716","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  717","line":"#ifdef WIN32"},
{"lineNum":"  718","line":"    return MoveFileExA(src.string().c_str(), dest.string().c_str(),"},
{"lineNum":"  719","line":"                       MOVEFILE_REPLACE_EXISTING) != 0;"},
{"lineNum":"  720","line":"#else"},
{"lineNum":"  721","line":"    int rc = std::rename(src.string().c_str(), dest.string().c_str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  722","line":"    return (rc == 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  723","line":"#endif /* WIN32 */"},
{"lineNum":"  724","line":"}"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"/**"},
{"lineNum":"  727","line":" * Ignores exceptions thrown by Boost\'s create_directory if the requested directory exists."},
{"lineNum":"  728","line":" * Specifically handles case where path p exists, but it wasn\'t possible for the user to"},
{"lineNum":"  729","line":" * write to the parent directory."},
{"lineNum":"  730","line":" */"},
{"lineNum":"  731","line":"bool TryCreateDirectory(const boost::filesystem::path& p)"},
{"lineNum":"  732","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  733","line":"    try"},
{"lineNum":"  734","line":"    {"},
{"lineNum":"  735","line":"        return boost::filesystem::create_directory(p);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  736","line":"    } catch (const boost::filesystem::filesystem_error&) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  737","line":"        if (!boost::filesystem::exists(p) || !boost::filesystem::is_directory(p))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  738","line":"            throw;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  739","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"    // create_directory didn\'t create the directory, it had to have existed already"},
{"lineNum":"  742","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  743","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"void FileCommit(FILE *file)"},
{"lineNum":"  746","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  747","line":"    fflush(file); // harmless if redundantly called","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  748","line":"#ifdef WIN32"},
{"lineNum":"  749","line":"    HANDLE hFile = (HANDLE)_get_osfhandle(_fileno(file));"},
{"lineNum":"  750","line":"    FlushFileBuffers(hFile);"},
{"lineNum":"  751","line":"#else"},
{"lineNum":"  752","line":"    #if defined(__linux__) || defined(__NetBSD__)"},
{"lineNum":"  753","line":"    fdatasync(fileno(file));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  754","line":"    #elif defined(__APPLE__) && defined(F_FULLFSYNC)"},
{"lineNum":"  755","line":"    fcntl(fileno(file), F_FULLFSYNC, 0);"},
{"lineNum":"  756","line":"    #else"},
{"lineNum":"  757","line":"    fsync(fileno(file));"},
{"lineNum":"  758","line":"    #endif"},
{"lineNum":"  759","line":"#endif"},
{"lineNum":"  760","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  761","line":""},
{"lineNum":"  762","line":"bool TruncateFile(FILE *file, unsigned int length) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  763","line":"#if defined(WIN32)"},
{"lineNum":"  764","line":"    return _chsize(_fileno(file), length) == 0;"},
{"lineNum":"  765","line":"#else"},
{"lineNum":"  766","line":"    return ftruncate(fileno(file), length) == 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  767","line":"#endif"},
{"lineNum":"  768","line":"}"},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"/**"},
{"lineNum":"  771","line":" * this function tries to raise the file descriptor limit to the requested number."},
{"lineNum":"  772","line":" * It returns the actual file descriptor limit (which may be more or less than nMinFD)"},
{"lineNum":"  773","line":" */"},
{"lineNum":"  774","line":"int RaiseFileDescriptorLimit(int nMinFD) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  775","line":"#if defined(WIN32)"},
{"lineNum":"  776","line":"    return 2048;"},
{"lineNum":"  777","line":"#else"},
{"lineNum":"  778","line":"    struct rlimit limitFD;"},
{"lineNum":"  779","line":"    if (getrlimit(RLIMIT_NOFILE, &limitFD) != -1) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  780","line":"        if (limitFD.rlim_cur < (rlim_t)nMinFD) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  781","line":"            limitFD.rlim_cur = nMinFD;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  782","line":"            if (limitFD.rlim_cur > limitFD.rlim_max)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  783","line":"                limitFD.rlim_cur = limitFD.rlim_max;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  784","line":"            setrlimit(RLIMIT_NOFILE, &limitFD);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  785","line":"            getrlimit(RLIMIT_NOFILE, &limitFD);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  786","line":"        }"},
{"lineNum":"  787","line":"        return limitFD.rlim_cur;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  788","line":"    }"},
{"lineNum":"  789","line":"    return nMinFD; // getrlimit failed, assume it\'s fine","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  790","line":"#endif"},
{"lineNum":"  791","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"/**"},
{"lineNum":"  794","line":" * this function tries to make a particular range of a file allocated (corresponding to disk space)"},
{"lineNum":"  795","line":" * it is advisory, and the range specified in the arguments will never contain live data"},
{"lineNum":"  796","line":" */"},
{"lineNum":"  797","line":"void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  798","line":"#if defined(WIN32)"},
{"lineNum":"  799","line":"    // Windows-specific version"},
{"lineNum":"  800","line":"    HANDLE hFile = (HANDLE)_get_osfhandle(_fileno(file));"},
{"lineNum":"  801","line":"    LARGE_INTEGER nFileSize;"},
{"lineNum":"  802","line":"    int64_t nEndPos = (int64_t)offset + length;"},
{"lineNum":"  803","line":"    nFileSize.u.LowPart = nEndPos & 0xFFFFFFFF;"},
{"lineNum":"  804","line":"    nFileSize.u.HighPart = nEndPos >> 32;"},
{"lineNum":"  805","line":"    SetFilePointerEx(hFile, nFileSize, 0, FILE_BEGIN);"},
{"lineNum":"  806","line":"    SetEndOfFile(hFile);"},
{"lineNum":"  807","line":"#elif defined(MAC_OSX)"},
{"lineNum":"  808","line":"    // OSX specific version"},
{"lineNum":"  809","line":"    fstore_t fst;"},
{"lineNum":"  810","line":"    fst.fst_flags = F_ALLOCATECONTIG;"},
{"lineNum":"  811","line":"    fst.fst_posmode = F_PEOFPOSMODE;"},
{"lineNum":"  812","line":"    fst.fst_offset = 0;"},
{"lineNum":"  813","line":"    fst.fst_length = (off_t)offset + length;"},
{"lineNum":"  814","line":"    fst.fst_bytesalloc = 0;"},
{"lineNum":"  815","line":"    if (fcntl(fileno(file), F_PREALLOCATE, &fst) == -1) {"},
{"lineNum":"  816","line":"        fst.fst_flags = F_ALLOCATEALL;"},
{"lineNum":"  817","line":"        fcntl(fileno(file), F_PREALLOCATE, &fst);"},
{"lineNum":"  818","line":"    }"},
{"lineNum":"  819","line":"    ftruncate(fileno(file), fst.fst_length);"},
{"lineNum":"  820","line":"#elif defined(__linux__)"},
{"lineNum":"  821","line":"    // Version using posix_fallocate"},
{"lineNum":"  822","line":"    off_t nEndPos = (off_t)offset + length;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  823","line":"    posix_fallocate(fileno(file), 0, nEndPos);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  824","line":"#else"},
{"lineNum":"  825","line":"    // Fallback version"},
{"lineNum":"  826","line":"    // TODO: just write one byte per block"},
{"lineNum":"  827","line":"    static const char buf[65536] = {};"},
{"lineNum":"  828","line":"    fseek(file, offset, SEEK_SET);"},
{"lineNum":"  829","line":"    while (length > 0) {"},
{"lineNum":"  830","line":"        unsigned int now = 65536;"},
{"lineNum":"  831","line":"        if (length < now)"},
{"lineNum":"  832","line":"            now = length;"},
{"lineNum":"  833","line":"        fwrite(buf, 1, now, file); // allowed to fail; this function is advisory anyway"},
{"lineNum":"  834","line":"        length -= now;"},
{"lineNum":"  835","line":"    }"},
{"lineNum":"  836","line":"#endif"},
{"lineNum":"  837","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"void ShrinkDebugFile()"},
{"lineNum":"  840","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  841","line":"    // Amount of debug.log to save at end when shrinking (must fit in memory)"},
{"lineNum":"  842","line":"    constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  843","line":"    // Scroll debug.log if it\'s getting too big"},
{"lineNum":"  844","line":"    boost::filesystem::path pathLog = GetDataDir() / \"debug.log\";","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  845","line":"    FILE* file = fopen(pathLog.string().c_str(), \"r\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  846","line":"    // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE"},
{"lineNum":"  847","line":"    // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes"},
{"lineNum":"  848","line":"    if (file && boost::filesystem::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  849","line":"    {"},
{"lineNum":"  850","line":"        // Restart the file with some of the end"},
{"lineNum":"  851","line":"        std::vector<char> vch(RECENT_DEBUG_HISTORY_SIZE, 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  852","line":"        fseek(file, -((long)vch.size()), SEEK_END);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  853","line":"        int nBytes = fread(vch.data(), 1, vch.size(), file);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  854","line":"        fclose(file);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"        file = fopen(pathLog.string().c_str(), \"w\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  857","line":"        if (file)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  858","line":"        {"},
{"lineNum":"  859","line":"            fwrite(vch.data(), 1, nBytes, file);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  860","line":"            fclose(file);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  861","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  862","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  863","line":"    else if (file != NULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  864","line":"        fclose(file);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  865","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  866","line":""},
{"lineNum":"  867","line":"#ifdef WIN32"},
{"lineNum":"  868","line":"boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)"},
{"lineNum":"  869","line":"{"},
{"lineNum":"  870","line":"    namespace fs = boost::filesystem;"},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"    char pszPath[MAX_PATH] = \"\";"},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"    if(SHGetSpecialFolderPathA(NULL, pszPath, nFolder, fCreate))"},
{"lineNum":"  875","line":"    {"},
{"lineNum":"  876","line":"        return fs::path(pszPath);"},
{"lineNum":"  877","line":"    }"},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"    LogPrintf(\"SHGetSpecialFolderPathA() failed, could not obtain requested path.\\n\");"},
{"lineNum":"  880","line":"    return fs::path(\"\");"},
{"lineNum":"  881","line":"}"},
{"lineNum":"  882","line":"#endif"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"void runCommand(const std::string& strCommand)"},
{"lineNum":"  885","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  886","line":"    int nErr = ::system(strCommand.c_str());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  887","line":"    if (nErr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  888","line":"        LogPrintf(\"runCommand error: system(%s) returned %d\\n\", strCommand, nErr);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  889","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"void RenameThread(const char* name)"},
{"lineNum":"  892","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  893","line":"#if defined(PR_SET_NAME)"},
{"lineNum":"  894","line":"    // Only the first 15 characters are used (16 - NUL terminator)"},
{"lineNum":"  895","line":"    ::prctl(PR_SET_NAME, name, 0, 0, 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  896","line":"#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))"},
{"lineNum":"  897","line":"    pthread_set_name_np(pthread_self(), name);"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"#elif defined(MAC_OSX)"},
{"lineNum":"  900","line":"    pthread_setname_np(name);"},
{"lineNum":"  901","line":"#else"},
{"lineNum":"  902","line":"    // Prevent warnings for unused parameters..."},
{"lineNum":"  903","line":"    (void)name;"},
{"lineNum":"  904","line":"#endif"},
{"lineNum":"  905","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"std::string GetThreadName()"},
{"lineNum":"  908","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  909","line":"    char name[16];"},
{"lineNum":"  910","line":"#if defined(PR_GET_NAME)"},
{"lineNum":"  911","line":"    // Only the first 15 characters are used (16 - NUL terminator)"},
{"lineNum":"  912","line":"    ::prctl(PR_GET_NAME, name, 0, 0, 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  913","line":"#elif defined(MAC_OSX)"},
{"lineNum":"  914","line":"    pthread_getname_np(pthread_self(), name, 16);"},
{"lineNum":"  915","line":"// #elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))"},
{"lineNum":"  916","line":"// #else"},
{"lineNum":"  917","line":"    // no get_name here"},
{"lineNum":"  918","line":"#endif"},
{"lineNum":"  919","line":"    return std::string(name);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  920","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"void RenameThreadPool(ctpl::thread_pool& tp, const char* baseName)"},
{"lineNum":"  923","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  924","line":"    auto cond = std::make_shared<std::condition_variable>();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  925","line":"    auto mutex = std::make_shared<std::mutex>();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  926","line":"    std::atomic<int> doneCnt(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  927","line":"    std::map<int, std::future<void> > futures;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  928","line":""},
{"lineNum":"  929","line":"    for (int i = 0; i < tp.size(); i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  930","line":"        futures[i] = tp.push([baseName, i, cond, mutex, &doneCnt](int threadId) {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  931","line":"            RenameThread(strprintf(\"%s-%d\", baseName, i).c_str());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  932","line":"            std::unique_lock<std::mutex> l(*mutex);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  933","line":"            doneCnt++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  934","line":"            cond->wait(l);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  935","line":"        });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  936","line":"    }"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"    do {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  939","line":"        // Always sleep to let all threads acquire locks"},
{"lineNum":"  940","line":"        MilliSleep(10);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  941","line":"        // `doneCnt` should be at least `futures.size()` if tp size was increased (for whatever reason),"},
{"lineNum":"  942","line":"        // or at least `tp.size()` if tp size was decreased and queue was cleared"},
{"lineNum":"  943","line":"        // (which can happen on `stop()` if we were not fast enough to get all jobs to their threads)."},
{"lineNum":"  944","line":"    } while (doneCnt < futures.size() && doneCnt < tp.size());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":"    cond->notify_all();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"    // Make sure no one is left behind, just in case"},
{"lineNum":"  949","line":"    for (auto& pair : futures) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  950","line":"        auto& f = pair.second;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  951","line":"        if (f.valid() && f.wait_for(std::chrono::milliseconds(2000)) == std::future_status::timeout) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  952","line":"            LogPrintf(\"%s: %s-%d timed out\\n\", __func__, baseName, pair.first);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  953","line":"            // Notify everyone again"},
{"lineNum":"  954","line":"            cond->notify_all();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  955","line":"            break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  956","line":"        }"},
{"lineNum":"  957","line":"    }"},
{"lineNum":"  958","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"void SetupEnvironment()"},
{"lineNum":"  961","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  962","line":"#ifdef HAVE_MALLOPT_ARENA_MAX"},
{"lineNum":"  963","line":"    // glibc-specific: On 32-bit systems set the number of arenas to 1."},
{"lineNum":"  964","line":"    // By default, since glibc 2.10, the C library will create up to two heap"},
{"lineNum":"  965","line":"    // arenas per core. This is known to cause excessive virtual address space"},
{"lineNum":"  966","line":"    // usage in our usage. Work around it by setting the maximum number of"},
{"lineNum":"  967","line":"    // arenas to 1."},
{"lineNum":"  968","line":"    if (sizeof(void*) == 4) {"},
{"lineNum":"  969","line":"        mallopt(M_ARENA_MAX, 1);"},
{"lineNum":"  970","line":"    }"},
{"lineNum":"  971","line":"#endif"},
{"lineNum":"  972","line":"    // On most POSIX systems (e.g. Linux, but not BSD) the environment\'s locale"},
{"lineNum":"  973","line":"    // may be invalid, in which case the \"C\" locale is used as fallback."},
{"lineNum":"  974","line":"#if !defined(WIN32) && !defined(MAC_OSX) && !defined(__FreeBSD__) && !defined(__OpenBSD__)"},
{"lineNum":"  975","line":"    try {"},
{"lineNum":"  976","line":"        std::locale(\"\"); // Raises a runtime error if current locale is invalid","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  977","line":"    } catch (const std::runtime_error&) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  978","line":"        setenv(\"LC_ALL\", \"C\", 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  979","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  980","line":"#endif"},
{"lineNum":"  981","line":"    // The path locale is lazy initialized and to avoid deinitialization errors"},
{"lineNum":"  982","line":"    // in multithreading environments, it is set explicitly by the main thread."},
{"lineNum":"  983","line":"    // A dummy locale is used to extract the internal default locale, used by"},
{"lineNum":"  984","line":"    // boost::filesystem::path, which is then used to explicitly imbue the path."},
{"lineNum":"  985","line":"    std::locale loc = boost::filesystem::path::imbue(std::locale::classic());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  986","line":"    boost::filesystem::path::imbue(loc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  987","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"bool SetupNetworking()"},
{"lineNum":"  990","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  991","line":"#ifdef WIN32"},
{"lineNum":"  992","line":"    // Initialize Windows Sockets"},
{"lineNum":"  993","line":"    WSADATA wsadata;"},
{"lineNum":"  994","line":"    int ret = WSAStartup(MAKEWORD(2,2), &wsadata);"},
{"lineNum":"  995","line":"    if (ret != NO_ERROR || LOBYTE(wsadata.wVersion ) != 2 || HIBYTE(wsadata.wVersion) != 2)"},
{"lineNum":"  996","line":"        return false;"},
{"lineNum":"  997","line":"#endif"},
{"lineNum":"  998","line":"    return true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  999","line":"}"},
{"lineNum":" 1000","line":""},
{"lineNum":" 1001","line":"void SetThreadPriority(int nPriority)"},
{"lineNum":" 1002","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1003","line":"#ifdef WIN32"},
{"lineNum":" 1004","line":"    SetThreadPriority(GetCurrentThread(), nPriority);"},
{"lineNum":" 1005","line":"#else // WIN32"},
{"lineNum":" 1006","line":"#ifdef PRIO_THREAD"},
{"lineNum":" 1007","line":"    setpriority(PRIO_THREAD, 0, nPriority);"},
{"lineNum":" 1008","line":"#else // PRIO_THREAD"},
{"lineNum":" 1009","line":"    setpriority(PRIO_PROCESS, 0, nPriority);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1010","line":"#endif // PRIO_THREAD"},
{"lineNum":" 1011","line":"#endif // WIN32"},
{"lineNum":" 1012","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"int GetNumCores()"},
{"lineNum":" 1015","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1016","line":"#if BOOST_VERSION >= 105600"},
{"lineNum":" 1017","line":"    return boost::thread::physical_concurrency();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1018","line":"#else // Must fall back to hardware_concurrency, which unfortunately counts virtual cores"},
{"lineNum":" 1019","line":"    return boost::thread::hardware_concurrency();"},
{"lineNum":" 1020","line":"#endif"},
{"lineNum":" 1021","line":"}"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"std::string CopyrightHolders(const std::string& strPrefix)"},
{"lineNum":" 1024","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1025","line":"    const auto copyright_devs = strprintf(_(COPYRIGHT_HOLDERS), _(COPYRIGHT_HOLDERS_SUBSTITUTION));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1026","line":"    std::string strCopyrightHolders = strPrefix + copyright_devs;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1027","line":""},
{"lineNum":" 1028","line":"    // Make sure Firo Core copyright is not removed by accident"},
{"lineNum":" 1029","line":"    if (copyright_devs.find(_(\"Firo Core\")) == std::string::npos) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1030","line":"        strCopyrightHolders += \'\\n\' + strPrefix + \"The Firo Core developers\";","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1031","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1032","line":"    // Make sure Bitcoin Core copyright is not removed by accident"},
{"lineNum":" 1033","line":"    if (copyright_devs.find(\"Bitcoin Core\") == std::string::npos) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1034","line":"        strCopyrightHolders += \'\\n\' + strPrefix + \"The Bitcoin Core developers\";","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1035","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1036","line":""},
{"lineNum":" 1037","line":"    return strCopyrightHolders;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1038","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "spend_transaction_debug", "date" : "2023-08-30 09:54:25", "instrumented" : 430, "covered" : 17,};
var merged_data = [];
