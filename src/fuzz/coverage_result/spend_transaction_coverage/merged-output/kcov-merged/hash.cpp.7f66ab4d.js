var data = {lines:[
{"lineNum":"    1","line":"#include \"hash.h\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"namespace spark {"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"using namespace secp_primitives;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"// Set up a labeled hash function"},
{"lineNum":"    8","line":"Hash::Hash(const std::string label) {","class":"lineCov","hits":"1","order":"941",},
{"lineNum":"    9","line":"\tthis->ctx = EVP_MD_CTX_new();","class":"lineCov","hits":"1","order":"944",},
{"lineNum":"   10","line":"\tEVP_DigestInit_ex(this->ctx, EVP_blake2b512(), NULL);","class":"lineCov","hits":"1","order":"946",},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"\t// Write the protocol and mode information"},
{"lineNum":"   13","line":"\tstd::vector<unsigned char> protocol(LABEL_PROTOCOL.begin(), LABEL_PROTOCOL.end());","class":"lineCov","hits":"1","order":"948",},
{"lineNum":"   14","line":"\tEVP_DigestUpdate(this->ctx, protocol.data(), protocol.size());","class":"lineCov","hits":"1","order":"950",},
{"lineNum":"   15","line":"\tEVP_DigestUpdate(this->ctx, &HASH_MODE_FUNCTION, sizeof(HASH_MODE_FUNCTION));","class":"lineCov","hits":"1","order":"955",},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"\t// Include the label with size"},
{"lineNum":"   18","line":"\tinclude_size(label.size());","class":"lineCov","hits":"1","order":"957",},
{"lineNum":"   19","line":"\tstd::vector<unsigned char> label_bytes(label.begin(), label.end());","class":"lineCov","hits":"1","order":"959",},
{"lineNum":"   20","line":"\tEVP_DigestUpdate(this->ctx, label_bytes.data(), label_bytes.size());","class":"lineCov","hits":"1","order":"961",},
{"lineNum":"   21","line":"}","class":"lineCov","hits":"1","order":"942",},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"// Clean up"},
{"lineNum":"   24","line":"Hash::~Hash() {","class":"lineCov","hits":"1","order":"935",},
{"lineNum":"   25","line":"\tEVP_MD_CTX_free(this->ctx);","class":"lineCov","hits":"1","order":"933",},
{"lineNum":"   26","line":"}","class":"lineCov","hits":"1","order":"953",},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"// Include serialized data in the hash function"},
{"lineNum":"   29","line":"void Hash::include(CDataStream& data) {","class":"lineCov","hits":"1","order":"938",},
{"lineNum":"   30","line":"\tinclude_size(data.size());","class":"lineCov","hits":"1","order":"937",},
{"lineNum":"   31","line":"\tEVP_DigestUpdate(this->ctx, reinterpret_cast<unsigned char *>(data.data()), data.size());","class":"lineCov","hits":"1","order":"931",},
{"lineNum":"   32","line":"}","class":"lineCov","hits":"1","order":"929",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"// Finalize the hash function to a scalar"},
{"lineNum":"   35","line":"Scalar Hash::finalize_scalar() {","class":"lineCov","hits":"1","order":"928",},
{"lineNum":"   36","line":"    // Ensure we can properly populate a scalar"},
{"lineNum":"   37","line":"    if (EVP_MD_size(EVP_blake2b512()) < SCALAR_ENCODING) {","class":"lineCov","hits":"1","order":"940",},
{"lineNum":"   38","line":"        throw std::runtime_error(\"Bad hash size!\");","class":"lineNoCov","hits":"0",},
{"lineNum":"   39","line":"    }"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    std::vector<unsigned char> hash;","class":"lineCov","hits":"1","order":"927",},
{"lineNum":"   42","line":"    hash.resize(EVP_MD_size(EVP_blake2b512()));","class":"lineCov","hits":"1","order":"947",},
{"lineNum":"   43","line":"    unsigned char counter = 0;","class":"lineCov","hits":"1","order":"949",},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    EVP_MD_CTX* state_counter;"},
{"lineNum":"   46","line":"    state_counter = EVP_MD_CTX_new();","class":"lineCov","hits":"1","order":"962",},
{"lineNum":"   47","line":"    EVP_DigestInit_ex(state_counter, EVP_blake2b512(), NULL);","class":"lineCov","hits":"1","order":"963",},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    EVP_MD_CTX* state_finalize;","class":"lineCov","hits":"1","order":"964",},
{"lineNum":"   50","line":"    state_finalize = EVP_MD_CTX_new();","class":"lineCov","hits":"1","order":"965",},
{"lineNum":"   51","line":"    EVP_DigestInit_ex(state_finalize, EVP_blake2b512(), NULL);","class":"lineCov","hits":"1","order":"966",},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"    while (1) {","class":"lineCov","hits":"1","order":"967",},
{"lineNum":"   54","line":"        // Prepare temporary state for counter testing"},
{"lineNum":"   55","line":"        EVP_MD_CTX_copy_ex(state_counter, this->ctx);","class":"lineCov","hits":"1","order":"968",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"        // Embed the counter"},
{"lineNum":"   58","line":"        EVP_DigestUpdate(state_counter, &counter, sizeof(counter));","class":"lineCov","hits":"1","order":"969",},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"        // Finalize the hash with a temporary state"},
{"lineNum":"   61","line":"        EVP_MD_CTX_copy_ex(state_finalize, state_counter);","class":"lineCov","hits":"1","order":"970",},
{"lineNum":"   62","line":"        unsigned int TEMP; // We already know the digest length!","class":"lineCov","hits":"1","order":"971",},
{"lineNum":"   63","line":"        EVP_DigestFinal_ex(state_finalize, hash.data(), &TEMP);","class":"lineCov","hits":"1","order":"972",},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"        // Check for scalar validity"},
{"lineNum":"   66","line":"        Scalar candidate;","class":"lineCov","hits":"1","order":"973",},
{"lineNum":"   67","line":"        try {"},
{"lineNum":"   68","line":"            candidate.deserialize(hash.data());","class":"lineCov","hits":"1","order":"945",},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"            EVP_MD_CTX_free(state_counter);","class":"lineCov","hits":"1","order":"974",},
{"lineNum":"   71","line":"            EVP_MD_CTX_free(state_finalize);","class":"lineCov","hits":"1","order":"975",},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"            return candidate;","class":"lineCov","hits":"1","order":"951",},
{"lineNum":"   74","line":"        } catch (...) {","class":"lineNoCov","hits":"0",},
{"lineNum":"   75","line":"            counter++;","class":"lineNoCov","hits":"0",},
{"lineNum":"   76","line":"        }","class":"lineNoCov","hits":"0",},
{"lineNum":"   77","line":"    }","class":"lineNoCov","hits":"0",},
{"lineNum":"   78","line":"}","class":"lineCov","hits":"1","order":"960",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"// Finalize the hash function to a group element"},
{"lineNum":"   81","line":"GroupElement Hash::finalize_group() {","class":"lineCov","hits":"1","order":"976",},
{"lineNum":"   82","line":"\tconst int GROUP_ENCODING = 34;","class":"lineCov","hits":"1","order":"977",},
{"lineNum":"   83","line":"\tconst unsigned char ZERO = 0;","class":"lineCov","hits":"1","order":"936",},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    // Ensure we can properly populate a"},
{"lineNum":"   86","line":"    if (EVP_MD_size(EVP_blake2b512()) < GROUP_ENCODING) {","class":"lineCov","hits":"1","order":"939",},
{"lineNum":"   87","line":"        throw std::runtime_error(\"Bad hash size!\");","class":"lineNoCov","hits":"0",},
{"lineNum":"   88","line":"    }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    std::vector<unsigned char> hash;","class":"lineCov","hits":"1","order":"932",},
{"lineNum":"   91","line":"    hash.resize(EVP_MD_size(EVP_blake2b512()));","class":"lineCov","hits":"1","order":"930",},
{"lineNum":"   92","line":"    unsigned char counter = 0;","class":"lineCov","hits":"1","order":"978",},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"    EVP_MD_CTX* state_counter;"},
{"lineNum":"   95","line":"    state_counter = EVP_MD_CTX_new();","class":"lineCov","hits":"1","order":"979",},
{"lineNum":"   96","line":"    EVP_DigestInit_ex(state_counter, EVP_blake2b512(), NULL);","class":"lineCov","hits":"1","order":"926",},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    EVP_MD_CTX* state_finalize;","class":"lineCov","hits":"1","order":"925",},
{"lineNum":"   99","line":"    state_finalize = EVP_MD_CTX_new();","class":"lineCov","hits":"1","order":"924",},
{"lineNum":"  100","line":"    EVP_DigestInit_ex(state_finalize, EVP_blake2b512(), NULL);","class":"lineCov","hits":"1","order":"923",},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    while (1) {","class":"lineCov","hits":"1","order":"922",},
{"lineNum":"  103","line":"        // Prepare temporary state for counter testing"},
{"lineNum":"  104","line":"        EVP_MD_CTX_copy_ex(state_counter, this->ctx);","class":"lineCov","hits":"1","order":"921",},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"        // Embed the counter"},
{"lineNum":"  107","line":"        EVP_DigestUpdate(state_counter, &counter, sizeof(counter));","class":"lineCov","hits":"1","order":"920",},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"        // Finalize the hash with a temporary state"},
{"lineNum":"  110","line":"        EVP_MD_CTX_copy_ex(state_finalize, state_counter);","class":"lineCov","hits":"1","order":"919",},
{"lineNum":"  111","line":"        unsigned int TEMP; // We already know the digest length!","class":"lineCov","hits":"1","order":"918",},
{"lineNum":"  112","line":"        EVP_DigestFinal_ex(state_finalize, hash.data(), &TEMP);","class":"lineCov","hits":"1","order":"917",},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"        // Assemble the serialized input:"},
{"lineNum":"  115","line":"\t\t//\tbytes 0..31: x coordinate"},
{"lineNum":"  116","line":"\t\t//\tbyte 32: even/odd"},
{"lineNum":"  117","line":"\t\t//\tbyte 33: zero (this point is not infinity)"},
{"lineNum":"  118","line":"\t\tunsigned char candidate_bytes[GROUP_ENCODING];","class":"lineCov","hits":"1","order":"916",},
{"lineNum":"  119","line":"\t\tmemcpy(candidate_bytes, hash.data(), 33);","class":"lineCov","hits":"1","order":"915",},
{"lineNum":"  120","line":"\t\tmemcpy(candidate_bytes + 33, &ZERO, 1);","class":"lineCov","hits":"1","order":"914",},
{"lineNum":"  121","line":"        GroupElement candidate;","class":"lineCov","hits":"1","order":"913",},
{"lineNum":"  122","line":"        try {"},
{"lineNum":"  123","line":"            candidate.deserialize(candidate_bytes);","class":"lineCov","hits":"1","order":"912",},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"            // Deserialization can succeed even with an invalid result"},
{"lineNum":"  126","line":"            if (!candidate.isMember()) {","class":"lineCov","hits":"1","order":"911",},
{"lineNum":"  127","line":"                counter++;","class":"lineNoCov","hits":"0",},
{"lineNum":"  128","line":"                continue;","class":"lineNoCov","hits":"0",},
{"lineNum":"  129","line":"            }"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"            EVP_MD_CTX_free(state_counter);","class":"lineCov","hits":"1","order":"910",},
{"lineNum":"  132","line":"            EVP_MD_CTX_free(state_finalize);","class":"lineCov","hits":"1","order":"909",},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"            return candidate;","class":"lineCov","hits":"1","order":"908",},
{"lineNum":"  135","line":"        } catch (...) {","class":"lineCov","hits":"1","order":"1766",},
{"lineNum":"  136","line":"            counter++;","class":"lineCov","hits":"1","order":"1767",},
{"lineNum":"  137","line":"        }","class":"lineCov","hits":"1","order":"1768",},
{"lineNum":"  138","line":"    }","class":"lineCov","hits":"1","order":"1765",},
{"lineNum":"  139","line":"}","class":"lineCov","hits":"1","order":"943",},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"// Include a serialized size in the hash function"},
{"lineNum":"  142","line":"void Hash::include_size(std::size_t size) {","class":"lineCov","hits":"1","order":"954",},
{"lineNum":"  143","line":"\tCDataStream stream(SER_NETWORK, PROTOCOL_VERSION);","class":"lineCov","hits":"1","order":"934",},
{"lineNum":"  144","line":"\tstream << size;","class":"lineCov","hits":"1","order":"952",},
{"lineNum":"  145","line":"\tEVP_DigestUpdate(this->ctx, reinterpret_cast<unsigned char *>(stream.data()), stream.size());","class":"lineCov","hits":"1","order":"956",},
{"lineNum":"  146","line":"}","class":"lineCov","hits":"1","order":"958",},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "", "date" : "2023-08-30 10:04:36", "instrumented" : 84, "covered" : 76,};
var merged_data = [];
