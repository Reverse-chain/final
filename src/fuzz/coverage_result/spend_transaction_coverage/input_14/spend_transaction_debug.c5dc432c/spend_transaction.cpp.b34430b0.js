var data = {lines:[
{"lineNum":"    1","line":"#include \"spend_transaction.h\""},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"namespace spark {"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"// Generate a spend transaction that consumes existing coins and generates new ones"},
{"lineNum":"    6","line":"SpendTransaction::SpendTransaction(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    7","line":"        const Params* params) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"    8","line":"    this->params = params;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"    9","line":"}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"SpendTransaction::SpendTransaction(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   12","line":"\tconst Params* params,"},
{"lineNum":"   13","line":"\tconst FullViewKey& full_view_key,"},
{"lineNum":"   14","line":"\tconst SpendKey& spend_key,"},
{"lineNum":"   15","line":"\tconst std::vector<InputCoinData>& inputs,"},
{"lineNum":"   16","line":"    const std::unordered_map<uint64_t, CoverSetData>& cover_set_data,"},
{"lineNum":"   17","line":"\tconst uint64_t f,"},
{"lineNum":"   18","line":"    const uint64_t vout,"},
{"lineNum":"   19","line":"\tconst std::vector<OutputCoinData>& outputs"},
{"lineNum":"   20","line":") {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   21","line":"\tthis->params = params;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"\t// Size parameters"},
{"lineNum":"   24","line":"\tconst std::size_t w = inputs.size(); // number of consumed coins","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   25","line":"\tconst std::size_t t = outputs.size(); // number of generated coins","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   26","line":"\tconst std::size_t N = (std::size_t) std::pow(params->get_n_grootle(), params->get_m_grootle()); // size of cover sets","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"\t// Prepare input-related vectors"},
{"lineNum":"   29","line":"\tthis->cover_set_ids.reserve(w); // cover set data and metadata","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":"    this->setCoverSets(cover_set_data);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   31","line":"\tthis->S1.reserve(w); // serial commitment offsets","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"\tthis->C1.reserve(w); // value commitment offsets","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"\tthis->grootle_proofs.reserve(w); // Grootle one-of-many proofs","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"\tthis->T.reserve(w); // linking tags","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"\tthis->f = f; // fee","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"    this->vout = vout; // transparent output value","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"\t// Prepare Chaum vectors"},
{"lineNum":"   40","line":"\tstd::vector<Scalar> chaum_x, chaum_y, chaum_z;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"\t// Prepare output vector"},
{"lineNum":"   43","line":"\tthis->out_coins.reserve(t); // coins","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"\tstd::vector<Scalar> k; // nonces","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"\t// Prepare inputs"},
{"lineNum":"   47","line":"\tGrootle grootle(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"\t\tthis->params->get_H(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"\t\tthis->params->get_G_grootle(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":"\t\tthis->params->get_H_grootle(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   51","line":"\t\tthis->params->get_n_grootle(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"\t\tthis->params->get_m_grootle()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"\t);"},
{"lineNum":"   54","line":"\tfor (std::size_t u = 0; u < w; u++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   55","line":"\t\t// Parse out cover set data for this spend"},
{"lineNum":"   56","line":"        uint64_t set_id = inputs[u].cover_set_id;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"\t\tthis->cover_set_ids.emplace_back(set_id);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"        if (cover_set_data.count(set_id) == 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"            throw std::invalid_argument(\"Required set is not passed\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        const auto& cover_set = cover_set_data.at(set_id).cover_set;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   62","line":"        std::size_t set_size = cover_set.size();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"        if (set_size > N)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"            throw std::invalid_argument(\"Wrong set size\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        std::vector<GroupElement> S, C;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"\t\tS.reserve(set_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"\t\tC.reserve(set_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"\t\tfor (std::size_t i = 0; i < set_size; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   70","line":"\t\t\tS.emplace_back(cover_set[i].S);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"\t\t\tC.emplace_back(cover_set[i].C);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"\t\t}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"\t\t// Serial commitment offset"},
{"lineNum":"   75","line":"\t\tthis->S1.emplace_back(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   76","line":"\t\t\tthis->params->get_F()*inputs[u].s","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"\t\t\t+ this->params->get_H().inverse()*SparkUtils::hash_ser1(inputs[u].s, full_view_key.get_D())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"\t\t\t+ full_view_key.get_D()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"\t\t);"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"\t\t// Value commitment offset"},
{"lineNum":"   82","line":"\t\tthis->C1.emplace_back(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   83","line":"\t\t\tthis->params->get_G()*Scalar(inputs[u].v)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"\t\t\t+ this->params->get_H()*SparkUtils::hash_val1(inputs[u].s, full_view_key.get_D())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"\t\t);"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"\t\t// Tags"},
{"lineNum":"   88","line":"\t\tthis->T.emplace_back(inputs[u].T);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"\t\t// Grootle proof"},
{"lineNum":"   91","line":"\t\tthis->grootle_proofs.emplace_back();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"\t\tstd::size_t l = inputs[u].index;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"\t\tgrootle.prove(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   94","line":"\t\t\tl,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"\t\t\tSparkUtils::hash_ser1(inputs[u].s, full_view_key.get_D()),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"\t\t\tS,"},
{"lineNum":"   97","line":"\t\t\tthis->S1.back(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"\t\t\tSparkUtils::hash_val(inputs[u].k) - SparkUtils::hash_val1(inputs[u].s, full_view_key.get_D()),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"\t\t\tC,"},
{"lineNum":"  100","line":"\t\t\tthis->C1.back(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"\t\t\tthis->cover_set_representations[set_id],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"\t\t\tthis->grootle_proofs.back()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"\t\t);"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"\t\t// Chaum data"},
{"lineNum":"  106","line":"\t\tchaum_x.emplace_back(inputs[u].s);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"\t\tchaum_y.emplace_back(spend_key.get_r());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"\t\tchaum_z.emplace_back(SparkUtils::hash_ser1(inputs[u].s, full_view_key.get_D()).negate());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"\t// Generate output coins and prepare range proof vectors"},
{"lineNum":"  112","line":"\tstd::vector<Scalar> range_v;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":"\tstd::vector<Scalar> range_r;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":"\tstd::vector<GroupElement> range_C;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"\t// Serial context for all outputs is the set of linking tags for this transaction, which must always be in a fixed order"},
{"lineNum":"  117","line":"    CDataStream serial_context(SER_NETWORK, PROTOCOL_VERSION);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"\tserial_context << this->T;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"\tfor (std::size_t j = 0; j < t; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  121","line":"\t\t// Nonce"},
{"lineNum":"  122","line":"\t\tk.emplace_back();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"\t\tk.back().randomize();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"\t\t// Output coin"},
{"lineNum":"  126","line":"\t\tthis->out_coins.emplace_back();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"\t\tthis->out_coins.back() = Coin(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  128","line":"\t\t\tthis->params,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"\t\t\tCOIN_TYPE_SPEND,"},
{"lineNum":"  130","line":"\t\t\tk.back(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"\t\t\toutputs[j].address,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"\t\t\toutputs[j].v,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  133","line":"\t\t\toutputs[j].memo,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":"\t\t\tstd::vector<unsigned char>(serial_context.begin(), serial_context.end())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"\t\t);"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"\t\t// Range data"},
{"lineNum":"  138","line":"\t\trange_v.emplace_back(outputs[j].v);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"\t\trange_r.emplace_back(SparkUtils::hash_val(k.back()));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  140","line":"\t\trange_C.emplace_back(this->out_coins.back().C);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  141","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"\t// Generate range proof"},
{"lineNum":"  144","line":"\tBPPlus range(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  145","line":"\t\tthis->params->get_G(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":"\t\tthis->params->get_H(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"\t\tthis->params->get_G_range(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"\t\tthis->params->get_H_range(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"\t\t64"},
{"lineNum":"  150","line":"\t);"},
{"lineNum":"  151","line":"\trange.prove(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"\t\trange_v,"},
{"lineNum":"  153","line":"\t\trange_r,"},
{"lineNum":"  154","line":"\t\trange_C,"},
{"lineNum":"  155","line":"\t\tthis->range_proof","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"\t);"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"\t// Generate the balance proof"},
{"lineNum":"  159","line":"\tSchnorr schnorr(this->params->get_H());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"\tGroupElement balance_statement;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"\tScalar balance_witness;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"\tfor (std::size_t u = 0; u < w; u++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  163","line":"\t\tbalance_statement += this->C1[u];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"\t\tbalance_witness += SparkUtils::hash_val1(inputs[u].s, full_view_key.get_D());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  165","line":"\t}"},
{"lineNum":"  166","line":"\tfor (std::size_t j = 0; j < t; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  167","line":"\t\tbalance_statement += this->out_coins[j].C.inverse();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  168","line":"\t\tbalance_witness -= SparkUtils::hash_val(k[j]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  169","line":"\t}"},
{"lineNum":"  170","line":"\tbalance_statement += (this->params->get_G()*Scalar(f + vout)).inverse();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  171","line":"\tschnorr.prove(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"\t\tbalance_witness,"},
{"lineNum":"  173","line":"\t\tbalance_statement,"},
{"lineNum":"  174","line":"\t\tthis->balance_proof","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"\t);"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"\t// Compute the binding hash"},
{"lineNum":"  178","line":"\tScalar mu = hash_bind(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  179","line":"\t\tthis->out_coins,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":"\t\tthis->f + vout,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  181","line":"\t\tthis->cover_set_representations,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"\t\tthis->S1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"\t\tthis->C1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"\t\tthis->T,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  185","line":"\t\tthis->grootle_proofs,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"\t\tthis->balance_proof,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"\t\tthis->range_proof","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"\t);"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"\t// Compute the authorizing Chaum proof"},
{"lineNum":"  191","line":"\tChaum chaum(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"\t\tthis->params->get_F(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"\t\tthis->params->get_G(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"\t\tthis->params->get_H(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"\t\tthis->params->get_U()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"\t);"},
{"lineNum":"  197","line":"\tchaum.prove(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"\t\tmu,"},
{"lineNum":"  199","line":"\t\tchaum_x,"},
{"lineNum":"  200","line":"\t\tchaum_y,"},
{"lineNum":"  201","line":"\t\tchaum_z,"},
{"lineNum":"  202","line":"\t\tthis->S1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"\t\tthis->T,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":"\t\tthis->chaum_proof","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  205","line":"\t);"},
{"lineNum":"  206","line":"}","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"uint64_t SpendTransaction::getFee() {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  209","line":"    return f;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"const std::vector<GroupElement>& SpendTransaction::getUsedLTags() const {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  213","line":"    return T;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":"}"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"const std::vector<uint64_t>& SpendTransaction::getCoinGroupIds() {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  217","line":"    return cover_set_ids;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":"}"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"const std::vector<Coin>& SpendTransaction::getOutCoins() {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  221","line":"    return out_coins;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  222","line":"}"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"// Convenience wrapper for verifying a single spend transaction"},
{"lineNum":"  225","line":"bool SpendTransaction::verify("},
{"lineNum":"  226","line":"        const SpendTransaction& transaction,"},
{"lineNum":"  227","line":"        const std::unordered_map<uint64_t, std::vector<Coin>>& cover_sets) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  228","line":"\tstd::vector<SpendTransaction> transactions = { transaction };","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  229","line":"\treturn verify(transaction.params, transactions, cover_sets);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":"}","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"// Determine if a set of spend transactions is collectively valid"},
{"lineNum":"  233","line":"// NOTE: This assumes that the relationship between a `cover_set_id` and the provided `cover_set` is already valid and canonical!"},
{"lineNum":"  234","line":"// NOTE: This assumes that validity criteria relating to chain context have been externally checked!"},
{"lineNum":"  235","line":"bool SpendTransaction::verify("},
{"lineNum":"  236","line":"        const Params* params,"},
{"lineNum":"  237","line":"        const std::vector<SpendTransaction>& transactions,"},
{"lineNum":"  238","line":"        const std::unordered_map<uint64_t, std::vector<Coin>>& cover_sets) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  239","line":"\t// The idea here is to perform batching as broadly as possible"},
{"lineNum":"  240","line":"\t// - Grootle proofs can be batched if they share a (partial) cover set"},
{"lineNum":"  241","line":"\t// - Range proofs can always be batched arbitrarily"},
{"lineNum":"  242","line":"\t// - Other parts of the transaction can be checked separately"},
{"lineNum":"  243","line":"\t// - We try to verify in order of likely computational complexity, to fail early"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"\t// Track range proofs to batch"},
{"lineNum":"  246","line":"\tstd::vector<std::vector<GroupElement>> range_proofs_C; // commitments for all range proofs","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":"\tstd::vector<BPPlusProof> range_proofs; // all range proofs","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"\t// Track cover sets across Grootle proofs to batch"},
{"lineNum":"  250","line":"\tstd::unordered_map<uint64_t, std::vector<std::pair<std::size_t, std::size_t>>> grootle_buckets;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"\t// Process each transaction"},
{"lineNum":"  253","line":"\tfor (std::size_t i = 0; i < transactions.size(); i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":"\t\tSpendTransaction tx = transactions[i];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"\t\t// Assert common parameters"},
{"lineNum":"  257","line":"\t\tif (params != tx.params) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  258","line":"\t\t\treturn false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  259","line":"\t\t}"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"\t\t// Size parameters for this transaction"},
{"lineNum":"  262","line":"\t\tconst std::size_t w = tx.cover_set_ids.size(); // number of consumed coins","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  263","line":"\t\tconst std::size_t t = tx.out_coins.size(); // number of generated coins","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"\t\tconst std::size_t N = (std::size_t) std::pow(params->get_n_grootle(), params->get_m_grootle()); // size of cover sets","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"\t\t// Consumed coin semantics"},
{"lineNum":"  267","line":"\t\tif (tx.S1.size() != w ||","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  268","line":"\t\t\ttx.C1.size() != w ||","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"\t\t\ttx.T.size() != w ||","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"\t\t\ttx.grootle_proofs.size() != w,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  271","line":"\t\t\ttx.cover_set_sizes.size() != tx.cover_set_representations.size()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"\t\t\tthrow std::invalid_argument(\"Bad spend transaction semantics\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  273","line":"\t\t}"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"\t\t// Cover set semantics"},
{"lineNum":"  276","line":"\t\tfor (const auto& set : cover_sets) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  277","line":"\t\t\tif (set.second.size() > N) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  278","line":"\t\t\t\tthrow std::invalid_argument(\"Bad spend transaction semantics\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  279","line":"\t\t\t}"},
{"lineNum":"  280","line":"\t\t}"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"\t\t// Store range proof with commitments"},
{"lineNum":"  283","line":"\t\trange_proofs_C.emplace_back();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  284","line":"\t\tfor (std::size_t j = 0; j < t; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  285","line":"\t\t\trange_proofs_C.back().emplace_back(tx.out_coins[j].C);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  286","line":"\t\t}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"\t\trange_proofs.emplace_back(tx.range_proof);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"\t\t// Sort all Grootle proofs into buckets for batching based on common input sets"},
{"lineNum":"  290","line":"\t\tfor (std::size_t u = 0; u < w; u++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  291","line":"\t\t\tgrootle_buckets[tx.cover_set_ids[u]].emplace_back(std::pair<std::size_t, std::size_t>(i, u));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"\t\t}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"\t\t// Compute the binding hash"},
{"lineNum":"  295","line":"\t\tScalar mu = hash_bind(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  296","line":"\t\t\ttx.out_coins,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"\t\t\ttx.f + tx.vout,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"\t\t\ttx.cover_set_representations,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":"\t\t\ttx.S1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":"\t\t\ttx.C1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  301","line":"\t\t\ttx.T,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"\t\t\ttx.grootle_proofs,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"\t\t\ttx.balance_proof,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"\t\t\ttx.range_proof","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  305","line":"\t\t);"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"\t\t// Verify the authorizing Chaum-Pedersen proof"},
{"lineNum":"  308","line":"\t\tChaum chaum(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":"\t\t\ttx.params->get_F(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  310","line":"\t\t\ttx.params->get_G(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"\t\t\ttx.params->get_H(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"\t\t\ttx.params->get_U()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":"\t\t);"},
{"lineNum":"  314","line":"\t\tif (!chaum.verify(mu, tx.S1, tx.T, tx.chaum_proof)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"\t\t\treturn false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":"\t\t}"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"\t\t// Verify the balance proof"},
{"lineNum":"  319","line":"\t\tSchnorr schnorr(tx.params->get_H());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":"\t\tGroupElement balance_statement;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  321","line":"\t\tfor (std::size_t u = 0; u < w; u++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  322","line":"\t\t\tbalance_statement += tx.C1[u];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  323","line":"\t\t}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"\t\tfor (std::size_t j = 0; j < t; j++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  325","line":"\t\t\tbalance_statement += tx.out_coins[j].C.inverse();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  326","line":"\t\t}"},
{"lineNum":"  327","line":"        balance_statement += (tx.params->get_G()*Scalar(tx.f + tx.vout)).inverse();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"\t\tif(!schnorr.verify(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  330","line":"\t\t\tbalance_statement,"},
{"lineNum":"  331","line":"\t\t\ttx.balance_proof","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  332","line":"\t\t)) {"},
{"lineNum":"  333","line":"\t\t\treturn false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  334","line":"\t\t}"},
{"lineNum":"  335","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"\t// Verify all range proofs in a batch"},
{"lineNum":"  338","line":"\tBPPlus range(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  339","line":"\t\tparams->get_G(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  340","line":"\t\tparams->get_H(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  341","line":"\t\tparams->get_G_range(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":"\t\tparams->get_H_range(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  343","line":"\t\t64"},
{"lineNum":"  344","line":"\t);"},
{"lineNum":"  345","line":"\tif (!range.verify(range_proofs_C, range_proofs)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  346","line":"\t\treturn false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  347","line":"\t}"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"\t// Verify all Grootle proofs in batches (based on cover set)"},
{"lineNum":"  350","line":"\t// TODO: Finish this"},
{"lineNum":"  351","line":"\tGrootle grootle(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  352","line":"\t\tparams->get_H(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  353","line":"\t\tparams->get_G_grootle(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  354","line":"\t\tparams->get_H_grootle(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  355","line":"\t\tparams->get_n_grootle(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  356","line":"\t\tparams->get_m_grootle()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":"\t);"},
{"lineNum":"  358","line":"\tfor (auto grootle_bucket : grootle_buckets) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  359","line":"\t\tstd::size_t cover_set_id = grootle_bucket.first;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":"\t\tstd::vector<std::pair<std::size_t, std::size_t>> proof_indexes = grootle_bucket.second;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"\t\t// Build the proof statement and metadata vectors from these proofs"},
{"lineNum":"  363","line":"\t\tstd::vector<GroupElement> S, S1, V, V1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":"\t\tstd::vector<std::vector<unsigned char>> cover_set_representations;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  365","line":"\t\tstd::vector<std::size_t> sizes;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  366","line":"\t\tstd::vector<GrootleProof> proofs;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"\t\tfor (auto proof_index : proof_indexes) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  369","line":"            const auto& tx = transactions[proof_index.first];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  370","line":"            if (!cover_sets.count(cover_set_id))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  371","line":"                throw std::invalid_argument(\"Cover set missing\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  372","line":"\t\t\t// Because we assume all proofs in this list share a monotonic cover set, the largest such set is the one to use for verification"},
{"lineNum":"  373","line":"            if (!tx.cover_set_sizes.count(cover_set_id))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  374","line":"                throw std::invalid_argument(\"Cover set size missing\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"\t\t\tstd::size_t this_cover_set_size = tx.cover_set_sizes.at(cover_set_id);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  377","line":"\t\t\tif (this_cover_set_size > S.size()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  378","line":"\t\t\t\tfor (std::size_t i = S.size(); i < this_cover_set_size; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  379","line":"\t\t\t\t\tS.emplace_back(cover_sets.at(cover_set_id)[i].S);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  380","line":"\t\t\t\t\tV.emplace_back(cover_sets.at(cover_set_id)[i].C);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  381","line":"\t\t\t\t}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  382","line":"\t\t\t}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"\t\t\t// We always use the other elements"},
{"lineNum":"  385","line":"\t\t\tS1.emplace_back(tx.S1[proof_index.second]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  386","line":"\t\t\tV1.emplace_back(tx.C1[proof_index.second]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  387","line":"            if (!tx.cover_set_representations.count(cover_set_id))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  388","line":"                throw std::invalid_argument(\"Cover set representation missing\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"\t\t\tcover_set_representations.emplace_back(tx.cover_set_representations.at(cover_set_id));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  391","line":"\t\t\tsizes.emplace_back(this_cover_set_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  392","line":"\t\t\tproofs.emplace_back(tx.grootle_proofs[proof_index.second]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  393","line":"\t\t}"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"\t\t// Verify the batch"},
{"lineNum":"  396","line":"\t\tif (!grootle.verify(S, S1, V, V1, cover_set_representations, sizes, proofs)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  397","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  398","line":"        }"},
{"lineNum":"  399","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"\t// Any failures have been identified already, so the batch is valid"},
{"lineNum":"  402","line":"\treturn true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"}","class":"lineNoCov","hits":"0","possible_hits":"12",},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"// Hash-to-scalar function H_bind"},
{"lineNum":"  406","line":"Scalar SpendTransaction::hash_bind("},
{"lineNum":"  407","line":"    const std::vector<Coin>& out_coins,"},
{"lineNum":"  408","line":"    const uint64_t f_,"},
{"lineNum":"  409","line":"\tconst std::unordered_map<uint64_t, std::vector<unsigned char>>& cover_set_representations,"},
{"lineNum":"  410","line":"    const std::vector<GroupElement>& S1,"},
{"lineNum":"  411","line":"    const std::vector<GroupElement>& C1,"},
{"lineNum":"  412","line":"    const std::vector<GroupElement>& T,"},
{"lineNum":"  413","line":"    const std::vector<GrootleProof>& grootle_proofs,"},
{"lineNum":"  414","line":"    const SchnorrProof& balance_proof,"},
{"lineNum":"  415","line":"\tconst BPPlusProof& range_proof"},
{"lineNum":"  416","line":") {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  417","line":"    Hash hash(LABEL_HASH_BIND);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"\t// Perform the serialization and hashing"},
{"lineNum":"  422","line":"    stream << out_coins;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":"    stream << f_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  424","line":"\tstream << cover_set_representations;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  425","line":"    stream << S1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  426","line":"    stream << C1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":"    stream << T;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  428","line":"    stream << grootle_proofs;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  429","line":"    stream << balance_proof;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  430","line":"\tstream << range_proof;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  431","line":"    hash.include(stream);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"    return hash.finalize_scalar();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  434","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"void SpendTransaction::setBlockHashes(const std::map<uint64_t, uint256>& idAndHashes) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  437","line":"    set_id_blockHash = idAndHashes;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  438","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"const std::map<uint64_t, uint256>& SpendTransaction::getBlockHashes() {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  441","line":"    return set_id_blockHash;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  442","line":"}"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "spend_transaction_debug", "date" : "2023-08-30 10:01:08", "instrumented" : 258, "covered" : 0,};
var merged_data = [];
