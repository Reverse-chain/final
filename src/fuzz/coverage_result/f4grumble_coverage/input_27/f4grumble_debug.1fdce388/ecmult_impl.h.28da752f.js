var data = {lines:[
{"lineNum":"    1","line":"/**********************************************************************"},
{"lineNum":"    2","line":" * Copyright (c) 2013, 2014 Pieter Wuille                             *"},
{"lineNum":"    3","line":" * Distributed under the MIT software license, see the accompanying   *"},
{"lineNum":"    4","line":" * file COPYING or http://www.opensource.org/licenses/mit-license.php.*"},
{"lineNum":"    5","line":" **********************************************************************/"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"#ifndef _SECP256K1_ECMULT_IMPL_H_"},
{"lineNum":"    8","line":"#define _SECP256K1_ECMULT_IMPL_H_"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#include <string.h>"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"#include \"group.h\""},
{"lineNum":"   13","line":"#include \"scalar.h\""},
{"lineNum":"   14","line":"#include \"ecmult.h\""},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#if defined(EXHAUSTIVE_TEST_ORDER)"},
{"lineNum":"   17","line":"/* We need to lower these values for exhaustive tests because"},
{"lineNum":"   18","line":" * the tables cannot have infinities in them (this breaks the"},
{"lineNum":"   19","line":" * affine-isomorphism stuff which tracks z-ratios) */"},
{"lineNum":"   20","line":"#  if EXHAUSTIVE_TEST_ORDER > 128"},
{"lineNum":"   21","line":"#    define WINDOW_A 5"},
{"lineNum":"   22","line":"#    define WINDOW_G 8"},
{"lineNum":"   23","line":"#  elif EXHAUSTIVE_TEST_ORDER > 8"},
{"lineNum":"   24","line":"#    define WINDOW_A 4"},
{"lineNum":"   25","line":"#    define WINDOW_G 4"},
{"lineNum":"   26","line":"#  else"},
{"lineNum":"   27","line":"#    define WINDOW_A 2"},
{"lineNum":"   28","line":"#    define WINDOW_G 2"},
{"lineNum":"   29","line":"#  endif"},
{"lineNum":"   30","line":"#else"},
{"lineNum":"   31","line":"/* optimal for 128-bit and 256-bit exponents. */"},
{"lineNum":"   32","line":"#define WINDOW_A 5"},
{"lineNum":"   33","line":"/** larger numbers may result in slightly better performance, at the cost of"},
{"lineNum":"   34","line":"    exponentially larger precomputed tables. */"},
{"lineNum":"   35","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"   36","line":"/** Two tables for window size 15: 1.375 MiB. */"},
{"lineNum":"   37","line":"#define WINDOW_G 15"},
{"lineNum":"   38","line":"#else"},
{"lineNum":"   39","line":"/** One table for window size 16: 1.375 MiB. */"},
{"lineNum":"   40","line":"#define WINDOW_G 16"},
{"lineNum":"   41","line":"#endif"},
{"lineNum":"   42","line":"#endif"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"   45","line":"#define WNAF_BITS 128"},
{"lineNum":"   46","line":"#else"},
{"lineNum":"   47","line":"#define WNAF_BITS 256"},
{"lineNum":"   48","line":"#endif"},
{"lineNum":"   49","line":"#define WNAF_SIZE_BITS(bits, w) (((bits) + (w) - 1) / (w))"},
{"lineNum":"   50","line":"#define WNAF_SIZE(w) WNAF_SIZE_BITS(WNAF_BITS, w)"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"/** The number of entries a table with precomputed multiples needs to have. */"},
{"lineNum":"   53","line":"#define ECMULT_TABLE_SIZE(w) (1 << ((w)-2))"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"/* The number of objects allocated on the scratch space for ecmult_multi algorithms */"},
{"lineNum":"   56","line":"#define PIPPENGER_SCRATCH_OBJECTS 6"},
{"lineNum":"   57","line":"#define STRAUSS_SCRATCH_OBJECTS 6"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"#define PIPPENGER_MAX_BUCKET_WINDOW 12"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"/* Minimum number of points for which pippenger_wnaf is faster than strauss wnaf */"},
{"lineNum":"   62","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"   63","line":"#define ECMULT_PIPPENGER_THRESHOLD 88"},
{"lineNum":"   64","line":"#else"},
{"lineNum":"   65","line":"#define ECMULT_PIPPENGER_THRESHOLD 160"},
{"lineNum":"   66","line":"#endif"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"   69","line":"#define ECMULT_MAX_POINTS_PER_BATCH 5000000"},
{"lineNum":"   70","line":"#else"},
{"lineNum":"   71","line":"#define ECMULT_MAX_POINTS_PER_BATCH 10000000"},
{"lineNum":"   72","line":"#endif"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"/** Fill a table \'prej\' with precomputed odd multiples of a. Prej will contain"},
{"lineNum":"   75","line":" *  the values [1*a,3*a,...,(2*n-1)*a], so it space for n values. zr[0] will"},
{"lineNum":"   76","line":" *  contain prej[0].z / a.z. The other zr[i] values = prej[i].z / prej[i-1].z."},
{"lineNum":"   77","line":" *  Prej\'s Z values are undefined, except for the last value."},
{"lineNum":"   78","line":" */"},
{"lineNum":"   79","line":"static void secp256k1_ecmult_odd_multiples_table(int n, secp256k1_gej *prej, secp256k1_fe *zr, const secp256k1_gej *a) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   80","line":"    secp256k1_gej d;"},
{"lineNum":"   81","line":"    secp256k1_ge a_ge, d_ge;"},
{"lineNum":"   82","line":"    int i;"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"    VERIFY_CHECK(!a->infinity);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"    secp256k1_gej_double_var(&d, a, NULL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    /*"},
{"lineNum":"   89","line":"     * Perform the additions on an isomorphism where \'d\' is affine: drop the z coordinate"},
{"lineNum":"   90","line":"     * of \'d\', and scale the 1P starting value\'s x/y coordinates without changing its z."},
{"lineNum":"   91","line":"     */"},
{"lineNum":"   92","line":"    d_ge.x = d.x;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"    d_ge.y = d.y;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   94","line":"    d_ge.infinity = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    secp256k1_ge_set_gej_zinv(&a_ge, a, &d.z);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"    prej[0].x = a_ge.x;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"    prej[0].y = a_ge.y;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"    prej[0].z = a->z;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"    prej[0].infinity = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    zr[0] = d.z;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"    for (i = 1; i < n; i++) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  104","line":"        secp256k1_gej_add_ge_var(&prej[i], &prej[i-1], &d_ge, &zr[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"    }"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    /*"},
{"lineNum":"  108","line":"     * Each point in \'prej\' has a z coordinate too small by a factor of \'d.z\'. Only"},
{"lineNum":"  109","line":"     * the final point\'s z coordinate is actually used though, so just update that."},
{"lineNum":"  110","line":"     */"},
{"lineNum":"  111","line":"    secp256k1_fe_mul(&prej[n-1].z, &prej[n-1].z, &d.z);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"/** Fill a table \'pre\' with precomputed odd multiples of a."},
{"lineNum":"  115","line":" *"},
{"lineNum":"  116","line":" *  There are two versions of this function:"},
{"lineNum":"  117","line":" *  - secp256k1_ecmult_odd_multiples_table_globalz_windowa which brings its"},
{"lineNum":"  118","line":" *    resulting point set to a single constant Z denominator, stores the X and Y"},
{"lineNum":"  119","line":" *    coordinates as ge_storage points in pre, and stores the global Z in rz."},
{"lineNum":"  120","line":" *    It only operates on tables sized for WINDOW_A wnaf multiples."},
{"lineNum":"  121","line":" *  - secp256k1_ecmult_odd_multiples_table_storage_var, which converts its"},
{"lineNum":"  122","line":" *    resulting point set to actually affine points, and stores those in pre."},
{"lineNum":"  123","line":" *    It operates on tables of any size, but uses heap-allocated temporaries."},
{"lineNum":"  124","line":" *"},
{"lineNum":"  125","line":" *  To compute a*P + b*G, we compute a table for P using the first function,"},
{"lineNum":"  126","line":" *  and for G using the second (which requires an inverse, but it only needs to"},
{"lineNum":"  127","line":" *  happen once)."},
{"lineNum":"  128","line":" */"},
{"lineNum":"  129","line":"static void secp256k1_ecmult_odd_multiples_table_globalz_windowa(secp256k1_ge *pre, secp256k1_fe *globalz, const secp256k1_gej *a) {"},
{"lineNum":"  130","line":"    secp256k1_gej prej[ECMULT_TABLE_SIZE(WINDOW_A)];"},
{"lineNum":"  131","line":"    secp256k1_fe zr[ECMULT_TABLE_SIZE(WINDOW_A)];"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    /* Compute the odd multiples in Jacobian form. */"},
{"lineNum":"  134","line":"    secp256k1_ecmult_odd_multiples_table(ECMULT_TABLE_SIZE(WINDOW_A), prej, zr, a);"},
{"lineNum":"  135","line":"    /* Bring them to the same Z denominator. */"},
{"lineNum":"  136","line":"    secp256k1_ge_globalz_set_table_gej(ECMULT_TABLE_SIZE(WINDOW_A), pre, globalz, prej, zr);"},
{"lineNum":"  137","line":"}"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"static void secp256k1_ecmult_odd_multiples_table_storage_var(int n, secp256k1_ge_storage *pre, const secp256k1_gej *a, const secp256k1_callback *cb) {"},
{"lineNum":"  140","line":"    secp256k1_gej *prej = (secp256k1_gej*)checked_malloc(cb, sizeof(secp256k1_gej) * n);"},
{"lineNum":"  141","line":"    secp256k1_ge *prea = (secp256k1_ge*)checked_malloc(cb, sizeof(secp256k1_ge) * n);"},
{"lineNum":"  142","line":"    secp256k1_fe *zr = (secp256k1_fe*)checked_malloc(cb, sizeof(secp256k1_fe) * n);"},
{"lineNum":"  143","line":"    int i;"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    /* Compute the odd multiples in Jacobian form. */"},
{"lineNum":"  146","line":"    secp256k1_ecmult_odd_multiples_table(n, prej, zr, a);"},
{"lineNum":"  147","line":"    /* Convert them in batch to affine coordinates. */"},
{"lineNum":"  148","line":"    secp256k1_ge_set_table_gej_var(prea, prej, zr, n);"},
{"lineNum":"  149","line":"    /* Convert them to compact storage form. */"},
{"lineNum":"  150","line":"    for (i = 0; i < n; i++) {"},
{"lineNum":"  151","line":"        secp256k1_ge_to_storage(&pre[i], &prea[i]);"},
{"lineNum":"  152","line":"    }"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    free(prea);"},
{"lineNum":"  155","line":"    free(prej);"},
{"lineNum":"  156","line":"    free(zr);"},
{"lineNum":"  157","line":"}"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"/** The following two macro retrieves a particular odd multiple from a table"},
{"lineNum":"  160","line":" *  of precomputed multiples. */"},
{"lineNum":"  161","line":"#define ECMULT_TABLE_GET_GE(r,pre,n,w) do { \\"},
{"lineNum":"  162","line":"    VERIFY_CHECK(((n) & 1) == 1); \\"},
{"lineNum":"  163","line":"    VERIFY_CHECK((n) >= -((1 << ((w)-1)) - 1)); \\"},
{"lineNum":"  164","line":"    VERIFY_CHECK((n) <=  ((1 << ((w)-1)) - 1)); \\"},
{"lineNum":"  165","line":"    if ((n) > 0) { \\"},
{"lineNum":"  166","line":"        *(r) = (pre)[((n)-1)/2]; \\"},
{"lineNum":"  167","line":"    } else { \\"},
{"lineNum":"  168","line":"        secp256k1_ge_neg((r), &(pre)[(-(n)-1)/2]); \\"},
{"lineNum":"  169","line":"    } \\"},
{"lineNum":"  170","line":"} while(0)"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"#define ECMULT_TABLE_GET_GE_STORAGE(r,pre,n,w) do { \\"},
{"lineNum":"  173","line":"    VERIFY_CHECK(((n) & 1) == 1); \\"},
{"lineNum":"  174","line":"    VERIFY_CHECK((n) >= -((1 << ((w)-1)) - 1)); \\"},
{"lineNum":"  175","line":"    VERIFY_CHECK((n) <=  ((1 << ((w)-1)) - 1)); \\"},
{"lineNum":"  176","line":"    if ((n) > 0) { \\"},
{"lineNum":"  177","line":"        secp256k1_ge_from_storage((r), &(pre)[((n)-1)/2]); \\"},
{"lineNum":"  178","line":"    } else { \\"},
{"lineNum":"  179","line":"        secp256k1_ge_from_storage((r), &(pre)[(-(n)-1)/2]); \\"},
{"lineNum":"  180","line":"        secp256k1_ge_neg((r), (r)); \\"},
{"lineNum":"  181","line":"    } \\"},
{"lineNum":"  182","line":"} while(0)"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"static void secp256k1_ecmult_context_init(secp256k1_ecmult_context *ctx) {"},
{"lineNum":"  185","line":"    ctx->pre_g = NULL;"},
{"lineNum":"  186","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  187","line":"    ctx->pre_g_128 = NULL;"},
{"lineNum":"  188","line":"#endif"},
{"lineNum":"  189","line":"}"},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, const secp256k1_callback *cb) {"},
{"lineNum":"  192","line":"    secp256k1_gej gj;"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    if (ctx->pre_g != NULL) {"},
{"lineNum":"  195","line":"        return;"},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    /* get the generator */"},
{"lineNum":"  199","line":"    secp256k1_gej_set_ge(&gj, &secp256k1_ge_const_g);"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"    ctx->pre_g = (secp256k1_ge_storage (*)[])checked_malloc(cb, sizeof((*ctx->pre_g)[0]) * ECMULT_TABLE_SIZE(WINDOW_G));"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"    /* precompute the tables with odd multiples */"},
{"lineNum":"  204","line":"    secp256k1_ecmult_odd_multiples_table_storage_var(ECMULT_TABLE_SIZE(WINDOW_G), *ctx->pre_g, &gj, cb);"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  207","line":"    {"},
{"lineNum":"  208","line":"        secp256k1_gej g_128j;"},
{"lineNum":"  209","line":"        int i;"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"        ctx->pre_g_128 = (secp256k1_ge_storage (*)[])checked_malloc(cb, sizeof((*ctx->pre_g_128)[0]) * ECMULT_TABLE_SIZE(WINDOW_G));"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"        /* calculate 2^128*generator */"},
{"lineNum":"  214","line":"        g_128j = gj;"},
{"lineNum":"  215","line":"        for (i = 0; i < 128; i++) {"},
{"lineNum":"  216","line":"            secp256k1_gej_double_var(&g_128j, &g_128j, NULL);"},
{"lineNum":"  217","line":"        }"},
{"lineNum":"  218","line":"        secp256k1_ecmult_odd_multiples_table_storage_var(ECMULT_TABLE_SIZE(WINDOW_G), *ctx->pre_g_128, &g_128j, cb);"},
{"lineNum":"  219","line":"    }"},
{"lineNum":"  220","line":"#endif"},
{"lineNum":"  221","line":"}"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context *dst,"},
{"lineNum":"  224","line":"                                           const secp256k1_ecmult_context *src, const secp256k1_callback *cb) {"},
{"lineNum":"  225","line":"    if (src->pre_g == NULL) {"},
{"lineNum":"  226","line":"        dst->pre_g = NULL;"},
{"lineNum":"  227","line":"    } else {"},
{"lineNum":"  228","line":"        size_t size = sizeof((*dst->pre_g)[0]) * ECMULT_TABLE_SIZE(WINDOW_G);"},
{"lineNum":"  229","line":"        dst->pre_g = (secp256k1_ge_storage (*)[])checked_malloc(cb, size);"},
{"lineNum":"  230","line":"        memcpy(dst->pre_g, src->pre_g, size);"},
{"lineNum":"  231","line":"    }"},
{"lineNum":"  232","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  233","line":"    if (src->pre_g_128 == NULL) {"},
{"lineNum":"  234","line":"        dst->pre_g_128 = NULL;"},
{"lineNum":"  235","line":"    } else {"},
{"lineNum":"  236","line":"        size_t size = sizeof((*dst->pre_g_128)[0]) * ECMULT_TABLE_SIZE(WINDOW_G);"},
{"lineNum":"  237","line":"        dst->pre_g_128 = (secp256k1_ge_storage (*)[])checked_malloc(cb, size);"},
{"lineNum":"  238","line":"        memcpy(dst->pre_g_128, src->pre_g_128, size);"},
{"lineNum":"  239","line":"    }"},
{"lineNum":"  240","line":"#endif"},
{"lineNum":"  241","line":"}"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx) {"},
{"lineNum":"  244","line":"    return ctx->pre_g != NULL;"},
{"lineNum":"  245","line":"}"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context *ctx) {"},
{"lineNum":"  248","line":"    free(ctx->pre_g);"},
{"lineNum":"  249","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  250","line":"    free(ctx->pre_g_128);"},
{"lineNum":"  251","line":"#endif"},
{"lineNum":"  252","line":"    secp256k1_ecmult_context_init(ctx);"},
{"lineNum":"  253","line":"}"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"/** Convert a number to WNAF notation. The number becomes represented by sum(2^i * wnaf[i], i=0..bits),"},
{"lineNum":"  257","line":" *  with the following guarantees:"},
{"lineNum":"  258","line":" *  - each wnaf[i] is either 0, or an odd integer between -(1<<(w-1) - 1) and (1<<(w-1) - 1)"},
{"lineNum":"  259","line":" *  - two non-zero entries in wnaf are separated by at least w-1 zeroes."},
{"lineNum":"  260","line":" *  - the number of set values in wnaf is returned. This number is at most 256, and at most one more"},
{"lineNum":"  261","line":" *    than the number of bits in the (absolute value) of the input."},
{"lineNum":"  262","line":" */"},
{"lineNum":"  263","line":"static int secp256k1_ecmult_wnaf(int *wnaf, int len, const secp256k1_scalar *a, int w) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  264","line":"    secp256k1_scalar s = *a;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"    int last_set_bit = -1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"    int bit = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"    int sign = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"    int carry = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"    VERIFY_CHECK(wnaf != NULL);"},
{"lineNum":"  271","line":"    VERIFY_CHECK(0 <= len && len <= 256);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"    VERIFY_CHECK(a != NULL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"    VERIFY_CHECK(2 <= w && w <= 31);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"    memset(wnaf, 0, len * sizeof(wnaf[0]));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"    if (secp256k1_scalar_get_bits(&s, 255, 1)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  278","line":"        secp256k1_scalar_negate(&s, &s);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":"        sign = -1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  280","line":"    }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"    while (bit < len) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  283","line":"        int now;"},
{"lineNum":"  284","line":"        int word;"},
{"lineNum":"  285","line":"        if (secp256k1_scalar_get_bits(&s, bit, 1) == (unsigned int)carry) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  286","line":"            bit++;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"            continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":"        }"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"        now = w;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  291","line":"        if (now > len - bit) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"            now = len - bit;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  293","line":"        }"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"        word = secp256k1_scalar_get_bits_var(&s, bit, now) + carry;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"        carry = (word >> (w-1)) & 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"        word -= carry << w;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"        wnaf[bit] = sign * word;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  301","line":"        last_set_bit = bit;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"        bit += now;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"    }"},
{"lineNum":"  305","line":"#ifdef VERIFY"},
{"lineNum":"  306","line":"    CHECK(carry == 0);"},
{"lineNum":"  307","line":"    while (bit < 256) {"},
{"lineNum":"  308","line":"        CHECK(secp256k1_scalar_get_bits(&s, bit++, 1) == 0);"},
{"lineNum":"  309","line":"    }"},
{"lineNum":"  310","line":"#endif"},
{"lineNum":"  311","line":"    return last_set_bit + 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"}"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"struct secp256k1_strauss_point_state {"},
{"lineNum":"  315","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  316","line":"    secp256k1_scalar na_1, na_lam;"},
{"lineNum":"  317","line":"    int wnaf_na_1[130];"},
{"lineNum":"  318","line":"    int wnaf_na_lam[130];"},
{"lineNum":"  319","line":"    int bits_na_1;"},
{"lineNum":"  320","line":"    int bits_na_lam;"},
{"lineNum":"  321","line":"#else"},
{"lineNum":"  322","line":"    int wnaf_na[256];"},
{"lineNum":"  323","line":"    int bits_na;"},
{"lineNum":"  324","line":"#endif"},
{"lineNum":"  325","line":"    size_t input_pos;"},
{"lineNum":"  326","line":"};"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"struct secp256k1_strauss_state {"},
{"lineNum":"  329","line":"    secp256k1_gej* prej;"},
{"lineNum":"  330","line":"    secp256k1_fe* zr;"},
{"lineNum":"  331","line":"    secp256k1_ge* pre_a;"},
{"lineNum":"  332","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  333","line":"    secp256k1_ge* pre_a_lam;"},
{"lineNum":"  334","line":"#endif"},
{"lineNum":"  335","line":"    struct secp256k1_strauss_point_state* ps;"},
{"lineNum":"  336","line":"};"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"static void secp256k1_ecmult_strauss_wnaf(const secp256k1_ecmult_context *ctx, const struct secp256k1_strauss_state *state, secp256k1_gej *r, int num, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  339","line":"    secp256k1_ge tmpa;"},
{"lineNum":"  340","line":"    secp256k1_fe Z;"},
{"lineNum":"  341","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  342","line":"    /* Splitted G factors. */"},
{"lineNum":"  343","line":"    secp256k1_scalar ng_1, ng_128;"},
{"lineNum":"  344","line":"    int wnaf_ng_1[129];"},
{"lineNum":"  345","line":"    int bits_ng_1 = 0;"},
{"lineNum":"  346","line":"    int wnaf_ng_128[129];"},
{"lineNum":"  347","line":"    int bits_ng_128 = 0;"},
{"lineNum":"  348","line":"#else"},
{"lineNum":"  349","line":"    int wnaf_ng[256];"},
{"lineNum":"  350","line":"    int bits_ng = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  351","line":"#endif"},
{"lineNum":"  352","line":"    int i;"},
{"lineNum":"  353","line":"    int bits = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  354","line":"    int np;"},
{"lineNum":"  355","line":"    int no = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"    for (np = 0; np < num; ++np) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  358","line":"        if (secp256k1_scalar_is_zero(&na[np]) || secp256k1_gej_is_infinity(&a[np])) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  359","line":"            continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":"        }"},
{"lineNum":"  361","line":"        state->ps[no].input_pos = np;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  362","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  363","line":"        /* split na into na_1 and na_lam (where na = na_1 + na_lam*lambda, and na_1 and na_lam are ~128 bit) */"},
{"lineNum":"  364","line":"        secp256k1_scalar_split_lambda(&state->ps[no].na_1, &state->ps[no].na_lam, &na[np]);"},
{"lineNum":"  365","line":""},
{"lineNum":"  366","line":"        /* build wnaf representation for na_1 and na_lam. */"},
{"lineNum":"  367","line":"        state->ps[no].bits_na_1   = secp256k1_ecmult_wnaf(state->ps[no].wnaf_na_1,   130, &state->ps[no].na_1,   WINDOW_A);"},
{"lineNum":"  368","line":"        state->ps[no].bits_na_lam = secp256k1_ecmult_wnaf(state->ps[no].wnaf_na_lam, 130, &state->ps[no].na_lam, WINDOW_A);"},
{"lineNum":"  369","line":"        VERIFY_CHECK(state->ps[no].bits_na_1 <= 130);"},
{"lineNum":"  370","line":"        VERIFY_CHECK(state->ps[no].bits_na_lam <= 130);"},
{"lineNum":"  371","line":"        if (state->ps[no].bits_na_1 > bits) {"},
{"lineNum":"  372","line":"            bits = state->ps[no].bits_na_1;"},
{"lineNum":"  373","line":"        }"},
{"lineNum":"  374","line":"        if (state->ps[no].bits_na_lam > bits) {"},
{"lineNum":"  375","line":"            bits = state->ps[no].bits_na_lam;"},
{"lineNum":"  376","line":"        }"},
{"lineNum":"  377","line":"#else"},
{"lineNum":"  378","line":"        /* build wnaf representation for na. */"},
{"lineNum":"  379","line":"        state->ps[no].bits_na     = secp256k1_ecmult_wnaf(state->ps[no].wnaf_na,     256, &na[np],      WINDOW_A);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  380","line":"        if (state->ps[no].bits_na > bits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  381","line":"            bits = state->ps[no].bits_na;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  382","line":"        }"},
{"lineNum":"  383","line":"#endif"},
{"lineNum":"  384","line":"        ++no;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  385","line":"    }"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"    /* Calculate odd multiples of a."},
{"lineNum":"  388","line":"     * All multiples are brought to the same Z \'denominator\', which is stored"},
{"lineNum":"  389","line":"     * in Z. Due to secp256k1\' isomorphism we can do all operations pretending"},
{"lineNum":"  390","line":"     * that the Z coordinate was 1, use affine addition formulae, and correct"},
{"lineNum":"  391","line":"     * the Z coordinate of the result once at the end."},
{"lineNum":"  392","line":"     * The exception is the precomputed G table points, which are actually"},
{"lineNum":"  393","line":"     * affine. Compared to the base used for other points, they have a Z ratio"},
{"lineNum":"  394","line":"     * of 1/Z, so we can use secp256k1_gej_add_zinv_var, which uses the same"},
{"lineNum":"  395","line":"     * isomorphism to efficiently add with a known Z inverse."},
{"lineNum":"  396","line":"     */"},
{"lineNum":"  397","line":"    if (no > 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  398","line":"        /* Compute the odd multiples in Jacobian form. */"},
{"lineNum":"  399","line":"        secp256k1_ecmult_odd_multiples_table(ECMULT_TABLE_SIZE(WINDOW_A), state->prej, state->zr, &a[state->ps[0].input_pos]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  400","line":"        for (np = 1; np < no; ++np) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  401","line":"            secp256k1_gej tmp = a[state->ps[np].input_pos];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  402","line":"#ifdef VERIFY"},
{"lineNum":"  403","line":"            secp256k1_fe_normalize_var(&(state->prej[(np - 1) * ECMULT_TABLE_SIZE(WINDOW_A) + ECMULT_TABLE_SIZE(WINDOW_A) - 1].z));"},
{"lineNum":"  404","line":"#endif"},
{"lineNum":"  405","line":"            secp256k1_gej_rescale(&tmp, &(state->prej[(np - 1) * ECMULT_TABLE_SIZE(WINDOW_A) + ECMULT_TABLE_SIZE(WINDOW_A) - 1].z));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":"            secp256k1_ecmult_odd_multiples_table(ECMULT_TABLE_SIZE(WINDOW_A), state->prej + np * ECMULT_TABLE_SIZE(WINDOW_A), state->zr + np * ECMULT_TABLE_SIZE(WINDOW_A), &tmp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  407","line":"            secp256k1_fe_mul(state->zr + np * ECMULT_TABLE_SIZE(WINDOW_A), state->zr + np * ECMULT_TABLE_SIZE(WINDOW_A), &(a[state->ps[np].input_pos].z));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  408","line":"        }"},
{"lineNum":"  409","line":"        /* Bring them to the same Z denominator. */"},
{"lineNum":"  410","line":"        secp256k1_ge_globalz_set_table_gej(ECMULT_TABLE_SIZE(WINDOW_A) * no, state->pre_a, &Z, state->prej, state->zr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  411","line":"    } else {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  412","line":"        secp256k1_fe_set_int(&Z, 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  413","line":"    }"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  416","line":"    for (np = 0; np < no; ++np) {"},
{"lineNum":"  417","line":"        for (i = 0; i < ECMULT_TABLE_SIZE(WINDOW_A); i++) {"},
{"lineNum":"  418","line":"            secp256k1_ge_mul_lambda(&state->pre_a_lam[np * ECMULT_TABLE_SIZE(WINDOW_A) + i], &state->pre_a[np * ECMULT_TABLE_SIZE(WINDOW_A) + i]);"},
{"lineNum":"  419","line":"        }"},
{"lineNum":"  420","line":"    }"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    if (ng) {"},
{"lineNum":"  423","line":"        /* split ng into ng_1 and ng_128 (where gn = gn_1 + gn_128*2^128, and gn_1 and gn_128 are ~128 bit) */"},
{"lineNum":"  424","line":"        secp256k1_scalar_split_128(&ng_1, &ng_128, ng);"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"        /* Build wnaf representation for ng_1 and ng_128 */"},
{"lineNum":"  427","line":"        bits_ng_1   = secp256k1_ecmult_wnaf(wnaf_ng_1,   129, &ng_1,   WINDOW_G);"},
{"lineNum":"  428","line":"        bits_ng_128 = secp256k1_ecmult_wnaf(wnaf_ng_128, 129, &ng_128, WINDOW_G);"},
{"lineNum":"  429","line":"        if (bits_ng_1 > bits) {"},
{"lineNum":"  430","line":"            bits = bits_ng_1;"},
{"lineNum":"  431","line":"        }"},
{"lineNum":"  432","line":"        if (bits_ng_128 > bits) {"},
{"lineNum":"  433","line":"            bits = bits_ng_128;"},
{"lineNum":"  434","line":"        }"},
{"lineNum":"  435","line":"    }"},
{"lineNum":"  436","line":"#else"},
{"lineNum":"  437","line":"    if (ng) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  438","line":"        bits_ng     = secp256k1_ecmult_wnaf(wnaf_ng,     256, ng,      WINDOW_G);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":"        if (bits_ng > bits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  440","line":"            bits = bits_ng;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  441","line":"        }"},
{"lineNum":"  442","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  443","line":"#endif"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"    secp256k1_gej_set_infinity(r);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"    for (i = bits - 1; i >= 0; i--) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  448","line":"        int n;"},
{"lineNum":"  449","line":"        secp256k1_gej_double_var(r, r, NULL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  450","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  451","line":"        for (np = 0; np < no; ++np) {"},
{"lineNum":"  452","line":"            if (i < state->ps[np].bits_na_1 && (n = state->ps[np].wnaf_na_1[i])) {"},
{"lineNum":"  453","line":"                ECMULT_TABLE_GET_GE(&tmpa, state->pre_a + np * ECMULT_TABLE_SIZE(WINDOW_A), n, WINDOW_A);"},
{"lineNum":"  454","line":"                secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);"},
{"lineNum":"  455","line":"            }"},
{"lineNum":"  456","line":"            if (i < state->ps[np].bits_na_lam && (n = state->ps[np].wnaf_na_lam[i])) {"},
{"lineNum":"  457","line":"                ECMULT_TABLE_GET_GE(&tmpa, state->pre_a_lam + np * ECMULT_TABLE_SIZE(WINDOW_A), n, WINDOW_A);"},
{"lineNum":"  458","line":"                secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);"},
{"lineNum":"  459","line":"            }"},
{"lineNum":"  460","line":"        }"},
{"lineNum":"  461","line":"        if (i < bits_ng_1 && (n = wnaf_ng_1[i])) {"},
{"lineNum":"  462","line":"            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g, n, WINDOW_G);"},
{"lineNum":"  463","line":"            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);"},
{"lineNum":"  464","line":"        }"},
{"lineNum":"  465","line":"        if (i < bits_ng_128 && (n = wnaf_ng_128[i])) {"},
{"lineNum":"  466","line":"            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g_128, n, WINDOW_G);"},
{"lineNum":"  467","line":"            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);"},
{"lineNum":"  468","line":"        }"},
{"lineNum":"  469","line":"#else"},
{"lineNum":"  470","line":"        for (np = 0; np < no; ++np) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  471","line":"            if (i < state->ps[np].bits_na && (n = state->ps[np].wnaf_na[i])) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  472","line":"                ECMULT_TABLE_GET_GE(&tmpa, state->pre_a + np * ECMULT_TABLE_SIZE(WINDOW_A), n, WINDOW_A);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  473","line":"                secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  474","line":"            }"},
{"lineNum":"  475","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  476","line":"        if (i < bits_ng && (n = wnaf_ng[i])) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  477","line":"            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g, n, WINDOW_G);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  478","line":"            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  479","line":"        }"},
{"lineNum":"  480","line":"#endif"},
{"lineNum":"  481","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"    if (!r->infinity) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  484","line":"        secp256k1_fe_mul(&r->z, &r->z, &Z);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  485","line":"    }"},
{"lineNum":"  486","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  487","line":""},
{"lineNum":"  488","line":"static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  489","line":"    secp256k1_gej prej[ECMULT_TABLE_SIZE(WINDOW_A)];"},
{"lineNum":"  490","line":"    secp256k1_fe zr[ECMULT_TABLE_SIZE(WINDOW_A)];"},
{"lineNum":"  491","line":"    secp256k1_ge pre_a[ECMULT_TABLE_SIZE(WINDOW_A)];"},
{"lineNum":"  492","line":"    struct secp256k1_strauss_point_state ps[1];"},
{"lineNum":"  493","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  494","line":"    secp256k1_ge pre_a_lam[ECMULT_TABLE_SIZE(WINDOW_A)];"},
{"lineNum":"  495","line":"#endif"},
{"lineNum":"  496","line":"    struct secp256k1_strauss_state state;"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"    state.prej = prej;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  499","line":"    state.zr = zr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  500","line":"    state.pre_a = pre_a;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  501","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  502","line":"    state.pre_a_lam = pre_a_lam;"},
{"lineNum":"  503","line":"#endif"},
{"lineNum":"  504","line":"    state.ps = ps;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  505","line":"    secp256k1_ecmult_strauss_wnaf(ctx, &state, r, 1, a, na, ng);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  506","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"static size_t secp256k1_strauss_scratch_size(size_t n_points) {"},
{"lineNum":"  509","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  510","line":"    static const size_t point_size = (2 * sizeof(secp256k1_ge) + sizeof(secp256k1_gej) + sizeof(secp256k1_fe)) * ECMULT_TABLE_SIZE(WINDOW_A) + sizeof(struct secp256k1_strauss_point_state) + sizeof(secp256k1_gej) + sizeof(secp256k1_scalar);"},
{"lineNum":"  511","line":"#else"},
{"lineNum":"  512","line":"    static const size_t point_size = (sizeof(secp256k1_ge) + sizeof(secp256k1_gej) + sizeof(secp256k1_fe)) * ECMULT_TABLE_SIZE(WINDOW_A) + sizeof(struct secp256k1_strauss_point_state) + sizeof(secp256k1_gej) + sizeof(secp256k1_scalar);"},
{"lineNum":"  513","line":"#endif"},
{"lineNum":"  514","line":"    return n_points*point_size;"},
{"lineNum":"  515","line":"}"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"static int secp256k1_ecmult_strauss_batch(const secp256k1_ecmult_context *ctx, secp256k1_scratch *scratch, secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n_points, size_t cb_offset) {"},
{"lineNum":"  518","line":"    secp256k1_gej* points;"},
{"lineNum":"  519","line":"    secp256k1_scalar* scalars;"},
{"lineNum":"  520","line":"    struct secp256k1_strauss_state state;"},
{"lineNum":"  521","line":"    size_t i;"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"    secp256k1_gej_set_infinity(r);"},
{"lineNum":"  524","line":"    if (inp_g_sc == NULL && n_points == 0) {"},
{"lineNum":"  525","line":"        return 1;"},
{"lineNum":"  526","line":"    }"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"    if (!secp256k1_scratch_allocate_frame(scratch, secp256k1_strauss_scratch_size(n_points), STRAUSS_SCRATCH_OBJECTS)) {"},
{"lineNum":"  529","line":"        return 0;"},
{"lineNum":"  530","line":"    }"},
{"lineNum":"  531","line":"    points = (secp256k1_gej*)secp256k1_scratch_alloc(scratch, n_points * sizeof(secp256k1_gej));"},
{"lineNum":"  532","line":"    scalars = (secp256k1_scalar*)secp256k1_scratch_alloc(scratch, n_points * sizeof(secp256k1_scalar));"},
{"lineNum":"  533","line":"    state.prej = (secp256k1_gej*)secp256k1_scratch_alloc(scratch, n_points * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_gej));"},
{"lineNum":"  534","line":"    state.zr = (secp256k1_fe*)secp256k1_scratch_alloc(scratch, n_points * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_fe));"},
{"lineNum":"  535","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  536","line":"    state.pre_a = (secp256k1_ge*)secp256k1_scratch_alloc(scratch, n_points * 2 * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_ge));"},
{"lineNum":"  537","line":"    state.pre_a_lam = state.pre_a + n_points * ECMULT_TABLE_SIZE(WINDOW_A);"},
{"lineNum":"  538","line":"#else"},
{"lineNum":"  539","line":"    state.pre_a = (secp256k1_ge*)secp256k1_scratch_alloc(scratch, n_points * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_ge));"},
{"lineNum":"  540","line":"#endif"},
{"lineNum":"  541","line":"    state.ps = (struct secp256k1_strauss_point_state*)secp256k1_scratch_alloc(scratch, n_points * sizeof(struct secp256k1_strauss_point_state));"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"    for (i = 0; i < n_points; i++) {"},
{"lineNum":"  544","line":"        if (!cb(&scalars[i], &points[i] , i+cb_offset, cbdata)) {"},
{"lineNum":"  545","line":"            secp256k1_scratch_deallocate_frame(scratch);"},
{"lineNum":"  546","line":"            return 0;"},
{"lineNum":"  547","line":"        }"},
{"lineNum":"  548","line":"    }"},
{"lineNum":"  549","line":"    secp256k1_ecmult_strauss_wnaf(ctx, &state, r, n_points, points, scalars, inp_g_sc);"},
{"lineNum":"  550","line":"    secp256k1_scratch_deallocate_frame(scratch);"},
{"lineNum":"  551","line":"    return 1;"},
{"lineNum":"  552","line":"}"},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"/* Wrapper for secp256k1_ecmult_multi_func interface */"},
{"lineNum":"  555","line":"static int secp256k1_ecmult_strauss_batch_single(const secp256k1_ecmult_context *actx, secp256k1_scratch *scratch, secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n) {"},
{"lineNum":"  556","line":"    return secp256k1_ecmult_strauss_batch(actx, scratch, r, inp_g_sc, cb, cbdata, n, 0);"},
{"lineNum":"  557","line":"}"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"static size_t secp256k1_strauss_max_points(secp256k1_scratch *scratch) {"},
{"lineNum":"  560","line":"    return secp256k1_scratch_max_allocation(scratch, STRAUSS_SCRATCH_OBJECTS) / secp256k1_strauss_scratch_size(1);"},
{"lineNum":"  561","line":"}"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"/** Convert a number to WNAF notation."},
{"lineNum":"  564","line":" *  The number becomes represented by sum(2^{wi} * wnaf[i], i=0..WNAF_SIZE(w)+1) - return_val."},
{"lineNum":"  565","line":" *  It has the following guarantees:"},
{"lineNum":"  566","line":" *  - each wnaf[i] is either 0 or an odd integer between -(1 << w) and (1 << w)"},
{"lineNum":"  567","line":" *  - the number of words set is always WNAF_SIZE(w)"},
{"lineNum":"  568","line":" *  - the returned skew is 0 or 1"},
{"lineNum":"  569","line":" */"},
{"lineNum":"  570","line":"static int secp256k1_wnaf_fixed(int *wnaf, const secp256k1_scalar *s, int w) {"},
{"lineNum":"  571","line":"    int skew = 0;"},
{"lineNum":"  572","line":"    int pos;"},
{"lineNum":"  573","line":"    int max_pos;"},
{"lineNum":"  574","line":"    int last_w;"},
{"lineNum":"  575","line":"    const secp256k1_scalar *work = s;"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"    if (secp256k1_scalar_is_zero(s)) {"},
{"lineNum":"  578","line":"        for (pos = 0; pos < WNAF_SIZE(w); pos++) {"},
{"lineNum":"  579","line":"            wnaf[pos] = 0;"},
{"lineNum":"  580","line":"        }"},
{"lineNum":"  581","line":"        return 0;"},
{"lineNum":"  582","line":"    }"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"    if (secp256k1_scalar_is_even(s)) {"},
{"lineNum":"  585","line":"        skew = 1;"},
{"lineNum":"  586","line":"    }"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"    wnaf[0] = secp256k1_scalar_get_bits_var(work, 0, w) + skew;"},
{"lineNum":"  589","line":"    /* Compute last window size. Relevant when window size doesn\'t divide the"},
{"lineNum":"  590","line":"     * number of bits in the scalar */"},
{"lineNum":"  591","line":"    last_w = WNAF_BITS - (WNAF_SIZE(w) - 1) * w;"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"    /* Store the position of the first nonzero word in max_pos to allow"},
{"lineNum":"  594","line":"     * skipping leading zeros when calculating the wnaf. */"},
{"lineNum":"  595","line":"    for (pos = WNAF_SIZE(w) - 1; pos > 0; pos--) {"},
{"lineNum":"  596","line":"        int val = secp256k1_scalar_get_bits_var(work, pos * w, pos == WNAF_SIZE(w)-1 ? last_w : w);"},
{"lineNum":"  597","line":"        if(val != 0) {"},
{"lineNum":"  598","line":"            break;"},
{"lineNum":"  599","line":"        }"},
{"lineNum":"  600","line":"        wnaf[pos] = 0;"},
{"lineNum":"  601","line":"    }"},
{"lineNum":"  602","line":"    max_pos = pos;"},
{"lineNum":"  603","line":"    pos = 1;"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"    while (pos <= max_pos) {"},
{"lineNum":"  606","line":"        int val = secp256k1_scalar_get_bits_var(work, pos * w, pos == WNAF_SIZE(w)-1 ? last_w : w);"},
{"lineNum":"  607","line":"        if ((val & 1) == 0) {"},
{"lineNum":"  608","line":"            wnaf[pos - 1] -= (1 << w);"},
{"lineNum":"  609","line":"            wnaf[pos] = (val + 1);"},
{"lineNum":"  610","line":"        } else {"},
{"lineNum":"  611","line":"            wnaf[pos] = val;"},
{"lineNum":"  612","line":"        }"},
{"lineNum":"  613","line":"        /* Set a coefficient to zero if it is 1 or -1 and the proceeding digit"},
{"lineNum":"  614","line":"         * is strictly negative or strictly positive respectively. Only change"},
{"lineNum":"  615","line":"         * coefficients at previous positions because above code assumes that"},
{"lineNum":"  616","line":"         * wnaf[pos - 1] is odd."},
{"lineNum":"  617","line":"         */"},
{"lineNum":"  618","line":"        if (pos >= 2 && ((wnaf[pos - 1] == 1 && wnaf[pos - 2] < 0) || (wnaf[pos - 1] == -1 && wnaf[pos - 2] > 0))) {"},
{"lineNum":"  619","line":"            if (wnaf[pos - 1] == 1) {"},
{"lineNum":"  620","line":"                wnaf[pos - 2] += 1 << w;"},
{"lineNum":"  621","line":"            } else {"},
{"lineNum":"  622","line":"                wnaf[pos - 2] -= 1 << w;"},
{"lineNum":"  623","line":"            }"},
{"lineNum":"  624","line":"            wnaf[pos - 1] = 0;"},
{"lineNum":"  625","line":"        }"},
{"lineNum":"  626","line":"        ++pos;"},
{"lineNum":"  627","line":"    }"},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"    return skew;"},
{"lineNum":"  630","line":"}"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"struct secp256k1_pippenger_point_state {"},
{"lineNum":"  633","line":"    int skew_na;"},
{"lineNum":"  634","line":"    size_t input_pos;"},
{"lineNum":"  635","line":"};"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"struct secp256k1_pippenger_state {"},
{"lineNum":"  638","line":"    int *wnaf_na;"},
{"lineNum":"  639","line":"    struct secp256k1_pippenger_point_state* ps;"},
{"lineNum":"  640","line":"};"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"/*"},
{"lineNum":"  643","line":" * pippenger_wnaf computes the result of a multi-point multiplication as"},
{"lineNum":"  644","line":" * follows: The scalars are brought into wnaf with n_wnaf elements each. Then"},
{"lineNum":"  645","line":" * for every i < n_wnaf, first each point is added to a \"bucket\" corresponding"},
{"lineNum":"  646","line":" * to the point\'s wnaf[i]. Second, the buckets are added together such that"},
{"lineNum":"  647","line":" * r += 1*bucket[0] + 3*bucket[1] + 5*bucket[2] + ..."},
{"lineNum":"  648","line":" */"},
{"lineNum":"  649","line":"static int secp256k1_ecmult_pippenger_wnaf(secp256k1_gej *buckets, int bucket_window, struct secp256k1_pippenger_state *state, secp256k1_gej *r, const secp256k1_scalar *sc, const secp256k1_ge *pt, size_t num) {"},
{"lineNum":"  650","line":"    size_t n_wnaf = WNAF_SIZE(bucket_window+1);"},
{"lineNum":"  651","line":"    size_t np;"},
{"lineNum":"  652","line":"    size_t no = 0;"},
{"lineNum":"  653","line":"    int i;"},
{"lineNum":"  654","line":"    int j;"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"    for (np = 0; np < num; ++np) {"},
{"lineNum":"  657","line":"        if (secp256k1_scalar_is_zero(&sc[np]) || secp256k1_ge_is_infinity(&pt[np])) {"},
{"lineNum":"  658","line":"            continue;"},
{"lineNum":"  659","line":"        }"},
{"lineNum":"  660","line":"        state->ps[no].input_pos = np;"},
{"lineNum":"  661","line":"        state->ps[no].skew_na = secp256k1_wnaf_fixed(&state->wnaf_na[no*n_wnaf], &sc[np], bucket_window+1);"},
{"lineNum":"  662","line":"        no++;"},
{"lineNum":"  663","line":"    }"},
{"lineNum":"  664","line":"    secp256k1_gej_set_infinity(r);"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"    if (no == 0) {"},
{"lineNum":"  667","line":"        return 1;"},
{"lineNum":"  668","line":"    }"},
{"lineNum":"  669","line":""},
{"lineNum":"  670","line":"    for (i = n_wnaf - 1; i >= 0; i--) {"},
{"lineNum":"  671","line":"        secp256k1_gej running_sum;"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"        for(j = 0; j < ECMULT_TABLE_SIZE(bucket_window+2); j++) {"},
{"lineNum":"  674","line":"            secp256k1_gej_set_infinity(&buckets[j]);"},
{"lineNum":"  675","line":"        }"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"        for (np = 0; np < no; ++np) {"},
{"lineNum":"  678","line":"            int n = state->wnaf_na[np*n_wnaf + i];"},
{"lineNum":"  679","line":"            struct secp256k1_pippenger_point_state point_state = state->ps[np];"},
{"lineNum":"  680","line":"            secp256k1_ge tmp;"},
{"lineNum":"  681","line":"            int idx;"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"            if (i == 0) {"},
{"lineNum":"  684","line":"                /* correct for wnaf skew */"},
{"lineNum":"  685","line":"                int skew = point_state.skew_na;"},
{"lineNum":"  686","line":"                if (skew) {"},
{"lineNum":"  687","line":"                    secp256k1_ge_neg(&tmp, &pt[point_state.input_pos]);"},
{"lineNum":"  688","line":"                    secp256k1_gej_add_ge_var(&buckets[0], &buckets[0], &tmp, NULL);"},
{"lineNum":"  689","line":"                }"},
{"lineNum":"  690","line":"            }"},
{"lineNum":"  691","line":"            if (n > 0) {"},
{"lineNum":"  692","line":"                idx = (n - 1)/2;"},
{"lineNum":"  693","line":"                secp256k1_gej_add_ge_var(&buckets[idx], &buckets[idx], &pt[point_state.input_pos], NULL);"},
{"lineNum":"  694","line":"            } else if (n < 0) {"},
{"lineNum":"  695","line":"                idx = -(n + 1)/2;"},
{"lineNum":"  696","line":"                secp256k1_ge_neg(&tmp, &pt[point_state.input_pos]);"},
{"lineNum":"  697","line":"                secp256k1_gej_add_ge_var(&buckets[idx], &buckets[idx], &tmp, NULL);"},
{"lineNum":"  698","line":"            }"},
{"lineNum":"  699","line":"        }"},
{"lineNum":"  700","line":""},
{"lineNum":"  701","line":"        for(j = 0; j < bucket_window; j++) {"},
{"lineNum":"  702","line":"            secp256k1_gej_double_var(r, r, NULL);"},
{"lineNum":"  703","line":"        }"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"        secp256k1_gej_set_infinity(&running_sum);"},
{"lineNum":"  706","line":"        /* Accumulate the sum: bucket[0] + 3*bucket[1] + 5*bucket[2] + 7*bucket[3] + ..."},
{"lineNum":"  707","line":"         *                   = bucket[0] +   bucket[1] +   bucket[2] +   bucket[3] + ..."},
{"lineNum":"  708","line":"         *                   +         2 *  (bucket[1] + 2*bucket[2] + 3*bucket[3] + ...)"},
{"lineNum":"  709","line":"         * using an intermediate running sum:"},
{"lineNum":"  710","line":"         * running_sum = bucket[0] +   bucket[1] +   bucket[2] + ..."},
{"lineNum":"  711","line":"         *"},
{"lineNum":"  712","line":"         * The doubling is done implicitly by deferring the final window doubling (of \'r\')."},
{"lineNum":"  713","line":"         */"},
{"lineNum":"  714","line":"        for(j = ECMULT_TABLE_SIZE(bucket_window+2) - 1; j > 0; j--) {"},
{"lineNum":"  715","line":"            secp256k1_gej_add_var(&running_sum, &running_sum, &buckets[j], NULL);"},
{"lineNum":"  716","line":"            secp256k1_gej_add_var(r, r, &running_sum, NULL);"},
{"lineNum":"  717","line":"        }"},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"        secp256k1_gej_add_var(&running_sum, &running_sum, &buckets[0], NULL);"},
{"lineNum":"  720","line":"        secp256k1_gej_double_var(r, r, NULL);"},
{"lineNum":"  721","line":"        secp256k1_gej_add_var(r, r, &running_sum, NULL);"},
{"lineNum":"  722","line":"    }"},
{"lineNum":"  723","line":"    return 1;"},
{"lineNum":"  724","line":"}"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"/**"},
{"lineNum":"  727","line":" * Returns optimal bucket_window (number of bits of a scalar represented by a"},
{"lineNum":"  728","line":" * set of buckets) for a given number of points."},
{"lineNum":"  729","line":" */"},
{"lineNum":"  730","line":"static int secp256k1_pippenger_bucket_window(size_t n) {"},
{"lineNum":"  731","line":"    int i;"},
{"lineNum":"  732","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  733","line":"    unsigned int size[11]= {1, 4, 20, 57, 136, 235, 1260, 1260, 4420, 7880, 16050};"},
{"lineNum":"  734","line":"#else"},
{"lineNum":"  735","line":"    unsigned int size[11]= {1, 11, 45, 100, 275, 625, 1850, 3400, 9630, 17900, 32800};"},
{"lineNum":"  736","line":"#endif"},
{"lineNum":"  737","line":""},
{"lineNum":"  738","line":"    for (i = 0; i < 11; ++i){"},
{"lineNum":"  739","line":"        if (n <= size[i])"},
{"lineNum":"  740","line":"            return i + 1;"},
{"lineNum":"  741","line":"    }"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"    return PIPPENGER_MAX_BUCKET_WINDOW;"},
{"lineNum":"  745","line":"}"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"/**"},
{"lineNum":"  748","line":" * Returns the maximum optimal number of points for a bucket_window."},
{"lineNum":"  749","line":" */"},
{"lineNum":"  750","line":"static size_t secp256k1_pippenger_bucket_window_inv(int bucket_window) {"},
{"lineNum":"  751","line":"    int i;"},
{"lineNum":"  752","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  753","line":"    int size[11]= {1, 4, 20, 57, 136, 235, 1260, 1260, 4420, 7880, 16050};"},
{"lineNum":"  754","line":"#else"},
{"lineNum":"  755","line":"    int size[11]= {1, 11, 45, 100, 275, 625, 1850, 3400, 9630, 17900, 32800};"},
{"lineNum":"  756","line":"#endif"},
{"lineNum":"  757","line":""},
{"lineNum":"  758","line":"    if (bucket_window == PIPPENGER_MAX_BUCKET_WINDOW )"},
{"lineNum":"  759","line":"        return SIZE_MAX;"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"    else if(bucket_window >= 1 && bucket_window <= 11)"},
{"lineNum":"  762","line":"        return size[bucket_window - 1];"},
{"lineNum":"  763","line":"    return 0;"},
{"lineNum":"  764","line":"}"},
{"lineNum":"  765","line":""},
{"lineNum":"  766","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  767","line":"SECP256K1_INLINE static void secp256k1_ecmult_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_ge *p1, secp256k1_ge *p2) {"},
{"lineNum":"  768","line":"    secp256k1_scalar tmp = *s1;"},
{"lineNum":"  769","line":"    secp256k1_scalar_split_lambda(s1, s2, &tmp);"},
{"lineNum":"  770","line":"    secp256k1_ge_mul_lambda(p2, p1);"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"    if (secp256k1_scalar_is_high(s1)) {"},
{"lineNum":"  773","line":"        secp256k1_scalar_negate(s1, s1);"},
{"lineNum":"  774","line":"        secp256k1_ge_neg(p1, p1);"},
{"lineNum":"  775","line":"    }"},
{"lineNum":"  776","line":"    if (secp256k1_scalar_is_high(s2)) {"},
{"lineNum":"  777","line":"        secp256k1_scalar_negate(s2, s2);"},
{"lineNum":"  778","line":"        secp256k1_ge_neg(p2, p2);"},
{"lineNum":"  779","line":"    }"},
{"lineNum":"  780","line":"}"},
{"lineNum":"  781","line":"#endif"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"/**"},
{"lineNum":"  784","line":" * Returns the scratch size required for a given number of points (excluding"},
{"lineNum":"  785","line":" * base point G) without considering alignment."},
{"lineNum":"  786","line":" */"},
{"lineNum":"  787","line":"static size_t secp256k1_pippenger_scratch_size(size_t n_points, int bucket_window) {"},
{"lineNum":"  788","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  789","line":"    size_t entries = 2*n_points + 2;"},
{"lineNum":"  790","line":"#else"},
{"lineNum":"  791","line":"    size_t entries = n_points + 1;"},
{"lineNum":"  792","line":"#endif"},
{"lineNum":"  793","line":"    size_t entry_size = sizeof(secp256k1_ge) + sizeof(secp256k1_scalar) + sizeof(struct secp256k1_pippenger_point_state) + (WNAF_SIZE(bucket_window+1)+1)*sizeof(int);"},
{"lineNum":"  794","line":"    return ((1<<bucket_window) * sizeof(secp256k1_gej) + sizeof(struct secp256k1_pippenger_state) + entries * entry_size);"},
{"lineNum":"  795","line":"}"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"static int secp256k1_ecmult_pippenger_batch(const secp256k1_ecmult_context *ctx, secp256k1_scratch *scratch, secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n_points, size_t cb_offset) {"},
{"lineNum":"  798","line":"    /* Use 2(n+1) with the endomorphism, n+1 without, when calculating batch"},
{"lineNum":"  799","line":"     * sizes. The reason for +1 is that we add the G scalar to the list of"},
{"lineNum":"  800","line":"     * other scalars. */"},
{"lineNum":"  801","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  802","line":"    size_t entries = 2*n_points + 2;"},
{"lineNum":"  803","line":"#else"},
{"lineNum":"  804","line":"    size_t entries = n_points + 1;"},
{"lineNum":"  805","line":"#endif"},
{"lineNum":"  806","line":"    secp256k1_ge *points;"},
{"lineNum":"  807","line":"    secp256k1_scalar *scalars;"},
{"lineNum":"  808","line":"    secp256k1_gej *buckets;"},
{"lineNum":"  809","line":"    struct secp256k1_pippenger_state *state_space;"},
{"lineNum":"  810","line":"    size_t idx = 0;"},
{"lineNum":"  811","line":"    size_t point_idx = 0;"},
{"lineNum":"  812","line":"    int i, j;"},
{"lineNum":"  813","line":"    int bucket_window;"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":"    (void)ctx;"},
{"lineNum":"  816","line":"    secp256k1_gej_set_infinity(r);"},
{"lineNum":"  817","line":"    if (inp_g_sc == NULL && n_points == 0) {"},
{"lineNum":"  818","line":"        return 1;"},
{"lineNum":"  819","line":"    }"},
{"lineNum":"  820","line":""},
{"lineNum":"  821","line":"    bucket_window = secp256k1_pippenger_bucket_window(n_points);"},
{"lineNum":"  822","line":"    if (!secp256k1_scratch_allocate_frame(scratch, secp256k1_pippenger_scratch_size(n_points, bucket_window), PIPPENGER_SCRATCH_OBJECTS)) {"},
{"lineNum":"  823","line":"        return 0;"},
{"lineNum":"  824","line":"    }"},
{"lineNum":"  825","line":"    points = (secp256k1_ge *) secp256k1_scratch_alloc(scratch, entries * sizeof(*points));"},
{"lineNum":"  826","line":"    scalars = (secp256k1_scalar *) secp256k1_scratch_alloc(scratch, entries * sizeof(*scalars));"},
{"lineNum":"  827","line":"    state_space = (struct secp256k1_pippenger_state *) secp256k1_scratch_alloc(scratch, sizeof(*state_space));"},
{"lineNum":"  828","line":"    state_space->ps = (struct secp256k1_pippenger_point_state *) secp256k1_scratch_alloc(scratch, entries * sizeof(*state_space->ps));"},
{"lineNum":"  829","line":"    state_space->wnaf_na = (int *) secp256k1_scratch_alloc(scratch, entries*(WNAF_SIZE(bucket_window+1)) * sizeof(int));"},
{"lineNum":"  830","line":"    buckets = (secp256k1_gej *) secp256k1_scratch_alloc(scratch, (1<<bucket_window) * sizeof(*buckets));"},
{"lineNum":"  831","line":""},
{"lineNum":"  832","line":"    if (inp_g_sc != NULL) {"},
{"lineNum":"  833","line":"        scalars[0] = *inp_g_sc;"},
{"lineNum":"  834","line":"        points[0] = secp256k1_ge_const_g;"},
{"lineNum":"  835","line":"        idx++;"},
{"lineNum":"  836","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  837","line":"        secp256k1_ecmult_endo_split(&scalars[0], &scalars[1], &points[0], &points[1]);"},
{"lineNum":"  838","line":"        idx++;"},
{"lineNum":"  839","line":"#endif"},
{"lineNum":"  840","line":"    }"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"    while (point_idx < n_points) {"},
{"lineNum":"  843","line":"        secp256k1_gej point;"},
{"lineNum":"  844","line":"        if (!cb(&scalars[idx], &point, point_idx + cb_offset, cbdata)) {"},
{"lineNum":"  845","line":"            secp256k1_scratch_deallocate_frame(scratch);"},
{"lineNum":"  846","line":"            return 0;"},
{"lineNum":"  847","line":"        }"},
{"lineNum":"  848","line":"        secp256k1_ge_set_gej(&points[idx], &point);"},
{"lineNum":"  849","line":"        idx++;"},
{"lineNum":"  850","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  851","line":"        secp256k1_ecmult_endo_split(&scalars[idx - 1], &scalars[idx], &points[idx - 1], &points[idx]);"},
{"lineNum":"  852","line":"        idx++;"},
{"lineNum":"  853","line":"#endif"},
{"lineNum":"  854","line":"        point_idx++;"},
{"lineNum":"  855","line":"    }"},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"    secp256k1_ecmult_pippenger_wnaf(buckets, bucket_window, state_space, r, scalars, points, idx);"},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"    /* Clear data */"},
{"lineNum":"  860","line":"    for(i = 0; (size_t)i < idx; i++) {"},
{"lineNum":"  861","line":"        secp256k1_scalar_clear(&scalars[i]);"},
{"lineNum":"  862","line":"        state_space->ps[i].skew_na = 0;"},
{"lineNum":"  863","line":"        for(j = 0; j < WNAF_SIZE(bucket_window+1); j++) {"},
{"lineNum":"  864","line":"            state_space->wnaf_na[i * WNAF_SIZE(bucket_window+1) + j] = 0;"},
{"lineNum":"  865","line":"        }"},
{"lineNum":"  866","line":"    }"},
{"lineNum":"  867","line":"    for(i = 0; i < 1<<bucket_window; i++) {"},
{"lineNum":"  868","line":"        secp256k1_gej_clear(&buckets[i]);"},
{"lineNum":"  869","line":"    }"},
{"lineNum":"  870","line":"    secp256k1_scratch_deallocate_frame(scratch);"},
{"lineNum":"  871","line":"    return 1;"},
{"lineNum":"  872","line":"}"},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":""},
{"lineNum":"  875","line":"/* Wrapper for secp256k1_ecmult_multi_func interface */"},
{"lineNum":"  876","line":"static int secp256k1_ecmult_pippenger_batch_single(const secp256k1_ecmult_context *actx, secp256k1_scratch *scratch, secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n) {"},
{"lineNum":"  877","line":"    return secp256k1_ecmult_pippenger_batch(actx, scratch, r, inp_g_sc, cb, cbdata, n, 0);"},
{"lineNum":"  878","line":"}"},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"/**"},
{"lineNum":"  881","line":" * Returns the maximum number of points in addition to G that can be used with"},
{"lineNum":"  882","line":" * a given scratch space. The function ensures that fewer points may also be"},
{"lineNum":"  883","line":" * used."},
{"lineNum":"  884","line":" */"},
{"lineNum":"  885","line":"static size_t secp256k1_pippenger_max_points(secp256k1_scratch *scratch) {"},
{"lineNum":"  886","line":"    size_t max_alloc = secp256k1_scratch_max_allocation(scratch, PIPPENGER_SCRATCH_OBJECTS);"},
{"lineNum":"  887","line":"    int bucket_window;"},
{"lineNum":"  888","line":"    size_t res = 0;"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"    for (bucket_window = 1; bucket_window <= PIPPENGER_MAX_BUCKET_WINDOW; bucket_window++) {"},
{"lineNum":"  891","line":"        size_t n_points;"},
{"lineNum":"  892","line":"        size_t max_points = secp256k1_pippenger_bucket_window_inv(bucket_window);"},
{"lineNum":"  893","line":"        size_t space_for_points;"},
{"lineNum":"  894","line":"        size_t space_overhead;"},
{"lineNum":"  895","line":"        size_t entry_size = sizeof(secp256k1_ge) + sizeof(secp256k1_scalar) + sizeof(struct secp256k1_pippenger_point_state) + (WNAF_SIZE(bucket_window+1)+1)*sizeof(int);"},
{"lineNum":"  896","line":""},
{"lineNum":"  897","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  898","line":"        entry_size = 2*entry_size;"},
{"lineNum":"  899","line":"#endif"},
{"lineNum":"  900","line":"        space_overhead = ((1<<bucket_window) * sizeof(secp256k1_gej) + entry_size + sizeof(struct secp256k1_pippenger_state));"},
{"lineNum":"  901","line":"        if (space_overhead > max_alloc) {"},
{"lineNum":"  902","line":"            break;"},
{"lineNum":"  903","line":"        }"},
{"lineNum":"  904","line":"        space_for_points = max_alloc - space_overhead;"},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":"        n_points = space_for_points/entry_size;"},
{"lineNum":"  907","line":"        n_points = n_points > max_points ? max_points : n_points;"},
{"lineNum":"  908","line":"        if (n_points > res) {"},
{"lineNum":"  909","line":"            res = n_points;"},
{"lineNum":"  910","line":"        }"},
{"lineNum":"  911","line":"        if (n_points < max_points) {"},
{"lineNum":"  912","line":"            /* A larger bucket_window may support even more points. But if we"},
{"lineNum":"  913","line":"             * would choose that then the caller couldn\'t safely use any number"},
{"lineNum":"  914","line":"             * smaller than what this function returns */"},
{"lineNum":"  915","line":"            break;"},
{"lineNum":"  916","line":"        }"},
{"lineNum":"  917","line":"    }"},
{"lineNum":"  918","line":"    return res;"},
{"lineNum":"  919","line":"}"},
{"lineNum":"  920","line":""},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"typedef int (*secp256k1_ecmult_multi_func)(const secp256k1_ecmult_context*, secp256k1_scratch*, secp256k1_gej*, const secp256k1_scalar*, secp256k1_ecmult_multi_callback cb, void*, size_t);"},
{"lineNum":"  923","line":"static int secp256k1_ecmult_multi_var(const secp256k1_ecmult_context *ctx, secp256k1_scratch *scratch, secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n) {"},
{"lineNum":"  924","line":"    size_t i;"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"    int (*f)(const secp256k1_ecmult_context*, secp256k1_scratch*, secp256k1_gej*, const secp256k1_scalar*, secp256k1_ecmult_multi_callback cb, void*, size_t, size_t);"},
{"lineNum":"  927","line":"    size_t max_points;"},
{"lineNum":"  928","line":"    size_t n_batches;"},
{"lineNum":"  929","line":"    size_t n_batch_points;"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"    secp256k1_gej_set_infinity(r);"},
{"lineNum":"  932","line":"    if (inp_g_sc == NULL && n == 0) {"},
{"lineNum":"  933","line":"        return 1;"},
{"lineNum":"  934","line":"    } else if (n == 0) {"},
{"lineNum":"  935","line":"        secp256k1_scalar szero;"},
{"lineNum":"  936","line":"        secp256k1_scalar_set_int(&szero, 0);"},
{"lineNum":"  937","line":"        secp256k1_ecmult(ctx, r, r, &szero, inp_g_sc);"},
{"lineNum":"  938","line":"        return 1;"},
{"lineNum":"  939","line":"    }"},
{"lineNum":"  940","line":""},
{"lineNum":"  941","line":"    max_points = secp256k1_pippenger_max_points(scratch);"},
{"lineNum":"  942","line":"    if (max_points == 0) {"},
{"lineNum":"  943","line":"        return 0;"},
{"lineNum":"  944","line":"    } else if (max_points > ECMULT_MAX_POINTS_PER_BATCH) {"},
{"lineNum":"  945","line":"        max_points = ECMULT_MAX_POINTS_PER_BATCH;"},
{"lineNum":"  946","line":"    }"},
{"lineNum":"  947","line":"    n_batches = (n+max_points-1)/max_points;"},
{"lineNum":"  948","line":"    n_batch_points = (n+n_batches-1)/n_batches;"},
{"lineNum":"  949","line":""},
{"lineNum":"  950","line":"    if (n_batch_points >= ECMULT_PIPPENGER_THRESHOLD) {"},
{"lineNum":"  951","line":"        f = secp256k1_ecmult_pippenger_batch;"},
{"lineNum":"  952","line":"    } else {"},
{"lineNum":"  953","line":"        max_points = secp256k1_strauss_max_points(scratch);"},
{"lineNum":"  954","line":"        if (max_points == 0) {"},
{"lineNum":"  955","line":"            return 0;"},
{"lineNum":"  956","line":"        }"},
{"lineNum":"  957","line":"        n_batches = (n+max_points-1)/max_points;"},
{"lineNum":"  958","line":"        n_batch_points = (n+n_batches-1)/n_batches;"},
{"lineNum":"  959","line":"        f = secp256k1_ecmult_strauss_batch;"},
{"lineNum":"  960","line":"    }"},
{"lineNum":"  961","line":"    for(i = 0; i < n_batches; i++) {"},
{"lineNum":"  962","line":"        size_t nbp = n < n_batch_points ? n : n_batch_points;"},
{"lineNum":"  963","line":"        size_t offset = n_batch_points*i;"},
{"lineNum":"  964","line":"        secp256k1_gej tmp;"},
{"lineNum":"  965","line":"        if (!f(ctx, scratch, &tmp, i == 0 ? inp_g_sc : NULL, cb, cbdata, nbp, offset)) {"},
{"lineNum":"  966","line":"            return 0;"},
{"lineNum":"  967","line":"        }"},
{"lineNum":"  968","line":"        secp256k1_gej_add_var(r, r, &tmp, NULL);"},
{"lineNum":"  969","line":"        n -= nbp;"},
{"lineNum":"  970","line":"    }"},
{"lineNum":"  971","line":"    return 1;"},
{"lineNum":"  972","line":"}"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"#endif"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "f4grumble_debug", "date" : "2023-08-29 14:59:42", "instrumented" : 92, "covered" : 0,};
var merged_data = [];
