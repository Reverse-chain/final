var data = {lines:[
{"lineNum":"    1","line":"#include \"../fuzzing_utilities.h\""},
{"lineNum":"    2","line":"#include \"../FuzzedDataProvider.h\""},
{"lineNum":"    3","line":"#include \"../../libspark/mint_transaction.h\""},
{"lineNum":"    4","line":"#include <cassert>"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"extern \"C\" int LLVMFuzzerTestOneInput(uint8_t *buf, size_t len) {","class":"lineCov","hits":"1","order":"132",},
{"lineNum":"    7","line":"    FuzzedDataProvider fdp(buf, len);","class":"lineCov","hits":"1","order":"133",},
{"lineNum":"    8","line":"    FuzzedSecp256k1Object fsp(&fdp);","class":"lineCov","hits":"1","order":"135",},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"    const spark::Params* params;"},
{"lineNum":"   11","line":"    params = spark::Params::get_default();","class":"lineCov","hits":"1","order":"136",},
{"lineNum":"   12","line":"    const size_t t = fdp.ConsumeIntegral<uint8_t>();","class":"lineCov","hits":"1","order":"137",},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    spark::SpendKey spend_key(params);","class":"lineCov","hits":"1","order":"138",},
{"lineNum":"   15","line":"    spark::FullViewKey full_view_key(spend_key);","class":"lineCov","hits":"1","order":"139",},
{"lineNum":"   16","line":"    spark::IncomingViewKey incoming_view_key(full_view_key);","class":"lineCov","hits":"1","order":"140",},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"    std::vector<spark::MintedCoinData> outputs;","class":"lineCov","hits":"1","order":"141",},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"    for (size_t i = 0; i < t; i++) {","class":"lineCov","hits":"1","order":"134",},
{"lineNum":"   21","line":"        spark::MintedCoinData output;","class":"lineCov","hits":"1","order":"1367",},
{"lineNum":"   22","line":"        output.address = spark::Address(incoming_view_key, fdp.ConsumeIntegral<uint64_t>());","class":"lineCov","hits":"1","order":"1368",},
{"lineNum":"   23","line":"        output.v = fdp.ConsumeIntegral<int>();","class":"lineCov","hits":"1","order":"1369",},
{"lineNum":"   24","line":"        output.memo = fdp.ConsumeBytesAsString(len);","class":"lineCov","hits":"1","order":"1366",},
{"lineNum":"   25","line":"        outputs.emplace_back(output);","class":"lineCov","hits":"1","order":"1365",},
{"lineNum":"   26","line":"    }","class":"lineCov","hits":"1","order":"1364",},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    spark::MintTransaction mint(params, outputs, fdp.ConsumeBytes<unsigned char>(spark::SCALAR_ENCODING));","class":"lineCov","hits":"1","order":"131",},
{"lineNum":"   29","line":"    assert(mint.verify());","class":"lineCov","hits":"1","order":"130",},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    return 0;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"}","class":"lineNoCov","hits":"0",},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "", "date" : "2023-08-28 11:28:35", "instrumented" : 19, "covered" : 18,};
var merged_data = [];
