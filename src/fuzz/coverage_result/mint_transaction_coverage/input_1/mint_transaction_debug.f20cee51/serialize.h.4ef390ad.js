var data = {lines:[
{"lineNum":"    1","line":"// Copyright (c) 2009-2010 Satoshi Nakamoto"},
{"lineNum":"    2","line":"// Copyright (c) 2009-2016 The Bitcoin Core developers"},
{"lineNum":"    3","line":"// Distributed under the MIT software license, see the accompanying"},
{"lineNum":"    4","line":"// file COPYING or http://www.opensource.org/licenses/mit-license.php."},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"#ifndef BITCOIN_SERIALIZE_H"},
{"lineNum":"    7","line":"#define BITCOIN_SERIALIZE_H"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#include \"compat/endian.h\""},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"#include <algorithm>"},
{"lineNum":"   12","line":"#include <assert.h>"},
{"lineNum":"   13","line":"#include <ios>"},
{"lineNum":"   14","line":"#include <limits>"},
{"lineNum":"   15","line":"#include <map>"},
{"lineNum":"   16","line":"#include <memory>"},
{"lineNum":"   17","line":"#include <set>"},
{"lineNum":"   18","line":"#include <stdint.h>"},
{"lineNum":"   19","line":"#include <string>"},
{"lineNum":"   20","line":"#include <string.h>"},
{"lineNum":"   21","line":"#include <unordered_set>"},
{"lineNum":"   22","line":"#include <unordered_map>"},
{"lineNum":"   23","line":"#include <utility>"},
{"lineNum":"   24","line":"#include <vector>"},
{"lineNum":"   25","line":"#include <deque>"},
{"lineNum":"   26","line":"#include \"prevector.h\""},
{"lineNum":"   27","line":"#include <memory>"},
{"lineNum":"   28","line":"#include \"definition.h\""},
{"lineNum":"   29","line":"#include <boost/optional.hpp>"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"static const unsigned int MAX_SIZE = 0x02000000;"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"/**"},
{"lineNum":"   35","line":" * Dummy data type to identify deserializing constructors."},
{"lineNum":"   36","line":" *"},
{"lineNum":"   37","line":" * By convention, a constructor of a type T with signature"},
{"lineNum":"   38","line":" *"},
{"lineNum":"   39","line":" *   template <typename Stream> T::T(deserialize_type, Stream& s)"},
{"lineNum":"   40","line":" *"},
{"lineNum":"   41","line":" * is a deserializing constructor, which builds the type by"},
{"lineNum":"   42","line":" * deserializing it from s. If T contains const fields, this"},
{"lineNum":"   43","line":" * is likely the only way to do so."},
{"lineNum":"   44","line":" */"},
{"lineNum":"   45","line":"struct deserialize_type {};"},
{"lineNum":"   46","line":"constexpr deserialize_type deserialize {};"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"#define ADD_DESERIALIZE_CTOR(CLASS_NAME)                              \\"},
{"lineNum":"   49","line":"template <typename Stream>                                            \\"},
{"lineNum":"   50","line":"CLASS_NAME(deserialize_type, Stream& s) {                             \\"},
{"lineNum":"   51","line":"    Unserialize(s);                                                   \\"},
{"lineNum":"   52","line":"}                                                                     \\"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"/**"},
{"lineNum":"   55","line":" * Used to bypass the rule against non-const reference to temporary"},
{"lineNum":"   56","line":" * where it makes sense with wrappers such as CFlatData or CTxDB"},
{"lineNum":"   57","line":" */"},
{"lineNum":"   58","line":"template<typename T>"},
{"lineNum":"   59","line":"inline T& REF(const T& val)"},
{"lineNum":"   60","line":"{"},
{"lineNum":"   61","line":"    return const_cast<T&>(val);"},
{"lineNum":"   62","line":"}"},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"/**"},
{"lineNum":"   65","line":" * Used to acquire a non-const pointer \"this\" to generate bodies"},
{"lineNum":"   66","line":" * of const serialization operations from a template"},
{"lineNum":"   67","line":" */"},
{"lineNum":"   68","line":"template<typename T>"},
{"lineNum":"   69","line":"inline T* NCONST_PTR(const T* val)"},
{"lineNum":"   70","line":"{","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   71","line":"    return const_cast<T*>(val);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   72","line":"}"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"/**"},
{"lineNum":"   75","line":" * Get begin pointer of vector (non-const version)."},
{"lineNum":"   76","line":" * @note These functions avoid the undefined case of indexing into an empty"},
{"lineNum":"   77","line":" * vector, as well as that of indexing after the end of the vector."},
{"lineNum":"   78","line":" */"},
{"lineNum":"   79","line":"template <typename V>"},
{"lineNum":"   80","line":"inline typename V::value_type* begin_ptr(V& v)"},
{"lineNum":"   81","line":"{"},
{"lineNum":"   82","line":"    return v.empty() ? NULL : &v[0];"},
{"lineNum":"   83","line":"}"},
{"lineNum":"   84","line":"/** Get begin pointer of vector (const version) */"},
{"lineNum":"   85","line":"template <typename V>"},
{"lineNum":"   86","line":"inline const typename V::value_type* begin_ptr(const V& v)"},
{"lineNum":"   87","line":"{"},
{"lineNum":"   88","line":"    return v.empty() ? NULL : &v[0];"},
{"lineNum":"   89","line":"}"},
{"lineNum":"   90","line":"/** Get end pointer of vector (non-const version) */"},
{"lineNum":"   91","line":"template <typename V>"},
{"lineNum":"   92","line":"inline typename V::value_type* end_ptr(V& v)"},
{"lineNum":"   93","line":"{"},
{"lineNum":"   94","line":"    return v.empty() ? NULL : (&v[0] + v.size());"},
{"lineNum":"   95","line":"}"},
{"lineNum":"   96","line":"/** Get end pointer of vector (const version) */"},
{"lineNum":"   97","line":"template <typename V>"},
{"lineNum":"   98","line":"inline const typename V::value_type* end_ptr(const V& v)"},
{"lineNum":"   99","line":"{"},
{"lineNum":"  100","line":"    return v.empty() ? NULL : (&v[0] + v.size());"},
{"lineNum":"  101","line":"}"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"/*"},
{"lineNum":"  104","line":" * Lowest-level serialization and conversion."},
{"lineNum":"  105","line":" * @note Sizes of these types are verified in the tests"},
{"lineNum":"  106","line":" */"},
{"lineNum":"  107","line":"template<typename Stream> inline void ser_writedata8(Stream &s, uint8_t obj)"},
{"lineNum":"  108","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":"    s.write((char*)&obj, 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  111","line":"template<typename Stream> inline void ser_writedata16(Stream &s, uint16_t obj)"},
{"lineNum":"  112","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":"    obj = htole16(obj);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":"    s.write((char*)&obj, 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)"},
{"lineNum":"  117","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  118","line":"    obj = htole32(obj);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"    s.write((char*)&obj, 4);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  121","line":"template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)"},
{"lineNum":"  122","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  123","line":"    obj = htole64(obj);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"    s.write((char*)&obj, 8);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"template<typename Stream> inline void ser_writedata32be(Stream &s, uint32_t obj)"},
{"lineNum":"  128","line":"{"},
{"lineNum":"  129","line":"    obj = htobe32(obj);"},
{"lineNum":"  130","line":"    s.write((char*)&obj, 4);"},
{"lineNum":"  131","line":"}"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"template<typename Stream> inline uint8_t ser_readdata8(Stream &s)"},
{"lineNum":"  134","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  135","line":"    uint8_t obj;"},
{"lineNum":"  136","line":"    s.read((char*)&obj, 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"    return obj;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  138","line":"}"},
{"lineNum":"  139","line":"template<typename Stream> inline uint16_t ser_readdata16(Stream &s)"},
{"lineNum":"  140","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  141","line":"    uint16_t obj;"},
{"lineNum":"  142","line":"    s.read((char*)&obj, 2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"    return le16toh(obj);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"}"},
{"lineNum":"  145","line":"template<typename Stream> inline uint32_t ser_readdata32(Stream &s)"},
{"lineNum":"  146","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  147","line":"    uint32_t obj;"},
{"lineNum":"  148","line":"    s.read((char*)&obj, 4);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"    return le32toh(obj);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"}"},
{"lineNum":"  151","line":"template<typename Stream> inline uint64_t ser_readdata64(Stream &s)"},
{"lineNum":"  152","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  153","line":"    uint64_t obj;"},
{"lineNum":"  154","line":"    s.read((char*)&obj, 8);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"    return le64toh(obj);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"}"},
{"lineNum":"  157","line":"template<typename Stream> inline uint32_t ser_readdata32be(Stream &s)"},
{"lineNum":"  158","line":"{"},
{"lineNum":"  159","line":"    uint32_t obj;"},
{"lineNum":"  160","line":"    s.read((char*)&obj, 4);"},
{"lineNum":"  161","line":"    return be32toh(obj);"},
{"lineNum":"  162","line":"}"},
{"lineNum":"  163","line":"inline uint64_t ser_double_to_uint64(double x)"},
{"lineNum":"  164","line":"{"},
{"lineNum":"  165","line":"    union { double x; uint64_t y; } tmp;"},
{"lineNum":"  166","line":"    tmp.x = x;"},
{"lineNum":"  167","line":"    return tmp.y;"},
{"lineNum":"  168","line":"}"},
{"lineNum":"  169","line":"inline uint32_t ser_float_to_uint32(float x)"},
{"lineNum":"  170","line":"{"},
{"lineNum":"  171","line":"    union { float x; uint32_t y; } tmp;"},
{"lineNum":"  172","line":"    tmp.x = x;"},
{"lineNum":"  173","line":"    return tmp.y;"},
{"lineNum":"  174","line":"}"},
{"lineNum":"  175","line":"inline double ser_uint64_to_double(uint64_t y)"},
{"lineNum":"  176","line":"{"},
{"lineNum":"  177","line":"    union { double x; uint64_t y; } tmp;"},
{"lineNum":"  178","line":"    tmp.y = y;"},
{"lineNum":"  179","line":"    return tmp.x;"},
{"lineNum":"  180","line":"}"},
{"lineNum":"  181","line":"inline float ser_uint32_to_float(uint32_t y)"},
{"lineNum":"  182","line":"{"},
{"lineNum":"  183","line":"    union { float x; uint32_t y; } tmp;"},
{"lineNum":"  184","line":"    tmp.y = y;"},
{"lineNum":"  185","line":"    return tmp.x;"},
{"lineNum":"  186","line":"}"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"/////////////////////////////////////////////////////////////////"},
{"lineNum":"  190","line":"//"},
{"lineNum":"  191","line":"// Templates for serializing to anything that looks like a stream,"},
{"lineNum":"  192","line":"// i.e. anything that supports .read(char*, size_t) and .write(char*, size_t)"},
{"lineNum":"  193","line":"//"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"class CSizeComputer;"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"enum"},
{"lineNum":"  198","line":"{"},
{"lineNum":"  199","line":"    // primary actions"},
{"lineNum":"  200","line":"    SER_NETWORK         = (1 << 0),"},
{"lineNum":"  201","line":"    SER_DISK            = (1 << 1),"},
{"lineNum":"  202","line":"    SER_GETHASH         = (1 << 2),"},
{"lineNum":"  203","line":"};"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"#define READWRITE(obj)      (::SerReadWrite(s, (obj), ser_action))"},
{"lineNum":"  206","line":"#define READWRITEMANY(...)      (::SerReadWriteMany(s, ser_action, __VA_ARGS__))"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"/**"},
{"lineNum":"  209","line":" * Implement three methods for serializable objects. These are actually wrappers over"},
{"lineNum":"  210","line":" * \"SerializationOp\" template, which implements the body of each class\' serialization"},
{"lineNum":"  211","line":" * code. Adding \"ADD_SERIALIZE_METHODS\" in the body of the class causes these wrappers to be"},
{"lineNum":"  212","line":" * added as members."},
{"lineNum":"  213","line":" */"},
{"lineNum":"  214","line":"#define ADD_SERIALIZE_METHODS                                         \\"},
{"lineNum":"  215","line":"    template<typename Stream>                                         \\"},
{"lineNum":"  216","line":"    void Serialize(Stream& s) const {                                 \\"},
{"lineNum":"  217","line":"        NCONST_PTR(this)->SerializationOp(s, CSerActionSerialize());  \\"},
{"lineNum":"  218","line":"    }                                                                 \\"},
{"lineNum":"  219","line":"    template<typename Stream>                                         \\"},
{"lineNum":"  220","line":"    void Unserialize(Stream& s) {                                     \\"},
{"lineNum":"  221","line":"        SerializationOp(s, CSerActionUnserialize());                  \\"},
{"lineNum":"  222","line":"    }"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"template<typename Stream> inline void Serialize(Stream& s, char a    ) { ser_writedata8(s, a); } // TODO Get rid of bare char","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  225","line":"template<typename Stream> inline void Serialize(Stream& s, int8_t a  ) { ser_writedata8(s, a); }"},
{"lineNum":"  226","line":"template<typename Stream> inline void Serialize(Stream& s, uint8_t a ) { ser_writedata8(s, a); }"},
{"lineNum":"  227","line":"template<typename Stream> inline void Serialize(Stream& s, int16_t a ) { ser_writedata16(s, a); }"},
{"lineNum":"  228","line":"template<typename Stream> inline void Serialize(Stream& s, uint16_t a) { ser_writedata16(s, a); }"},
{"lineNum":"  229","line":"template<typename Stream> inline void Serialize(Stream& s, int32_t a ) { ser_writedata32(s, a); }"},
{"lineNum":"  230","line":"template<typename Stream> inline void Serialize(Stream& s, uint32_t a) { ser_writedata32(s, a); }"},
{"lineNum":"  231","line":"template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_writedata64(s, a); }"},
{"lineNum":"  232","line":"template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  233","line":"template<typename Stream> inline void Serialize(Stream& s, float a   ) { ser_writedata32(s, ser_float_to_uint32(a)); }"},
{"lineNum":"  234","line":"template<typename Stream> inline void Serialize(Stream& s, double a  ) { ser_writedata64(s, ser_double_to_uint64(a)); }"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"template<typename Stream> inline void Unserialize(Stream& s, char& a    ) { a = ser_readdata8(s); } // TODO Get rid of bare char","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  237","line":"template<typename Stream> inline void Unserialize(Stream& s, int8_t& a  ) { a = ser_readdata8(s); }"},
{"lineNum":"  238","line":"template<typename Stream> inline void Unserialize(Stream& s, uint8_t& a ) { a = ser_readdata8(s); }"},
{"lineNum":"  239","line":"template<typename Stream> inline void Unserialize(Stream& s, int16_t& a ) { a = ser_readdata16(s); }"},
{"lineNum":"  240","line":"template<typename Stream> inline void Unserialize(Stream& s, uint16_t& a) { a = ser_readdata16(s); }"},
{"lineNum":"  241","line":"template<typename Stream> inline void Unserialize(Stream& s, int32_t& a ) { a = ser_readdata32(s); }"},
{"lineNum":"  242","line":"template<typename Stream> inline void Unserialize(Stream& s, uint32_t& a) { a = ser_readdata32(s); }"},
{"lineNum":"  243","line":"template<typename Stream> inline void Unserialize(Stream& s, int64_t& a ) { a = ser_readdata64(s); }"},
{"lineNum":"  244","line":"template<typename Stream> inline void Unserialize(Stream& s, uint64_t& a) { a = ser_readdata64(s); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  245","line":"template<typename Stream> inline void Unserialize(Stream& s, float& a   ) { a = ser_uint32_to_float(ser_readdata32(s)); }"},
{"lineNum":"  246","line":"template<typename Stream> inline void Unserialize(Stream& s, double& a  ) { a = ser_uint64_to_double(ser_readdata64(s)); }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"template<typename Stream> inline void Serialize(Stream& s, bool a)    { char f=a; ser_writedata8(s, f); }"},
{"lineNum":"  249","line":"template<typename Stream> inline void Unserialize(Stream& s, bool& a) { char f=ser_readdata8(s); a=f; }"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"template <typename T> size_t GetSerializeSize(const T& t, int nType, int nVersion = 0);"},
{"lineNum":"  252","line":"template <typename S, typename T> size_t GetSerializeSize(const S& s, const T& t);"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"/**"},
{"lineNum":"  255","line":" * Please note that Firo drops support for big-endian architectures and thus these functions are simple read/writes"},
{"lineNum":"  256","line":" * It significantly improves MTP structures serialization performance"},
{"lineNum":"  257","line":" */"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"template <typename ItemType>"},
{"lineNum":"  260","line":"using CArithType = typename std::enable_if<std::is_arithmetic<ItemType>::value>::type;"},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"template<typename Stream, typename ItemType, int ArraySize, typename = CArithType<ItemType>>"},
{"lineNum":"  263","line":"inline void Serialize(Stream &s, const ItemType (&a) [ArraySize]) { s.write((const char *)&a, sizeof(a)); }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"template<typename Stream, typename ItemType, int ArraySize, typename = CArithType<ItemType>>"},
{"lineNum":"  266","line":"inline void Unserialize(Stream &s, ItemType (&a)[ArraySize]) { s.read((char *)&a, sizeof(a)); }"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"template<typename Stream, typename ItemType, int ArraySize1, int ArraySize2, typename = CArithType<ItemType>>"},
{"lineNum":"  269","line":"inline void Serialize(Stream &s, const ItemType (&a)[ArraySize1][ArraySize2]) { s.write((const char *)&a, sizeof(a)); }"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"template<typename Stream, typename ItemType, int ArraySize1, int ArraySize2, typename = CArithType<ItemType>>"},
{"lineNum":"  272","line":"inline void Unserialize(Stream &s, ItemType (&a)[ArraySize1][ArraySize2]) { s.read((char *)&a, sizeof(a)); }"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"/**"},
{"lineNum":"  275","line":" * Compact Size"},
{"lineNum":"  276","line":" * size <  253        -- 1 byte"},
{"lineNum":"  277","line":" * size <= USHRT_MAX  -- 3 bytes  (253 + 2 bytes)"},
{"lineNum":"  278","line":" * size <= UINT_MAX   -- 5 bytes  (254 + 4 bytes)"},
{"lineNum":"  279","line":" * size >  UINT_MAX   -- 9 bytes  (255 + 8 bytes)"},
{"lineNum":"  280","line":" */"},
{"lineNum":"  281","line":"inline unsigned int GetSizeOfCompactSize(uint64_t nSize)"},
{"lineNum":"  282","line":"{"},
{"lineNum":"  283","line":"    if (nSize < 253)             return sizeof(unsigned char);"},
{"lineNum":"  284","line":"    else if (nSize <= std::numeric_limits<unsigned short>::max()) return sizeof(unsigned char) + sizeof(unsigned short);"},
{"lineNum":"  285","line":"    else if (nSize <= std::numeric_limits<unsigned int>::max())  return sizeof(unsigned char) + sizeof(unsigned int);"},
{"lineNum":"  286","line":"    else                         return sizeof(unsigned char) + sizeof(uint64_t);"},
{"lineNum":"  287","line":"}"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"inline void WriteCompactSize(CSizeComputer& os, uint64_t nSize);"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"template<typename Stream>"},
{"lineNum":"  292","line":"void WriteCompactSize(Stream& os, uint64_t nSize)"},
{"lineNum":"  293","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  294","line":"    if (nSize < 253)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":"    {"},
{"lineNum":"  296","line":"        ser_writedata8(os, nSize);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"    else if (nSize <= std::numeric_limits<unsigned short>::max())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":"    {"},
{"lineNum":"  300","line":"        ser_writedata8(os, 253);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  301","line":"        ser_writedata16(os, nSize);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"    else if (nSize <= std::numeric_limits<unsigned int>::max())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  304","line":"    {"},
{"lineNum":"  305","line":"        ser_writedata8(os, 254);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  306","line":"        ser_writedata32(os, nSize);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  307","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  308","line":"    else"},
{"lineNum":"  309","line":"    {"},
{"lineNum":"  310","line":"        ser_writedata8(os, 255);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"        ser_writedata64(os, nSize);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"    }"},
{"lineNum":"  313","line":"    return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  314","line":"}"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"template<typename Stream>"},
{"lineNum":"  317","line":"uint64_t ReadCompactSize(Stream& is)"},
{"lineNum":"  318","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  319","line":"    uint8_t chSize = ser_readdata8(is);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":"    uint64_t nSizeRet = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  321","line":"    if (chSize < 253)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  322","line":"    {"},
{"lineNum":"  323","line":"        nSizeRet = chSize;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  324","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  325","line":"    else if (chSize == 253)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  326","line":"    {"},
{"lineNum":"  327","line":"        nSizeRet = ser_readdata16(is);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":"        if (nSizeRet < 253)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":"            throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  330","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  331","line":"    else if (chSize == 254)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  332","line":"    {"},
{"lineNum":"  333","line":"        nSizeRet = ser_readdata32(is);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  334","line":"        if (nSizeRet < 0x10000u)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":"            throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  336","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  337","line":"    else"},
{"lineNum":"  338","line":"    {"},
{"lineNum":"  339","line":"        nSizeRet = ser_readdata64(is);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  340","line":"        if (nSizeRet < 0x100000000ULL)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  341","line":"            throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  342","line":"    }"},
{"lineNum":"  343","line":"    if (nSizeRet > (uint64_t)MAX_SIZE)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  344","line":"        throw std::ios_base::failure(\"ReadCompactSize(): size too large\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  345","line":"    return nSizeRet;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  346","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  347","line":""},
{"lineNum":"  348","line":"/**"},
{"lineNum":"  349","line":" * Variable-length integers: bytes are a MSB base-128 encoding of the number."},
{"lineNum":"  350","line":" * The high bit in each byte signifies whether another digit follows. To make"},
{"lineNum":"  351","line":" * sure the encoding is one-to-one, one is subtracted from all but the last digit."},
{"lineNum":"  352","line":" * Thus, the byte sequence a[] with length len, where all but the last byte"},
{"lineNum":"  353","line":" * has bit 128 set, encodes the number:"},
{"lineNum":"  354","line":" *"},
{"lineNum":"  355","line":" *  (a[len-1] & 0x7F) + sum(i=1..len-1, 128^i*((a[len-i-1] & 0x7F)+1))"},
{"lineNum":"  356","line":" *"},
{"lineNum":"  357","line":" * Properties:"},
{"lineNum":"  358","line":" * * Very small (0-127: 1 byte, 128-16511: 2 bytes, 16512-2113663: 3 bytes)"},
{"lineNum":"  359","line":" * * Every integer has exactly one encoding"},
{"lineNum":"  360","line":" * * Encoding does not depend on size of original integer type"},
{"lineNum":"  361","line":" * * No redundancy: every (infinite) byte sequence corresponds to a list"},
{"lineNum":"  362","line":" *   of encoded integers."},
{"lineNum":"  363","line":" *"},
{"lineNum":"  364","line":" * 0:         [0x00]  256:        [0x81 0x00]"},
{"lineNum":"  365","line":" * 1:         [0x01]  16383:      [0xFE 0x7F]"},
{"lineNum":"  366","line":" * 127:       [0x7F]  16384:      [0xFF 0x00]"},
{"lineNum":"  367","line":" * 128:  [0x80 0x00]  16511:      [0xFF 0x7F]"},
{"lineNum":"  368","line":" * 255:  [0x80 0x7F]  65535: [0x82 0xFE 0x7F]"},
{"lineNum":"  369","line":" * 2^32:           [0x8E 0xFE 0xFE 0xFF 0x00]"},
{"lineNum":"  370","line":" */"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"template<typename I>"},
{"lineNum":"  373","line":"inline unsigned int GetSizeOfVarInt(I n)"},
{"lineNum":"  374","line":"{"},
{"lineNum":"  375","line":"    int nRet = 0;"},
{"lineNum":"  376","line":"    while(true) {"},
{"lineNum":"  377","line":"        nRet++;"},
{"lineNum":"  378","line":"        if (n <= 0x7F)"},
{"lineNum":"  379","line":"            break;"},
{"lineNum":"  380","line":"        n = (n >> 7) - 1;"},
{"lineNum":"  381","line":"    }"},
{"lineNum":"  382","line":"    return nRet;"},
{"lineNum":"  383","line":"}"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"template<typename I>"},
{"lineNum":"  386","line":"inline void WriteVarInt(CSizeComputer& os, I n);"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"template<typename Stream, typename I>"},
{"lineNum":"  389","line":"void WriteVarInt(Stream& os, I n)"},
{"lineNum":"  390","line":"{"},
{"lineNum":"  391","line":"    unsigned char tmp[(sizeof(n)*8+6)/7];"},
{"lineNum":"  392","line":"    int len=0;"},
{"lineNum":"  393","line":"    while(true) {"},
{"lineNum":"  394","line":"        tmp[len] = (n & 0x7F) | (len ? 0x80 : 0x00);"},
{"lineNum":"  395","line":"        if (n <= 0x7F)"},
{"lineNum":"  396","line":"            break;"},
{"lineNum":"  397","line":"        n = (n >> 7) - 1;"},
{"lineNum":"  398","line":"        len++;"},
{"lineNum":"  399","line":"    }"},
{"lineNum":"  400","line":"    do {"},
{"lineNum":"  401","line":"        ser_writedata8(os, tmp[len]);"},
{"lineNum":"  402","line":"    } while(len--);"},
{"lineNum":"  403","line":"}"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"template<typename Stream, typename I>"},
{"lineNum":"  406","line":"I ReadVarInt(Stream& is)"},
{"lineNum":"  407","line":"{"},
{"lineNum":"  408","line":"    I n = 0;"},
{"lineNum":"  409","line":"    while(true) {"},
{"lineNum":"  410","line":"        unsigned char chData = ser_readdata8(is);"},
{"lineNum":"  411","line":"        n = (n << 7) | (chData & 0x7F);"},
{"lineNum":"  412","line":"        if (chData & 0x80)"},
{"lineNum":"  413","line":"            n++;"},
{"lineNum":"  414","line":"        else"},
{"lineNum":"  415","line":"            return n;"},
{"lineNum":"  416","line":"    }"},
{"lineNum":"  417","line":"}"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"#define FLATDATA(obj) REF(CFlatData((char*)&(obj), (char*)&(obj) + sizeof(obj)))"},
{"lineNum":"  420","line":"#define FIXEDBITSET(obj, size) REF(CFixedBitSet(REF(obj), (size)))"},
{"lineNum":"  421","line":"#define DYNBITSET(obj) REF(CDynamicBitSet(REF(obj)))"},
{"lineNum":"  422","line":"#define FIXEDVARINTSBITSET(obj, size) REF(CFixedVarIntsBitSet(REF(obj), (size)))"},
{"lineNum":"  423","line":"#define AUTOBITSET(obj, size) REF(CAutoBitSet(REF(obj), (size)))"},
{"lineNum":"  424","line":"#define VARINT(obj) REF(WrapVarInt(REF(obj)))"},
{"lineNum":"  425","line":"#define COMPACTSIZE(obj) REF(CCompactSize(REF(obj)))"},
{"lineNum":"  426","line":"#define LIMITED_STRING(obj,n) REF(LimitedString< n >(REF(obj)))"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"/**"},
{"lineNum":"  429","line":" * Wrapper for serializing arrays and POD."},
{"lineNum":"  430","line":" */"},
{"lineNum":"  431","line":"class CFlatData"},
{"lineNum":"  432","line":"{"},
{"lineNum":"  433","line":"protected:"},
{"lineNum":"  434","line":"    char* pbegin;"},
{"lineNum":"  435","line":"    char* pend;"},
{"lineNum":"  436","line":"public:"},
{"lineNum":"  437","line":"    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }"},
{"lineNum":"  438","line":"    template <class T, class TAl>"},
{"lineNum":"  439","line":"    explicit CFlatData(std::vector<T,TAl> &v)"},
{"lineNum":"  440","line":"    {"},
{"lineNum":"  441","line":"        pbegin = (char*)v.data();"},
{"lineNum":"  442","line":"        pend = (char*)(v.data() + v.size());"},
{"lineNum":"  443","line":"    }"},
{"lineNum":"  444","line":"    template <unsigned int N, typename T, typename S, typename D>"},
{"lineNum":"  445","line":"    explicit CFlatData(prevector<N, T, S, D> &v)"},
{"lineNum":"  446","line":"    {"},
{"lineNum":"  447","line":"        pbegin = (char*)v.data();"},
{"lineNum":"  448","line":"        pend = (char*)(v.data() + v.size());"},
{"lineNum":"  449","line":"    }"},
{"lineNum":"  450","line":"    char* begin() { return pbegin; }"},
{"lineNum":"  451","line":"    const char* begin() const { return pbegin; }"},
{"lineNum":"  452","line":"    char* end() { return pend; }"},
{"lineNum":"  453","line":"    const char* end() const { return pend; }"},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"    template<typename Stream>"},
{"lineNum":"  456","line":"    void Serialize(Stream& s) const"},
{"lineNum":"  457","line":"    {"},
{"lineNum":"  458","line":"        s.write(pbegin, pend - pbegin);"},
{"lineNum":"  459","line":"    }"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"    template<typename Stream>"},
{"lineNum":"  462","line":"    void Unserialize(Stream& s)"},
{"lineNum":"  463","line":"    {"},
{"lineNum":"  464","line":"        s.read(pbegin, pend - pbegin);"},
{"lineNum":"  465","line":"    }"},
{"lineNum":"  466","line":"};"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"class CFixedBitSet"},
{"lineNum":"  469","line":"{"},
{"lineNum":"  470","line":"protected:"},
{"lineNum":"  471","line":"    std::vector<bool>& vec;"},
{"lineNum":"  472","line":"    size_t size;"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"public:"},
{"lineNum":"  475","line":"    CFixedBitSet(std::vector<bool>& vecIn, size_t sizeIn) : vec(vecIn), size(sizeIn) {}"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"    template<typename Stream>"},
{"lineNum":"  478","line":"    void Serialize(Stream& s) const"},
{"lineNum":"  479","line":"    {"},
{"lineNum":"  480","line":"        std::vector<unsigned char> vBytes((size + 7) / 8);"},
{"lineNum":"  481","line":"        size_t ms = std::min(size, vec.size());"},
{"lineNum":"  482","line":"        for (size_t p = 0; p < ms; p++)"},
{"lineNum":"  483","line":"            vBytes[p / 8] |= vec[p] << (p % 8);"},
{"lineNum":"  484","line":"        s.write((char*)vBytes.data(), vBytes.size());"},
{"lineNum":"  485","line":"    }"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"    template<typename Stream>"},
{"lineNum":"  488","line":"    void Unserialize(Stream& s)"},
{"lineNum":"  489","line":"    {"},
{"lineNum":"  490","line":"        vec.resize(size);"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"        std::vector<unsigned char> vBytes((size + 7) / 8);"},
{"lineNum":"  493","line":"        s.read((char*)vBytes.data(), vBytes.size());"},
{"lineNum":"  494","line":"        for (size_t p = 0; p < size; p++)"},
{"lineNum":"  495","line":"            vec[p] = (vBytes[p / 8] & (1 << (p % 8))) != 0;"},
{"lineNum":"  496","line":"        if (vBytes.size() * 8 != size) {"},
{"lineNum":"  497","line":"            size_t rem = vBytes.size() * 8 - size;"},
{"lineNum":"  498","line":"            uint8_t m = ~(uint8_t)(0xff >> rem);"},
{"lineNum":"  499","line":"            if (vBytes[vBytes.size() - 1] & m) {"},
{"lineNum":"  500","line":"                throw std::ios_base::failure(\"Out-of-range bits set\");"},
{"lineNum":"  501","line":"            }"},
{"lineNum":"  502","line":"        }"},
{"lineNum":"  503","line":"    }"},
{"lineNum":"  504","line":"};"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"class CDynamicBitSet"},
{"lineNum":"  507","line":"{"},
{"lineNum":"  508","line":"protected:"},
{"lineNum":"  509","line":"    std::vector<bool>& vec;"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"public:"},
{"lineNum":"  512","line":"    explicit CDynamicBitSet(std::vector<bool>& vecIn) : vec(vecIn) {}"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"    template<typename Stream>"},
{"lineNum":"  515","line":"    void Serialize(Stream& s) const"},
{"lineNum":"  516","line":"    {"},
{"lineNum":"  517","line":"        WriteCompactSize(s, vec.size());"},
{"lineNum":"  518","line":"        CFixedBitSet(REF(vec), vec.size()).Serialize(s);"},
{"lineNum":"  519","line":"    }"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"    template<typename Stream>"},
{"lineNum":"  522","line":"    void Unserialize(Stream& s)"},
{"lineNum":"  523","line":"    {"},
{"lineNum":"  524","line":"        vec.resize(ReadCompactSize(s));"},
{"lineNum":"  525","line":"        CFixedBitSet(vec, vec.size()).Unserialize(s);"},
{"lineNum":"  526","line":"    }"},
{"lineNum":"  527","line":"};"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"/**"},
{"lineNum":"  530","line":" * Stores a fixed size bitset as a series of VarInts. Each VarInt is an offset from the last entry and the sum of the"},
{"lineNum":"  531","line":" * last entry and the offset gives an index into the bitset for a set bit. The series of VarInts ends with a 0."},
{"lineNum":"  532","line":" */"},
{"lineNum":"  533","line":"class CFixedVarIntsBitSet"},
{"lineNum":"  534","line":"{"},
{"lineNum":"  535","line":"protected:"},
{"lineNum":"  536","line":"    std::vector<bool>& vec;"},
{"lineNum":"  537","line":"    size_t size;"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"public:"},
{"lineNum":"  540","line":"    CFixedVarIntsBitSet(std::vector<bool>& vecIn, size_t sizeIn) : vec(vecIn), size(sizeIn) {}"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"    template<typename Stream>"},
{"lineNum":"  543","line":"    void Serialize(Stream& s) const"},
{"lineNum":"  544","line":"    {"},
{"lineNum":"  545","line":"        int32_t last = -1;"},
{"lineNum":"  546","line":"        for (int32_t i = 0; i < (int32_t)vec.size(); i++) {"},
{"lineNum":"  547","line":"            if (vec[i]) {"},
{"lineNum":"  548","line":"                WriteVarInt<Stream, uint32_t>(s, (uint32_t)(i - last));"},
{"lineNum":"  549","line":"                last = i;"},
{"lineNum":"  550","line":"            }"},
{"lineNum":"  551","line":"        }"},
{"lineNum":"  552","line":"        WriteVarInt(s, 0); // stopper"},
{"lineNum":"  553","line":"    }"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"    template<typename Stream>"},
{"lineNum":"  556","line":"    void Unserialize(Stream& s)"},
{"lineNum":"  557","line":"    {"},
{"lineNum":"  558","line":"        vec.assign(size, false);"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"        int32_t last = -1;"},
{"lineNum":"  561","line":"        while(true) {"},
{"lineNum":"  562","line":"            uint32_t offset = ReadVarInt<Stream, uint32_t>(s);"},
{"lineNum":"  563","line":"            if (offset == 0) {"},
{"lineNum":"  564","line":"                break;"},
{"lineNum":"  565","line":"            }"},
{"lineNum":"  566","line":"            int32_t idx = last + offset;"},
{"lineNum":"  567","line":"            if (idx >= (int32_t)size) {"},
{"lineNum":"  568","line":"                throw std::ios_base::failure(\"out of bounds index\");"},
{"lineNum":"  569","line":"            }"},
{"lineNum":"  570","line":"            if (last != -1 && idx <= last) {"},
{"lineNum":"  571","line":"                throw std::ios_base::failure(\"offset overflow\");"},
{"lineNum":"  572","line":"            }"},
{"lineNum":"  573","line":"            vec[idx] = true;"},
{"lineNum":"  574","line":"            last = idx;"},
{"lineNum":"  575","line":"        }"},
{"lineNum":"  576","line":"    }"},
{"lineNum":"  577","line":"};"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"/**"},
{"lineNum":"  580","line":" * Serializes either as a CFixedBitSet or CFixedVarIntsBitSet, depending on which would give a smaller size"},
{"lineNum":"  581","line":" */"},
{"lineNum":"  582","line":"class CAutoBitSet"},
{"lineNum":"  583","line":"{"},
{"lineNum":"  584","line":"protected:"},
{"lineNum":"  585","line":"    std::vector<bool>& vec;"},
{"lineNum":"  586","line":"    size_t size;"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"public:"},
{"lineNum":"  589","line":"    explicit CAutoBitSet(std::vector<bool>& vecIn, size_t sizeIn) : vec(vecIn), size(sizeIn) {}"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"    template<typename Stream>"},
{"lineNum":"  592","line":"    void Serialize(Stream& s) const"},
{"lineNum":"  593","line":"    {"},
{"lineNum":"  594","line":"        assert(vec.size() == size);"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"        size_t size1 = ::GetSerializeSize(s, CFixedBitSet(vec, size));"},
{"lineNum":"  597","line":"        size_t size2 = ::GetSerializeSize(s, CFixedVarIntsBitSet(vec, size));"},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"        if (size1 < size2) {"},
{"lineNum":"  600","line":"            ser_writedata8(s, 0);"},
{"lineNum":"  601","line":"            s << FIXEDBITSET(vec, vec.size());"},
{"lineNum":"  602","line":"        } else {"},
{"lineNum":"  603","line":"            ser_writedata8(s, 1);"},
{"lineNum":"  604","line":"            s << FIXEDVARINTSBITSET(vec, vec.size());"},
{"lineNum":"  605","line":"        }"},
{"lineNum":"  606","line":"    }"},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"    template<typename Stream>"},
{"lineNum":"  609","line":"    void Unserialize(Stream& s)"},
{"lineNum":"  610","line":"    {"},
{"lineNum":"  611","line":"        uint8_t isVarInts = ser_readdata8(s);"},
{"lineNum":"  612","line":"        if (isVarInts != 0 && isVarInts != 1) {"},
{"lineNum":"  613","line":"            throw std::ios_base::failure(\"invalid value for isVarInts byte\");"},
{"lineNum":"  614","line":"        }"},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"        if (!isVarInts) {"},
{"lineNum":"  617","line":"            s >> FIXEDBITSET(vec, size);"},
{"lineNum":"  618","line":"        } else {"},
{"lineNum":"  619","line":"            s >> FIXEDVARINTSBITSET(vec, size);"},
{"lineNum":"  620","line":"        }"},
{"lineNum":"  621","line":"    }"},
{"lineNum":"  622","line":"};"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"template<typename I>"},
{"lineNum":"  625","line":"class CVarInt"},
{"lineNum":"  626","line":"{"},
{"lineNum":"  627","line":"protected:"},
{"lineNum":"  628","line":"    I &n;"},
{"lineNum":"  629","line":"public:"},
{"lineNum":"  630","line":"    CVarInt(I& nIn) : n(nIn) { }"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"    template<typename Stream>"},
{"lineNum":"  633","line":"    void Serialize(Stream &s) const {"},
{"lineNum":"  634","line":"        WriteVarInt<Stream,I>(s, n);"},
{"lineNum":"  635","line":"    }"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"    template<typename Stream>"},
{"lineNum":"  638","line":"    void Unserialize(Stream& s) {"},
{"lineNum":"  639","line":"        n = ReadVarInt<Stream,I>(s);"},
{"lineNum":"  640","line":"    }"},
{"lineNum":"  641","line":"};"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"class CCompactSize"},
{"lineNum":"  644","line":"{"},
{"lineNum":"  645","line":"protected:"},
{"lineNum":"  646","line":"    uint64_t &n;"},
{"lineNum":"  647","line":"public:"},
{"lineNum":"  648","line":"    CCompactSize(uint64_t& nIn) : n(nIn) { }"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"    template<typename Stream>"},
{"lineNum":"  651","line":"    void Serialize(Stream &s) const {"},
{"lineNum":"  652","line":"        WriteCompactSize<Stream>(s, n);"},
{"lineNum":"  653","line":"    }"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"    template<typename Stream>"},
{"lineNum":"  656","line":"    void Unserialize(Stream& s) {"},
{"lineNum":"  657","line":"        n = ReadCompactSize<Stream>(s);"},
{"lineNum":"  658","line":"    }"},
{"lineNum":"  659","line":"};"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"template<size_t Limit>"},
{"lineNum":"  662","line":"class LimitedString"},
{"lineNum":"  663","line":"{"},
{"lineNum":"  664","line":"protected:"},
{"lineNum":"  665","line":"    std::string& string;"},
{"lineNum":"  666","line":"public:"},
{"lineNum":"  667","line":"    LimitedString(std::string& _string) : string(_string) {}"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"    template<typename Stream>"},
{"lineNum":"  670","line":"    void Unserialize(Stream& s)"},
{"lineNum":"  671","line":"    {"},
{"lineNum":"  672","line":"        size_t size = ReadCompactSize(s);"},
{"lineNum":"  673","line":"        if (size > Limit) {"},
{"lineNum":"  674","line":"            throw std::ios_base::failure(\"String length limit exceeded\");"},
{"lineNum":"  675","line":"        }"},
{"lineNum":"  676","line":"        string.resize(size);"},
{"lineNum":"  677","line":"        if (size != 0)"},
{"lineNum":"  678","line":"            s.read((char*)&string[0], size);"},
{"lineNum":"  679","line":"    }"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"    template<typename Stream>"},
{"lineNum":"  682","line":"    void Serialize(Stream& s) const"},
{"lineNum":"  683","line":"    {"},
{"lineNum":"  684","line":"        WriteCompactSize(s, string.size());"},
{"lineNum":"  685","line":"        if (!string.empty())"},
{"lineNum":"  686","line":"            s.write((char*)&string[0], string.size());"},
{"lineNum":"  687","line":"    }"},
{"lineNum":"  688","line":"};"},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"template<typename I>"},
{"lineNum":"  691","line":"CVarInt<I> WrapVarInt(I& n) { return CVarInt<I>(n); }"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"/**"},
{"lineNum":"  694","line":" * Forward declarations"},
{"lineNum":"  695","line":" */"},
{"lineNum":"  696","line":""},
{"lineNum":"  697","line":"/**"},
{"lineNum":"  698","line":" *  string"},
{"lineNum":"  699","line":" */"},
{"lineNum":"  700","line":"template<typename Stream, typename C> void Serialize(Stream& os, const std::basic_string<C>& str);"},
{"lineNum":"  701","line":"template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str);"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"/**"},
{"lineNum":"  704","line":" * prevector"},
{"lineNum":"  705","line":" * prevectors of unsigned char are a special case and are intended to be serialized as a single opaque blob."},
{"lineNum":"  706","line":" */"},
{"lineNum":"  707","line":"template<typename Stream, unsigned int N, typename T> void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&);"},
{"lineNum":"  708","line":"template<typename Stream, unsigned int N, typename T, typename V> void Serialize_impl(Stream& os, const prevector<N, T>& v, const V&);"},
{"lineNum":"  709","line":"template<typename Stream, unsigned int N, typename T> inline void Serialize(Stream& os, const prevector<N, T>& v);"},
{"lineNum":"  710","line":"template<typename Stream, unsigned int N, typename T> void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&);"},
{"lineNum":"  711","line":"template<typename Stream, unsigned int N, typename T, typename V> void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&);"},
{"lineNum":"  712","line":"template<typename Stream, unsigned int N, typename T> inline void Unserialize(Stream& is, prevector<N, T>& v);"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"/**"},
{"lineNum":"  715","line":" * vector"},
{"lineNum":"  716","line":" * vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob."},
{"lineNum":"  717","line":" */"},
{"lineNum":"  718","line":"template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&);"},
{"lineNum":"  719","line":"template<typename Stream, typename T, typename A, typename V> void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&);"},
{"lineNum":"  720","line":"template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v);"},
{"lineNum":"  721","line":"template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&);"},
{"lineNum":"  722","line":"template<typename Stream, typename T, typename A, typename V> void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&);"},
{"lineNum":"  723","line":"template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v);"},
{"lineNum":"  724","line":""},
{"lineNum":"  725","line":"/**"},
{"lineNum":"  726","line":" * pair"},
{"lineNum":"  727","line":" */"},
{"lineNum":"  728","line":"template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item);"},
{"lineNum":"  729","line":"template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item);"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"/**"},
{"lineNum":"  732","line":" * tuple"},
{"lineNum":"  733","line":" */"},
{"lineNum":"  734","line":"template<typename Stream, int index, typename... Ts>"},
{"lineNum":"  735","line":"struct SerializeTuple {"},
{"lineNum":"  736","line":"    void operator() (Stream&s, std::tuple<Ts...>& t) {"},
{"lineNum":"  737","line":"        SerializeTuple<Stream, index - 1, Ts...>{}(s, t);"},
{"lineNum":"  738","line":"        s << std::get<index>(t);"},
{"lineNum":"  739","line":"    }"},
{"lineNum":"  740","line":"};"},
{"lineNum":"  741","line":""},
{"lineNum":"  742","line":"template<typename Stream, typename... Ts>"},
{"lineNum":"  743","line":"struct SerializeTuple<Stream, 0, Ts...> {"},
{"lineNum":"  744","line":"    void operator() (Stream&s, std::tuple<Ts...>& t) {"},
{"lineNum":"  745","line":"        s << std::get<0>(t);"},
{"lineNum":"  746","line":"    }"},
{"lineNum":"  747","line":"};"},
{"lineNum":"  748","line":""},
{"lineNum":"  749","line":"template<typename Stream, int index, typename... Ts>"},
{"lineNum":"  750","line":"struct DeserializeTuple {"},
{"lineNum":"  751","line":"    void operator() (Stream&s, std::tuple<Ts...>& t) {"},
{"lineNum":"  752","line":"        DeserializeTuple<Stream, index - 1, Ts...>{}(s, t);"},
{"lineNum":"  753","line":"        s >> std::get<index>(t);"},
{"lineNum":"  754","line":"    }"},
{"lineNum":"  755","line":"};"},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"template<typename Stream, typename... Ts>"},
{"lineNum":"  758","line":"struct DeserializeTuple<Stream, 0, Ts...> {"},
{"lineNum":"  759","line":"    void operator() (Stream&s, std::tuple<Ts...>& t) {"},
{"lineNum":"  760","line":"        s >> std::get<0>(t);"},
{"lineNum":"  761","line":"    }"},
{"lineNum":"  762","line":"};"},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"template<typename Stream, typename... Elements>"},
{"lineNum":"  766","line":"void Serialize(Stream& os, const std::tuple<Elements...>& item)"},
{"lineNum":"  767","line":"{"},
{"lineNum":"  768","line":"    const auto size = std::tuple_size<std::tuple<Elements...>>::value;"},
{"lineNum":"  769","line":"    SerializeTuple<Stream, size - 1, Elements...>{}(os, const_cast<std::tuple<Elements...>&>(item));"},
{"lineNum":"  770","line":"}"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"template<typename Stream, typename... Elements>"},
{"lineNum":"  773","line":"void Unserialize(Stream& is, std::tuple<Elements...>& item)"},
{"lineNum":"  774","line":"{"},
{"lineNum":"  775","line":"    const auto size = std::tuple_size<std::tuple<Elements...>>::value;"},
{"lineNum":"  776","line":"    DeserializeTuple<Stream, size - 1, Elements...>{}(is, item);"},
{"lineNum":"  777","line":"}"},
{"lineNum":"  778","line":""},
{"lineNum":"  779","line":"/**"},
{"lineNum":"  780","line":" * shared_ptr"},
{"lineNum":"  781","line":" */"},
{"lineNum":"  782","line":"template<typename Stream, typename T> void Serialize(Stream& os, const std::shared_ptr<const T>& p);"},
{"lineNum":"  783","line":"template<typename Stream, typename T> void Unserialize(Stream& os, std::shared_ptr<const T>& p);"},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"/**"},
{"lineNum":"  786","line":" * unique_ptr"},
{"lineNum":"  787","line":" */"},
{"lineNum":"  788","line":"template<typename Stream, typename T> void Serialize(Stream& os, const std::unique_ptr<const T>& p);"},
{"lineNum":"  789","line":"template<typename Stream, typename T> void Unserialize(Stream& os, std::unique_ptr<const T>& p);"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"/**"},
{"lineNum":"  792","line":" * optional"},
{"lineNum":"  793","line":" */"},
{"lineNum":"  794","line":"template<typename Stream, typename T> void Serialize(Stream& os, const boost::optional<T>& p);"},
{"lineNum":"  795","line":"template<typename Stream, typename T> void Unserialize(Stream& os, boost::optional<T>& p);"},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"/**"},
{"lineNum":"  799","line":" * If none of the specialized versions above matched, default to calling member function."},
{"lineNum":"  800","line":" */"},
{"lineNum":"  801","line":"template<typename Stream, typename T>"},
{"lineNum":"  802","line":"inline auto Serialize(Stream& os, const T& a) -> decltype(a.Serialize(os))"},
{"lineNum":"  803","line":"{","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  804","line":"    a.Serialize(os);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  805","line":"}","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  806","line":""},
{"lineNum":"  807","line":"template<typename Stream, typename T>"},
{"lineNum":"  808","line":"inline auto Unserialize(Stream& is, T& a) -> decltype(a.Unserialize(is))"},
{"lineNum":"  809","line":"{","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  810","line":"    a.Unserialize(is);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  811","line":"}","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"/**"},
{"lineNum":"  818","line":" * string"},
{"lineNum":"  819","line":" */"},
{"lineNum":"  820","line":"template<typename Stream, typename C>"},
{"lineNum":"  821","line":"void Serialize(Stream& os, const std::basic_string<C>& str)"},
{"lineNum":"  822","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  823","line":"    WriteCompactSize(os, str.size());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  824","line":"    if (!str.empty())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  825","line":"        os.write((char*)&str[0], str.size() * sizeof(str[0]));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  826","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  827","line":""},
{"lineNum":"  828","line":"template<typename Stream, typename C>"},
{"lineNum":"  829","line":"void Unserialize(Stream& is, std::basic_string<C>& str)"},
{"lineNum":"  830","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  831","line":"    unsigned int nSize = ReadCompactSize(is);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  832","line":"    str.resize(nSize);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  833","line":"    if (nSize != 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  834","line":"        is.read((char*)&str[0], nSize * sizeof(str[0]));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  835","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":""},
{"lineNum":"  839","line":"/**"},
{"lineNum":"  840","line":" * prevector"},
{"lineNum":"  841","line":" */"},
{"lineNum":"  842","line":"template<typename Stream, unsigned int N, typename T>"},
{"lineNum":"  843","line":"void Serialize_impl(Stream& os, const prevector<N, T>& v, const unsigned char&)"},
{"lineNum":"  844","line":"{"},
{"lineNum":"  845","line":"    WriteCompactSize(os, v.size());"},
{"lineNum":"  846","line":"    if (!v.empty())"},
{"lineNum":"  847","line":"        os.write((char*)&v[0], v.size() * sizeof(T));"},
{"lineNum":"  848","line":"}"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"template<typename Stream, unsigned int N, typename T, typename V>"},
{"lineNum":"  851","line":"void Serialize_impl(Stream& os, const prevector<N, T>& v, const V&)"},
{"lineNum":"  852","line":"{"},
{"lineNum":"  853","line":"    WriteCompactSize(os, v.size());"},
{"lineNum":"  854","line":"    for (typename prevector<N, T>::const_iterator vi = v.begin(); vi != v.end(); ++vi)"},
{"lineNum":"  855","line":"        ::Serialize(os, (*vi));"},
{"lineNum":"  856","line":"}"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"template<typename Stream, unsigned int N, typename T>"},
{"lineNum":"  859","line":"inline void Serialize(Stream& os, const prevector<N, T>& v)"},
{"lineNum":"  860","line":"{"},
{"lineNum":"  861","line":"    Serialize_impl(os, v, T());"},
{"lineNum":"  862","line":"}"},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"template<typename Stream, unsigned int N, typename T>"},
{"lineNum":"  866","line":"void Unserialize_impl(Stream& is, prevector<N, T>& v, const unsigned char&)"},
{"lineNum":"  867","line":"{"},
{"lineNum":"  868","line":"    // Limit size per read so bogus size value won\'t cause out of memory"},
{"lineNum":"  869","line":"    v.clear();"},
{"lineNum":"  870","line":"    unsigned int nSize = ReadCompactSize(is);"},
{"lineNum":"  871","line":"    unsigned int i = 0;"},
{"lineNum":"  872","line":"    while (i < nSize)"},
{"lineNum":"  873","line":"    {"},
{"lineNum":"  874","line":"        unsigned int blk = std::min(nSize - i, (unsigned int)(1 + 4999999 / sizeof(T)));"},
{"lineNum":"  875","line":"        v.resize(i + blk);"},
{"lineNum":"  876","line":"        is.read((char*)&v[i], blk * sizeof(T));"},
{"lineNum":"  877","line":"        i += blk;"},
{"lineNum":"  878","line":"    }"},
{"lineNum":"  879","line":"}"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"template<typename Stream, unsigned int N, typename T, typename V>"},
{"lineNum":"  882","line":"void Unserialize_impl(Stream& is, prevector<N, T>& v, const V&)"},
{"lineNum":"  883","line":"{"},
{"lineNum":"  884","line":"    v.clear();"},
{"lineNum":"  885","line":"    unsigned int nSize = ReadCompactSize(is);"},
{"lineNum":"  886","line":"    unsigned int i = 0;"},
{"lineNum":"  887","line":"    unsigned int nMid = 0;"},
{"lineNum":"  888","line":"    while (nMid < nSize)"},
{"lineNum":"  889","line":"    {"},
{"lineNum":"  890","line":"        nMid += 5000000 / sizeof(T);"},
{"lineNum":"  891","line":"        if (nMid > nSize)"},
{"lineNum":"  892","line":"            nMid = nSize;"},
{"lineNum":"  893","line":"        v.resize(nMid);"},
{"lineNum":"  894","line":"        for (; i < nMid; i++)"},
{"lineNum":"  895","line":"            Unserialize(is, v[i]);"},
{"lineNum":"  896","line":"    }"},
{"lineNum":"  897","line":"}"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"template<typename Stream, unsigned int N, typename T>"},
{"lineNum":"  900","line":"inline void Unserialize(Stream& is, prevector<N, T>& v)"},
{"lineNum":"  901","line":"{"},
{"lineNum":"  902","line":"    Unserialize_impl(is, v, T());"},
{"lineNum":"  903","line":"}"},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":""},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"/**"},
{"lineNum":"  908","line":" * vector"},
{"lineNum":"  909","line":" */"},
{"lineNum":"  910","line":"template<typename Stream, typename T, typename A>"},
{"lineNum":"  911","line":"void Serialize_impl(Stream& os, const std::vector<T, A>& v, const unsigned char&)"},
{"lineNum":"  912","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  913","line":"    WriteCompactSize(os, v.size());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  914","line":"    if (!v.empty())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  915","line":"        os.write((char*)&v[0], v.size() * sizeof(T));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  916","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"template<typename Stream, typename T, typename A, typename V>"},
{"lineNum":"  919","line":"void Serialize_impl(Stream& os, const std::vector<T, A>& v, const V&)"},
{"lineNum":"  920","line":"{"},
{"lineNum":"  921","line":"    WriteCompactSize(os, v.size());"},
{"lineNum":"  922","line":"    for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)"},
{"lineNum":"  923","line":"        ::Serialize(os, (*vi));"},
{"lineNum":"  924","line":"}"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"template<typename Stream, typename T, typename A>"},
{"lineNum":"  927","line":"inline void Serialize(Stream& os, const std::vector<T, A>& v)"},
{"lineNum":"  928","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  929","line":"    Serialize_impl(os, v, T());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  930","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"template<typename Stream, typename T, typename A>"},
{"lineNum":"  934","line":"void Unserialize_impl(Stream& is, std::vector<T, A>& v, const unsigned char&)"},
{"lineNum":"  935","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  936","line":"    // Limit size per read so bogus size value won\'t cause out of memory"},
{"lineNum":"  937","line":"    v.clear();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  938","line":"    unsigned int nSize = ReadCompactSize(is);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  939","line":"    unsigned int i = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  940","line":"    while (i < nSize)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  941","line":"    {"},
{"lineNum":"  942","line":"        unsigned int blk = std::min(nSize - i, (unsigned int)(1 + 4999999 / sizeof(T)));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  943","line":"        v.resize(i + blk);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  944","line":"        is.read((char*)&v[i], blk * sizeof(T));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  945","line":"        i += blk;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  946","line":"    }"},
{"lineNum":"  947","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"template<typename Stream, typename T, typename A, typename V>"},
{"lineNum":"  950","line":"void Unserialize_impl(Stream& is, std::vector<T, A>& v, const V&)"},
{"lineNum":"  951","line":"{"},
{"lineNum":"  952","line":"    v.clear();"},
{"lineNum":"  953","line":"    unsigned int nSize = ReadCompactSize(is);"},
{"lineNum":"  954","line":"    unsigned int i = 0;"},
{"lineNum":"  955","line":"    unsigned int nMid = 0;"},
{"lineNum":"  956","line":"    while (nMid < nSize)"},
{"lineNum":"  957","line":"    {"},
{"lineNum":"  958","line":"        nMid += 5000000 / sizeof(T);"},
{"lineNum":"  959","line":"        if (nMid > nSize)"},
{"lineNum":"  960","line":"            nMid = nSize;"},
{"lineNum":"  961","line":"        v.resize(nMid);"},
{"lineNum":"  962","line":"        for (; i < nMid; i++)"},
{"lineNum":"  963","line":"            Unserialize(is, v[i]);"},
{"lineNum":"  964","line":"    }"},
{"lineNum":"  965","line":"}"},
{"lineNum":"  966","line":""},
{"lineNum":"  967","line":"template<typename Stream, typename T, typename A>"},
{"lineNum":"  968","line":"inline void Unserialize(Stream& is, std::vector<T, A>& v)"},
{"lineNum":"  969","line":"{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  970","line":"    Unserialize_impl(is, v, T());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  971","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  972","line":""},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"/**"},
{"lineNum":"  976","line":" * pair"},
{"lineNum":"  977","line":" */"},
{"lineNum":"  978","line":"template<typename Stream, typename K, typename T>"},
{"lineNum":"  979","line":"void Serialize(Stream& os, const std::pair<K, T>& item)"},
{"lineNum":"  980","line":"{"},
{"lineNum":"  981","line":"    Serialize(os, item.first);"},
{"lineNum":"  982","line":"    Serialize(os, item.second);"},
{"lineNum":"  983","line":"}"},
{"lineNum":"  984","line":""},
{"lineNum":"  985","line":"template<typename Stream, typename K, typename T>"},
{"lineNum":"  986","line":"void Unserialize(Stream& is, std::pair<K, T>& item)"},
{"lineNum":"  987","line":"{"},
{"lineNum":"  988","line":"    Unserialize(is, item.first);"},
{"lineNum":"  989","line":"    Unserialize(is, item.second);"},
{"lineNum":"  990","line":"}"},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":"/**"},
{"lineNum":"  993","line":"* 3 tuples"},
{"lineNum":"  994","line":"*/"},
{"lineNum":"  995","line":""},
{"lineNum":"  996","line":"template<typename Stream, typename T0, typename T1, typename T2>"},
{"lineNum":"  997","line":"void Serialize(Stream& os, const std::tuple<T0, T1, T2>& item)"},
{"lineNum":"  998","line":"{"},
{"lineNum":"  999","line":"    Serialize(os, std::get<0>(item));"},
{"lineNum":" 1000","line":"    Serialize(os, std::get<1>(item));"},
{"lineNum":" 1001","line":"    Serialize(os, std::get<2>(item));"},
{"lineNum":" 1002","line":"}"},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"template<typename Stream, typename T0, typename T1, typename T2>"},
{"lineNum":" 1005","line":"void Unserialize(Stream& is, std::tuple<T0, T1, T2>& item)"},
{"lineNum":" 1006","line":"{"},
{"lineNum":" 1007","line":"    Unserialize(is, std::get<0>(item));"},
{"lineNum":" 1008","line":"    Unserialize(is, std::get<1>(item));"},
{"lineNum":" 1009","line":"    Unserialize(is, std::get<2>(item));"},
{"lineNum":" 1010","line":"}"},
{"lineNum":" 1011","line":""},
{"lineNum":" 1012","line":"/**"},
{"lineNum":" 1013","line":"* 4 tuples"},
{"lineNum":" 1014","line":"*/"},
{"lineNum":" 1015","line":"template<typename Stream, typename T0, typename T1, typename T2, typename T3>"},
{"lineNum":" 1016","line":"void Serialize(Stream& os, const std::tuple<T0, T1, T2, T3>& item)"},
{"lineNum":" 1017","line":"{"},
{"lineNum":" 1018","line":"    Serialize(os, std::get<0>(item));"},
{"lineNum":" 1019","line":"    Serialize(os, std::get<1>(item));"},
{"lineNum":" 1020","line":"    Serialize(os, std::get<2>(item));"},
{"lineNum":" 1021","line":"    Serialize(os, std::get<3>(item));"},
{"lineNum":" 1022","line":"}"},
{"lineNum":" 1023","line":""},
{"lineNum":" 1024","line":"template<typename Stream, typename T0, typename T1, typename T2, typename T3>"},
{"lineNum":" 1025","line":"void Unserialize(Stream& is, std::tuple<T0, T1, T2, T3>& item)"},
{"lineNum":" 1026","line":"{"},
{"lineNum":" 1027","line":"    Unserialize(is, std::get<0>(item));"},
{"lineNum":" 1028","line":"    Unserialize(is, std::get<1>(item));"},
{"lineNum":" 1029","line":"    Unserialize(is, std::get<2>(item));"},
{"lineNum":" 1030","line":"    Unserialize(is, std::get<3>(item));"},
{"lineNum":" 1031","line":"}"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"/**"},
{"lineNum":" 1034","line":" * map"},
{"lineNum":" 1035","line":" */"},
{"lineNum":" 1036","line":""},
{"lineNum":" 1037","line":"template <typename Stream, typename MapType, typename K = typename MapType::key_type, typename T = typename MapType::mapped_type>"},
{"lineNum":" 1038","line":"void Serialize(Stream& os, MapType const &m)"},
{"lineNum":" 1039","line":"{"},
{"lineNum":" 1040","line":"    WriteCompactSize(os, m.size());"},
{"lineNum":" 1041","line":"    for (typename MapType::const_iterator mi = m.begin(); mi != m.end(); ++mi)"},
{"lineNum":" 1042","line":"        Serialize(os, (*mi));"},
{"lineNum":" 1043","line":"}"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"template <typename Stream, typename MapType, typename K = typename MapType::key_type, typename T = typename MapType::mapped_type>"},
{"lineNum":" 1046","line":"void Unserialize(Stream& is, MapType & m)"},
{"lineNum":" 1047","line":"{"},
{"lineNum":" 1048","line":"    m.clear();"},
{"lineNum":" 1049","line":"    unsigned int nSize = ReadCompactSize(is);"},
{"lineNum":" 1050","line":"    typename MapType::iterator mi = m.begin();"},
{"lineNum":" 1051","line":"    for (unsigned int i = 0; i < nSize; i++)"},
{"lineNum":" 1052","line":"    {"},
{"lineNum":" 1053","line":"        std::pair<K, T> item;"},
{"lineNum":" 1054","line":"        Unserialize(is, item);"},
{"lineNum":" 1055","line":"        mi = m.insert(mi, item);"},
{"lineNum":" 1056","line":"    }"},
{"lineNum":" 1057","line":"}"},
{"lineNum":" 1058","line":""},
{"lineNum":" 1059","line":""},
{"lineNum":" 1060","line":"/**"},
{"lineNum":" 1061","line":" * set"},
{"lineNum":" 1062","line":" */"},
{"lineNum":" 1063","line":""},
{"lineNum":" 1064","line":"template <typename SetType>"},
{"lineNum":" 1065","line":"using CIsSet = typename std::enable_if<std::is_same<typename SetType::key_type, typename SetType::value_type>::value, SetType>::type;"},
{"lineNum":" 1066","line":""},
{"lineNum":" 1067","line":"template<typename Stream, typename SetType, typename Enabled = CIsSet<SetType>>"},
{"lineNum":" 1068","line":"void Serialize(Stream& os, const SetType & m)"},
{"lineNum":" 1069","line":"{"},
{"lineNum":" 1070","line":"    WriteCompactSize(os, m.size());"},
{"lineNum":" 1071","line":"    for (typename SetType::const_iterator it = m.begin(); it != m.end(); ++it)"},
{"lineNum":" 1072","line":"        Serialize(os, (*it));"},
{"lineNum":" 1073","line":"}"},
{"lineNum":" 1074","line":""},
{"lineNum":" 1075","line":"template<typename Stream, typename SetType, typename Enabled = CIsSet<SetType>>"},
{"lineNum":" 1076","line":"void Unserialize(Stream& is, SetType & m)"},
{"lineNum":" 1077","line":"{"},
{"lineNum":" 1078","line":"    m.clear();"},
{"lineNum":" 1079","line":"    unsigned int nSize = ReadCompactSize(is);"},
{"lineNum":" 1080","line":"    typename SetType::iterator it = m.begin();"},
{"lineNum":" 1081","line":"    for (unsigned int i = 0; i < nSize; i++)"},
{"lineNum":" 1082","line":"    {"},
{"lineNum":" 1083","line":"        typename SetType::key_type key;"},
{"lineNum":" 1084","line":"        Unserialize(is, key);"},
{"lineNum":" 1085","line":"        it = m.insert(it, key);"},
{"lineNum":" 1086","line":"    }"},
{"lineNum":" 1087","line":"}"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":""},
{"lineNum":" 1090","line":""},
{"lineNum":" 1091","line":"/**"},
{"lineNum":" 1092","line":" * unique_ptr"},
{"lineNum":" 1093","line":" */"},
{"lineNum":" 1094","line":"template<typename Stream, typename T> void"},
{"lineNum":" 1095","line":"Serialize(Stream& os, const std::unique_ptr<const T>& p)"},
{"lineNum":" 1096","line":"{"},
{"lineNum":" 1097","line":"    Serialize(os, *p);"},
{"lineNum":" 1098","line":"}"},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"template<typename Stream, typename T>"},
{"lineNum":" 1101","line":"void Unserialize(Stream& is, std::unique_ptr<const T>& p)"},
{"lineNum":" 1102","line":"{"},
{"lineNum":" 1103","line":"    p.reset(new T(deserialize, is));"},
{"lineNum":" 1104","line":"}"},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"/**"},
{"lineNum":" 1109","line":" * shared_ptr"},
{"lineNum":" 1110","line":" */"},
{"lineNum":" 1111","line":"template<typename Stream, typename T> void"},
{"lineNum":" 1112","line":"Serialize(Stream& os, const std::shared_ptr<const T>& p)"},
{"lineNum":" 1113","line":"{"},
{"lineNum":" 1114","line":"    Serialize(os, *p);"},
{"lineNum":" 1115","line":"}"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"template<typename Stream, typename T>"},
{"lineNum":" 1118","line":"void Unserialize(Stream& is, std::shared_ptr<const T>& p)"},
{"lineNum":" 1119","line":"{"},
{"lineNum":" 1120","line":"    p = std::make_shared<const T>(deserialize, is);"},
{"lineNum":" 1121","line":"}"},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":""},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"/**"},
{"lineNum":" 1126","line":" * optional"},
{"lineNum":" 1127","line":" */"},
{"lineNum":" 1128","line":"template<typename Stream, typename T> void"},
{"lineNum":" 1129","line":"Serialize(Stream& os, const boost::optional<T>& p)"},
{"lineNum":" 1130","line":"{"},
{"lineNum":" 1131","line":"    bool exists(p);"},
{"lineNum":" 1132","line":"    Serialize(os, exists);"},
{"lineNum":" 1133","line":"    if (exists)"},
{"lineNum":" 1134","line":"        Serialize(os, *p);"},
{"lineNum":" 1135","line":"}"},
{"lineNum":" 1136","line":""},
{"lineNum":" 1137","line":"template<typename Stream, typename T>"},
{"lineNum":" 1138","line":"void Unserialize(Stream& is, boost::optional<T>& p)"},
{"lineNum":" 1139","line":"{"},
{"lineNum":" 1140","line":"    bool exists;"},
{"lineNum":" 1141","line":"    Unserialize(is, exists);"},
{"lineNum":" 1142","line":"    if (exists)"},
{"lineNum":" 1143","line":"        p.emplace(deserialize, is);"},
{"lineNum":" 1144","line":"}"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":""},
{"lineNum":" 1147","line":""},
{"lineNum":" 1148","line":"/**"},
{"lineNum":" 1149","line":" * Support for ADD_SERIALIZE_METHODS and READWRITE macro"},
{"lineNum":" 1150","line":" */"},
{"lineNum":" 1151","line":"struct CSerActionSerialize"},
{"lineNum":" 1152","line":"{"},
{"lineNum":" 1153","line":"    constexpr bool ForRead() const { return false; }"},
{"lineNum":" 1154","line":"};"},
{"lineNum":" 1155","line":"struct CSerActionUnserialize"},
{"lineNum":" 1156","line":"{"},
{"lineNum":" 1157","line":"    constexpr bool ForRead() const { return true; }"},
{"lineNum":" 1158","line":"};"},
{"lineNum":" 1159","line":""},
{"lineNum":" 1160","line":"template<typename Stream, typename T>"},
{"lineNum":" 1161","line":"inline void SerReadWrite(Stream& s, const T& obj, CSerActionSerialize ser_action)"},
{"lineNum":" 1162","line":"{","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 1163","line":"    ::Serialize(s, obj);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1164","line":"}","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"template<typename Stream, typename T>"},
{"lineNum":" 1167","line":"inline void SerReadWrite(Stream& s, T& obj, CSerActionUnserialize ser_action)"},
{"lineNum":" 1168","line":"{","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 1169","line":"    ::Unserialize(s, obj);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":" 1170","line":"}","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":" 1171","line":""},
{"lineNum":" 1172","line":""},
{"lineNum":" 1173","line":""},
{"lineNum":" 1174","line":""},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":""},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":""},
{"lineNum":" 1179","line":""},
{"lineNum":" 1180","line":"/* ::GetSerializeSize implementations"},
{"lineNum":" 1181","line":" *"},
{"lineNum":" 1182","line":" * Computing the serialized size of objects is done through a special stream"},
{"lineNum":" 1183","line":" * object of type CSizeComputer, which only records the number of bytes written"},
{"lineNum":" 1184","line":" * to it."},
{"lineNum":" 1185","line":" *"},
{"lineNum":" 1186","line":" * If your Serialize or SerializationOp method has non-trivial overhead for"},
{"lineNum":" 1187","line":" * serialization, it may be worthwhile to implement a specialized version for"},
{"lineNum":" 1188","line":" * CSizeComputer, which uses the s.seek() method to record bytes that would"},
{"lineNum":" 1189","line":" * be written instead."},
{"lineNum":" 1190","line":" */"},
{"lineNum":" 1191","line":"class CSizeComputer"},
{"lineNum":" 1192","line":"{"},
{"lineNum":" 1193","line":"protected:"},
{"lineNum":" 1194","line":"    size_t nSize;"},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":"    const int nType;"},
{"lineNum":" 1197","line":"    const int nVersion;"},
{"lineNum":" 1198","line":"public:"},
{"lineNum":" 1199","line":"    CSizeComputer(int nTypeIn, int nVersionIn) : nSize(0), nType(nTypeIn), nVersion(nVersionIn) {}"},
{"lineNum":" 1200","line":""},
{"lineNum":" 1201","line":"    void write(const char *psz, size_t _nSize)"},
{"lineNum":" 1202","line":"    {"},
{"lineNum":" 1203","line":"        this->nSize += _nSize;"},
{"lineNum":" 1204","line":"    }"},
{"lineNum":" 1205","line":""},
{"lineNum":" 1206","line":"    /** Pretend _nSize bytes are written, without specifying them. */"},
{"lineNum":" 1207","line":"    void seek(size_t _nSize)"},
{"lineNum":" 1208","line":"    {"},
{"lineNum":" 1209","line":"        this->nSize += _nSize;"},
{"lineNum":" 1210","line":"    }"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"    template<typename T>"},
{"lineNum":" 1213","line":"    CSizeComputer& operator<<(const T& obj)"},
{"lineNum":" 1214","line":"    {"},
{"lineNum":" 1215","line":"        ::Serialize(*this, obj);"},
{"lineNum":" 1216","line":"        return (*this);"},
{"lineNum":" 1217","line":"    }"},
{"lineNum":" 1218","line":""},
{"lineNum":" 1219","line":"    size_t size() const {"},
{"lineNum":" 1220","line":"        return nSize;"},
{"lineNum":" 1221","line":"    }"},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"    int GetVersion() const { return nVersion; }"},
{"lineNum":" 1224","line":"    int GetType() const { return nType; }"},
{"lineNum":" 1225","line":"};"},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"template<typename Stream>"},
{"lineNum":" 1228","line":"void SerializeMany(Stream& s)"},
{"lineNum":" 1229","line":"{"},
{"lineNum":" 1230","line":"}"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"template<typename Stream, typename Arg>"},
{"lineNum":" 1233","line":"void SerializeMany(Stream& s, Arg&& arg)"},
{"lineNum":" 1234","line":"{"},
{"lineNum":" 1235","line":"    ::Serialize(s, std::forward<Arg>(arg));"},
{"lineNum":" 1236","line":"}"},
{"lineNum":" 1237","line":""},
{"lineNum":" 1238","line":"template<typename Stream, typename Arg, typename... Args>"},
{"lineNum":" 1239","line":"void SerializeMany(Stream& s, Arg&& arg, Args&&... args)"},
{"lineNum":" 1240","line":"{"},
{"lineNum":" 1241","line":"    ::Serialize(s, std::forward<Arg>(arg));"},
{"lineNum":" 1242","line":"    ::SerializeMany(s, std::forward<Args>(args)...);"},
{"lineNum":" 1243","line":"}"},
{"lineNum":" 1244","line":""},
{"lineNum":" 1245","line":"template<typename Stream>"},
{"lineNum":" 1246","line":"inline void UnserializeMany(Stream& s)"},
{"lineNum":" 1247","line":"{"},
{"lineNum":" 1248","line":"}"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"template<typename Stream, typename Arg>"},
{"lineNum":" 1251","line":"inline void UnserializeMany(Stream& s, Arg& arg)"},
{"lineNum":" 1252","line":"{"},
{"lineNum":" 1253","line":"    ::Unserialize(s, arg);"},
{"lineNum":" 1254","line":"}"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"template<typename Stream, typename Arg, typename... Args>"},
{"lineNum":" 1257","line":"inline void UnserializeMany(Stream& s, Arg& arg, Args&... args)"},
{"lineNum":" 1258","line":"{"},
{"lineNum":" 1259","line":"    ::Unserialize(s, arg);"},
{"lineNum":" 1260","line":"    ::UnserializeMany(s, args...);"},
{"lineNum":" 1261","line":"}"},
{"lineNum":" 1262","line":""},
{"lineNum":" 1263","line":"template<typename Stream, typename... Args>"},
{"lineNum":" 1264","line":"inline void SerReadWriteMany(Stream& s, CSerActionSerialize ser_action, Args&&... args)"},
{"lineNum":" 1265","line":"{"},
{"lineNum":" 1266","line":"    ::SerializeMany(s, std::forward<Args>(args)...);"},
{"lineNum":" 1267","line":"}"},
{"lineNum":" 1268","line":""},
{"lineNum":" 1269","line":"template<typename Stream, typename... Args>"},
{"lineNum":" 1270","line":"inline void SerReadWriteMany(Stream& s, CSerActionUnserialize ser_action, Args&... args)"},
{"lineNum":" 1271","line":"{"},
{"lineNum":" 1272","line":"    ::UnserializeMany(s, args...);"},
{"lineNum":" 1273","line":"}"},
{"lineNum":" 1274","line":""},
{"lineNum":" 1275","line":"template<typename I>"},
{"lineNum":" 1276","line":"inline void WriteVarInt(CSizeComputer &s, I n)"},
{"lineNum":" 1277","line":"{"},
{"lineNum":" 1278","line":"    s.seek(GetSizeOfVarInt<I>(n));"},
{"lineNum":" 1279","line":"}"},
{"lineNum":" 1280","line":""},
{"lineNum":" 1281","line":"inline void WriteCompactSize(CSizeComputer &s, uint64_t nSize)"},
{"lineNum":" 1282","line":"{"},
{"lineNum":" 1283","line":"    s.seek(GetSizeOfCompactSize(nSize));"},
{"lineNum":" 1284","line":"}"},
{"lineNum":" 1285","line":""},
{"lineNum":" 1286","line":"template <typename T>"},
{"lineNum":" 1287","line":"size_t GetSerializeSize(const T& t, int nType, int nVersion)"},
{"lineNum":" 1288","line":"{"},
{"lineNum":" 1289","line":"    return (CSizeComputer(nType, nVersion) << t).size();"},
{"lineNum":" 1290","line":"}"},
{"lineNum":" 1291","line":""},
{"lineNum":" 1292","line":"template <typename S, typename T>"},
{"lineNum":" 1293","line":"size_t GetSerializeSize(const S& s, const T& t)"},
{"lineNum":" 1294","line":"{"},
{"lineNum":" 1295","line":"    return (CSizeComputer(s.GetType(), s.GetVersion()) << t).size();"},
{"lineNum":" 1296","line":"}"},
{"lineNum":" 1297","line":""},
{"lineNum":" 1298","line":"#endif // BITCOIN_SERIALIZE_H"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "mint_transaction_debug", "date" : "2023-08-28 11:26:51", "instrumented" : 116, "covered" : 0,};
var merged_data = [];
